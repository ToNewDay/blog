[{"route":"/docs/RD-specifications/README.html","content":" 导语 本篇文章旨在通过一个简单完整的开发流程来让业务快速入门。流程很简单，大家将跟随我们首先初始化一个工作流，然后我们通过git在本地拉一个分支，然后再MR到主干中。就让我们看看这其中会发生什么吧。 1.初始化工作流1 选择一个合适的Git工作流 关于各个git工作流的介绍可参考 这里 ，这里我们就选择GithubFlow来开始我们的例子吧。 enterimagedescriptionhere 2 点击完上面的创建，这样我们就来到了如下的Github工作流的配置界面 enterimagedescriptionhere 3 这时我们来登记一下主干 点击确认之后，后台检测到如果主干本身为保护分支，则不会做任何操作。如果主干为非保护则会将主干变为保护，同时主干的mr和push权限被调整为abovemaster branchmember enterimagedescriptionhere 4 登记完主干，不妨再关联一下tapd enterimagedescriptionhere 5 然后会跳转tapd的oauth界面，跟着提示选择自己的项目即可。 enterimagedescriptionhere 6 关联后会跳转回来，看到如下显示 enterimagedescriptionhere 7 这样基本设置就搞定了。然后切换Tab到分支规则，瞅一眼自动生成的分支命名规范以及MR规范还是否需要调整。这里我们就按默认生成的数据来不做其他修改。 enterimagedescriptionhere 8 现在我们将视线转移到关联ci模版的这个tab，稍后在创建分支的例子中，会用到这里的配置来自动关联 创建ci任务。 enterimagedescriptionhere 9 点击创建模版后，有如下表单 enterimagedescriptionhere 选择仓库 因为一个项目下可能会有多个仓库，比如有前端以及后端。这里会涉及到gcc以及webpack等不同的编译过程，因此需要针对不同的仓库建立不同的关联。另外如果选择全部仓库，代表如果没有匹配到特定仓库，就用此配置来创建及关联任务。 适用版本 每个版本可能会有自己的不同的编译过程，因此会针对不同的版本建立不同的关联。另外如果选择全部版本，代表没有匹配到特定版本，就用此配置来创建及关联任务。 覆盖分支类型 代表此配置将适用于哪种分支类型。 PS 批量创建,例如我针对开发分支分别创建了三个模版，分别对应windows，Andriod，iOS。这样当创建一条分支之后，就会创建三个任务，并与此分支关联10 这里我们选择全部仓库，全部版本，并选择分支类型为开发分支以及bugfix分支。11 创建方式我们选择已有CI模板配置。 此选项会从ci平台拉取任务模板，从而根据此模板来创建任务并关联 enterimagedescriptionhere 12 恭喜你，到这里所有的配置就搞定了，下面我们就开始日常开发吧。 2.本地拉分支1 执行如下git命令 pythongitbranchte branchgitcheckoutte branchgitpushoriginte branch te branch 2 成功后我们会受到如下通知 enterimagedescriptionhere enterimagedescriptionhere 3 我们的分支命名不规范，因此被冻结了。这种情况只能重新拉取分支了。因为冻结的分支后续发起MR也是会被block的。4 接着我们拉一个命名规范的分支试一下 pythongitbranchdev testgitcheckoutdev testgitpushorigindev test dev test 5 这时我们又收到了冻结的消息，看看这次是为什么呢。 enterimagedescriptionhere enterimagedescriptionhere 其实是没有绑定需求。 是否需要绑定需求是可以配置的，在我们上面提到的分支规则中的具体分支类型中可配置 enterimagedescriptionhere enterimagedescriptionhere 我们可以点击消息链接跳转分支详情 enterimagedescriptionhere 如果没找到消息，也可以通过异常分支列表来定位 enterimagedescriptionhere 我们点击关联需求 enterimagedescriptionhere 关联完成后，分支状态转为活跃，解除冻结状态。 enterimagedescriptionhere 同时创建出来ci任务 enterimagedescriptionhere 6 其实可以在拉分支的时候就来绑定需求，例如 pythongitbranchdev storygitcheckoutdev storygitadd gitcommit m story 857538881 gitpushorigindev story dev story 7 然后会将需求以及ci任务都会关联好。 enterimagedescriptionhere enterimagedescriptionhere 3.往主干提MR1 这里强调一下，当一个已经冻结的分支往主干发起MR会被block。例如我们有一个分支未绑定需求而被冻结。 enterimagedescriptionhere 2 这时我们发起到master的MR会被block enterimagedescriptionhere 3 我们此时去绑定一下需求 enterimagedescriptionhere enterimagedescriptionhere 4 看到刚才的MR已经被解除 enterimagedescriptionhere 5 另外如果分支合入规则不匹配也会被block，规则可在分支规则中查看和配置 enterimagedescriptionhere ","categorie":"研发规范-1.1 快速入门"},{"route":"/docs/artifacts/APIs.html","content":" 接口文档 hr 一 制品库管理 获取制品库列表1.基本信息 接口名称 获取制品库列表请求接口 http devnet.coding artifacts.oa.com rest api repositories请求方式 GET 请求参数 project name “项目name”, page 1, pageSize 10, 默认10 3.请求返回 成功则返回code 0，成功创建，返回内容如下 code 0, message null, data id 32, artifactType 4 , name dad , avatar null, size null, description , creator , release strategy 1, created at 2020 06 0314 33 04 , updated at 2020 06 0314 33 04 , modifier , status 0, project id null, project name xxxxx 参数解释 id动态主键artifactType 类型，1 generic 2 docker 3 maven 4 npm 5 pypi 6 helm 7 composer 8 nuget name 仓库名称project id 项目IDproject name 项目名称status 状态，0 正常1 隐藏2 删除avatar 制品库头像size 制品库大小，float类型description 描述creator 创建者release strategy 版本发布策略,1 允许覆盖 2 不允许 3 快照 created at 创建时间updated at 更新时间modifier 更新者 失败则返回code不为0，异常，返回内容如下 code 404, detail 错误信息 hr 新增制品库1.基本信息 接口名称 新增制品库请求接口 http devnet.coding artifacts.oa.com rest api repositories请求方式 POST 请求参数 type 1, name 测试仓库2 , description 描述23 , release strategy 1, project name test 3.请求返回 成功则返回code 0，成功创建，返回内容如下 code 0, message null, data null 参数解释 type 类型，1 generic 2 docker 3 maven 4 npm 5 pypi 6 helm 7 composer 8 nuget name 仓库名称project name 项目名称description 描述release strategy 版本发布策略,1 允许覆盖 2 不允许 3 快照 失败则返回code不为0，异常，返回内容如下 code 404, detail 错误信息 hr 更新制品库1.基本信息 接口名称 更新制品库请求接口 http devnet.coding artifacts.oa.com rest api repositories请求方式 PUT 请求参数 type 1, name 测试仓库2 , description 描述23 , release strategy 1, project name test 3.请求返回 成功则返回code 0，成功创建，返回内容如下 code 0, message null, data null 参数解释 type 类型，1 generic 2 docker 3 maven 4 npm 5 pypi 6 helm 7 composer 8 nuget name 仓库名称project name 项目名称description 描述release strategy 版本发布策略,1 允许覆盖 2 不允许 3 快照 失败则返回code不为0，异常，返回内容如下 code 404, detail 错误信息 hr 二 制品包管理 获取制品库列表1.基本信息 接口名称 获取制品库列表请求接口 http devnet.coding artifacts.oa.com rest api repositories id packages请求方式 GET 请求参数 page 1, pageSize 10, 默认10 3.请求返回 成功则返回code 0，成功创建，返回内容如下 code 0, message null, data page 1, pageSize 10, totalRow 1, totalPage 1, list id 5, name aaaa , releaseStrategy 1 , modifier xxx , description null, creator xxx , createdAt 2020 05 2716 44 58 , updatedAt 2020 05 2716 44 58 , versionCount 2, latestVersionName latest 参数解释 id动态主键name 包名称status 状态，0 正常1 隐藏2 删除avatar 制品库头像description 描述creator 创建者releaseStrategy 版本发布策略,1 允许覆盖 2 不允许 3 快照 createdAt 创建时间updatedAt 更新时间modifier 更新者versionCount 版本数量latestVersionName 最后上传版本号 失败则返回code不为0，异常，返回内容如下 code 404, detail 错误信息 hr 新增制品包1.基本信息 接口名称 新增制品包请求接口 http devnet.coding artifacts.oa.com rest api repositories id packages请求方式 POST 请求参数 name 测试包 , description 描述23 , release strategy 1, repository id 1 3.请求返回 成功则返回code 0，成功创建，返回内容如下 code 0, message null, data null 参数解释 name 仓库名称repository id 仓库iddescription 描述release strategy 版本发布策略,1 允许覆盖 2 不允许 3 快照 失败则返回code不为0，异常，返回内容如下 code 404, detail 错误信息 hr 更新制品包1.基本信息 接口名称 更新制品包请求接口 http devnet.coding artifacts.oa.com rest api repositories id packages请求方式 PUT 请求参数 id 1, name 测试仓库2 , description 描述23 , release strategy 1, 3.请求返回 成功则返回code 0，成功创建，返回内容如下 code 0, message null, data null 参数解释 id 制品包IDname 仓库名称repository id 仓库iddescription 描述release strategy 版本发布策略,1 允许覆盖 2 不允许 3 快照 失败则返回code不为0，异常，返回内容如下 code 404, detail 错误信息 hr 三 版本管理 获取版本列表1.基本信息 接口名称 获取版本列表请求接口 http devnet.coding artifacts.oa.com rest api repositories id packages id versions请求方式 GET 请求参数 page 1, pageSize 10, 默认10 3.请求返回 成功则返回code 0，成功创建，返回内容如下 code 0, message null, data page 1, pageSize 10, totalRow 2, totalPage 1, list id 12, package url http mirrors.artifactory.oa.com 80 mirrors test coding zzzzz latest , version latest , hash dfb33614b279d52bb74ff0df70b8591cc3650826 , size 5020.0, downloadCount 0 , uploader xxx , description null, releaseStatus 1 , createdAt 2020 05 2716 44 58 , updatedAt 2020 05 2716 44 58 参数解释 id 动态主键package url 制品包下载链接version 具体版本值hash 版本hash值size 版本大小，单位KBdownloadCount 下载数量releaseStatus 发布状态,1 已发布 2 未发布 createdAt 创建时间updatedAt 更新时间uploader 上传者 失败则返回code不为0，异常，返回内容如下 code 404, detail 错误信息 hr 新增版本1.基本信息 接口名称 新增制品版本请求接口 http devnet.coding artifacts.oa.com rest api repositories id packages id versions请求方式 POST 请求参数 version latest , package url http mirrors.artifactory.oa.com 80 mirrors test coding zzzzz latest , hash dfb33614b279d52bb74ff0df70b8591cc3650826 , size 5020.0, description 描述23 , release status 1, package id 1 3.请求返回 成功则返回code 0，成功创建，返回内容如下 code 0, message null, data null 参数解释 id 版本IDpackage url 制品包下载链接version 具体版本值hash 版本hash值size 版本大小，单位KBrelease status 发布状态,1 已发布 2 未发布 失败则返回code不为0，异常，返回内容如下 code 404, detail 错误信息 hr 更新版本1.基本信息 接口名称 更新版本请求接口 http devnet.coding artifacts.oa.com rest api repositories id packages id versions请求方式 PUT 请求参数 id 1 version latest , package url http mirrors.artifactory.oa.com 80 mirrors test coding zzzzz latest , hash dfb33614b279d52bb74ff0df70b8591cc3650826 , size 5020.0, description 描述23 , release status 1, 3.请求返回 成功则返回code 0，成功创建，返回内容如下 code 0, message null, data null 参数解释 id 版本IDpackage url 制品包下载链接version 具体版本值hash 版本hash值size 版本大小，单位KBrelease status 发布状态,1 已发布 2 未发布 hr ","categorie":"制品库-制品库接口文档"},{"route":"/docs/artifacts/README.html","content":" 目录 简介 快速开始 Docker制品库 Generic制品库 Maven制品库 PyPi制品库 制品库认证 常见问题 制品库接口文档 Releasenotes ","categorie":"制品库-目录"},{"route":"/docs/artifacts/authentication.html","content":" 制品库认证 功能介绍当用户访问制品库时，制品库会对用户提供的凭证进行鉴权，以确保用户对制品库拥有操作权限。Coding制品库真实存储托管地址为 腾讯软件源 ，所以需要用户打开腾讯软件源地址进行设置。制品库支持多种鉴权方式 个人访问令牌 公共账号每种制品库在本地配置凭证的命令会有区别，但逻辑相似，并且在腾讯软件源文档库都有设置凭证的指引. Maven配置指引 Docker配置指引 Generic配置指引 PyPi配置指引 本文以PyPi制品库为例，演示用户配置鉴权凭证的三种方式。 获取令牌内部PyPI服务网页功能入口为https mirrors.tencent.com private pypi，在网页上可以浏览 创建和管理你的项目。 项目列表点击左侧菜单栏 常用 项目列表 ，即可进入所有内部项目的列表。 auth 01 浏览 查找项目在项目列表上方的根据项目名称和项目简介查找项目。查询条件为模糊匹配。 获取访问token在包上传和下载过程中用到的用户名和密码可以点击界面右上方 获取访问token 按钮查看。 auth 02 此界面中显示的用户名密码信息为当前登录用户的，如果需要供多人使用的账号，可以在界面右上角 我的权限 功能中，创建公共账号。 权限配置 权限配置 tab供项目管理员调整项目对账号的授权。 auth 03 安装 拉取制品包 pipinstall project name index url https user token mirrors.tencent.com repository pypi tencent pypi simple 复制刚刚获取的用户名密码替换以上命令，在pip环境可以进行安装 拉取制品包操作。","categorie":"制品库-制品库认证"},{"route":"/docs/artifacts/introduction.html","content":" 简介 什么是制品软件制品是指由源码编译打包生成的二进制文件，不同的开发语言对应着不同格式的二进制文件，这些二进制通常可以直接运行在服务器上。 什么是制品库制品库用以管理源代码编译后的构建产物，支持Docker Maven Helm npm PyPI包等常见制品库类型。制品库可以跟源代码协同进行版本化控制，可以与本地各构建工具和云上的持续集成 持续部署无缝结合，并支持漏洞扫描等特性，是一种企业处理软件开发过程中产生的所有包类型的标准化方式。 artifacts CODING制品库目前支持的制品类型详细如下 GenericFile指的是通用文件类型的制品 Docker 了解什么是Docker Maven 了解什么是Maven PyPI 了解什么是PyPI 制品库层级关系说明为了更快地掌握制品库的使用方式，首先需要了解下制品库的层级关系。制品库的层级关系为 仓库 包 版本，每个层级描述如下 仓库 用于管理不同类型的仓库和仓库下的包资源，可以设置仓库对外的访问权限。 包 构建产物对外提供访问的基础单元，用于介绍当前构建产物的用途和使用指引。 版本 列出某个包下的所有构建产物，详细记录了每次构建产物的版本迭代更新变化。制品库的层级关系如图所示 artifacts ","categorie":"制品库-简介"},{"route":"/docs/artifacts/release.html","content":" What snewinArtifacts comingsoon 项目管理员可以修改项目下的资源 Release2020 06 10Feature 1.0上线Changed 制品库功能","categorie":"制品库-Release notes"},{"route":"/docs/artifacts/unfinished.html","content":" 文档建设中","categorie":"制品库-常见问题"},{"route":"/docs/cd/GLOSSARY.html","content":" 名词解释 APP应用，用于管理制品和集群的命名空间，一个项目下可以有多个应用。注意 流程编排时，一个Node只能绑定一个APP，也就是说当前发布节点只能发绑定应用中的制品和集群。 Artifact制品，例如代码库 PKG包 CC配置文件 SQL K8SYAML等。每个制品都必须归属于一个应用，一个应用内不允许注册相同的制品。 Cluster集群，例如CMDB Tkex工作负载 手动输入IP DB实例都可以作为集群。每个集群都必须归属于一个应用，一个应用内不允许注册相同的制品。特殊的是 1.在按“节点编排”的流程中，必须选择要发布的集群2.在按“标签编排”的流程中，无须选择要发布的集群，而是在创建发布单时使用标签自动匹配 LB负载均衡器，例如CLB TGW CMLB。在部署的过程中，平台将会自动完成发布前踢出LB，发布结束回加LB的操作。 Channel发布通道，提供发布的能力，例如ARS PKG发布 CC发布，用于将支持制品发布到对应集群上。 Strategy发布策略，例如灰度 滚动策略。 Flow流程，平台使用QFlow作为流程引擎，同时根据业务特点，划分为两个类型 1.审批流程2.发布流程在发布单创建后，平台将根据选择的发布流程创建对应的审批任务 若配置 和发布任务。特殊的是 1.每个发布单最多启动一个审批任务。2.按“节点编排”的流程，只会启动一个发布任务。3.按“标签编排”的流程，会根据创建发布单时选择的标签，创建标签个数一致的发布任务，例如选择地域作为标签，那么一个地域将会有一个发布任务。 ApprovalFlow审批流程，为审批任务提供模板，提供了多种类型的审批人选择 1.OA角色审批，如组长审批 总监审批2.项目角色审批，如运维审批 测试审批3.自定义审批人同时在流程内设置分支条件节点，可根据执行环境变量，执行不同的支路。 ReleaseFlow发布流程，为审批任务提供模板，提供了多种类型的发布通道工具，用于快速配置。目前已支持以下发布通道 PKG CC ARS STKE TKEx TKE Release发布单，记录了发布过程的所有数据，包含 最多一个审批任务 若干个发布任务 如选择按“节点编排”流程，那么只会有一个发布任务 若选择“标签编排”流程，会有和新建发布单时选择的标签同数量的发布任务 ApprovalTask审批任务，在创建发布单时，平台会根据发布流程配置的条件，查找审批流程，若存在符合条件的审批流程，则以该流程创建对应的审批任务。 ReleaseTask发布任务，主要节点是发布节点，用于将Artifact部署到Cluster。 Node发布节点，在发布流程中节点则对应一个Node，包含以下关键信息 1.Channel 通道2.Artifact 制品3.Cluster 集群4.Strategy 策略 Stage发布批次，归属于一个发布节点，每个批次顺序执行。根据配置的策略拆分批次，例如使用灰度策略 30 ，60 ，100 。在批次中，会对集群拆解为具体的实例，每个批次中，记录的不再是集群，而是本集群中待发布的实例。 Round发布轮次，归属于一个发布批次。根据配置的“并发控制”策略，拆分多个轮次。例如 批次共有100个实例，若发布控制配置为 每次发布间隔时间5s，每次发布实例上限10个，那么将拆分100 10 10个轮次，每个轮次顺序执行，间隔5s。","categorie":"持续部署-名词解释"},{"route":"/docs/cd/README.html","content":" 简介 1.概述Coding CD是一个持续部署平台，作为DEVOPS中最后一个环节，负责将CI构建出的产物Artifact，根据自定义的Flow，发送到对应Cluster上，对线网服务进行更新。 2.亮点 2.1支持多样的场景平台致力于覆盖腾讯云所有的部署场景，目前部署能力持续扩充中，进度如下图所示 部署通道 支持制品类型 支持集群类型 状态 PKG PKG CMDB 填写IP 已上线 CC CC CMDB 填写IP 已上线 ARS 工蜂 CMDB 填写IP 已上线 SCF Coding制品库 Genericfile SCF云函数 已上线 STKE Image STKE工作负载 已上线 TKE Coding制品库 Genericfile TKE运营业务 已上线 腾讯云CVM Coding制品库 Genericfile 腾讯云CVM 已上线 DMC SQL Coding制品库 DMC DMC登记DB实例 开发中 TKEx Coding制品库 Genericfile TKEx工作负载 开发中 2.2灵活的流程编排能力平台使用QFlow工具提供灵活的Flow编排能力。1.内置了审批节点，支持多种类型的审批，OA角色审批 如总监审批 项目角色审批 如运维审批 自定义审批人等。2.内置了多种发布工具，对应2.1中的发布通道。3.流程支持串并行编排4.内置了QA预定的审批流程5.支持启动自定义工具，例如启动流水线任务。 2.3安心的部署部署过程自动化，且可见 可控。1.部署全过程视图 用户既可以看到整体的发布进度，还可以观察到每个实例的部署日志。2.可控的发布 平台提供了“开始前确认” “失败重试”，“失败跳过”，“回退”，“终止”等多种功能。3.多种通知渠道 用户可配置企业微信 微信 短信 及时通知用户发布结果和过程中需要人工确认的事宜。4.在部署过程中，动态摘除TGW L5 CMLB等多种LB，更大限度保护现网发布过程中稳定。5.支持自定义部署策略，例如灰度 滚动。 2.4支持腾讯云的多地域发布平台提供了标签能力，且内置了腾讯云地域标签组，方便管理带地域属性的Artifact和Cluster，以此实现腾讯云多地域发布。 多地域发布示例 2.5批量导入提供了批量导入能力，实现快速将CMDB PKG CC数据导入平台。 3.接入平台接入请参考 快速开始 用户手册业务咨询请 企业微信 联系 Coding技术支持 欢迎分享实践经验，共建CD文档 https git.code.oa.com coding oa coding cd docs","categorie":"持续部署-项目简介"},{"route":"/docs/ci/APIs.html","content":" 接口文档 hr 一 创建任务接口1.基本信息 接口名称 CODING CI创建任务接口请求接口 http api.dq.oa.com qci rest api pipeline请求方式 POST 2.请求参数 headers Content Type application jsonX DQAPI Authentication 填入授权的api网关token，api网关负责人 xianyunlan 蓝贤赟 ，因权限管理需要，请使用个人token申请X DQAPI USERNAME 对应的用户名 不带中文和分号 api网关申请token body json格式 name 字符串，必填，任务名称admin 字符串，必填，管理员，用户名 不带中文 ，多个人名请用英文分号分隔，形如 jerry1 jerry2 ，需要以英文分号结尾members 字符串，必填，成员，用户名 不带中文 ，多个人名请用英文分号分隔，没有则传 code source 字符串，必填，代码库路径，Git项目后缀需要填入“.git”，如 “http xxx xxxx xxxxxx qci.git”，Git项目不需要在路径上填上分支,Git项目路径支持http的方式，暂不支持ssh链接 SVN项目则需要在路径上带上分支，SVN的填入如 “http sh svn.tencent.com ba ba eqqsvr64 rep tx plus proj trunk”code branch 必填，list，SVN项目可以传入 ，Git项目则必填，填入形式为 master , feature1 yaml location 字符串，必填，yaml文件的存放相对路径，如根目录下则为“qcifile.yml”trigger type 字符串，必填，任务的触发方式，一般至少包含 TRIGGER MANUAL 手动触发，多种触发方式按竖线 分隔，如选择手动触发和代码提交触发 TRIGGER MANUAL TRIGGER CI ，现在支持输入的触发方式有 TRIGGER MANUAL , 手动启动 , TRIGGER TAG , 打tag触发 , TRIGGER CI , 代码提交触发 , TRIGGER MR , 合并请求触发 ,注意 使用合并请求触发或者打tag触发方式触发任务，在Git上必须有master或owner的权限trigger content list，必填，list里面可包含多个分支的定时任务，不需要定时可传入 ，需要配置定时任务可以填入示例 branch master , week 1,7 , hour 0,23 , branch develop , week 1,7 , hour 0,23 ，其中list下每一项包含 branch 字符串，必填，字符串，所属分支，SVN填 即可，Git每次填入一个分支week 整型数组，必填，可多选，如果选择定时启动则week为必填，1 星期一，7 星期天，填入如 1,2,7 hour 整型数组，必填，可多选，如果选择定时启动则hour为必填，0 23，填入如 0,7,23 code source type 字符串，必填，SVN项目请填入“svn”，Git项目请填入“git”desc 字符串，选填，关于该任务的描述user env dict，选填，用户自定义的环境变量，同名环境变量可以覆盖qcifile里面设置的环境变量，为空则填入 ，如果要增加未加密的环境变量，则可以添加 key value ，如果要增加加密的环境变量，请先通过CODING CI加密服务对明文进行加密得到密值后，填入 key secret sercert value auth type 整型，必填，认证类型，1 用户名 密码，2 oauth认证 Git可用 ，3 ssh SVN可用 ，4 ssh 私有token Git可用 SVN项目可以填入1或者3，Git项目可以填入2或者4。如果选择2 oauth认证，需要先在CODING CI平台对该项目进行授权，相关授权链接请见附录。如果选择1 3 4其中的认证方式，则需要先在CODING CI平台的凭证管理中添加凭证，然后在credential id字段填入凭据idcredential id 整型，选填，用户选择1 3 4的认证方式时，需要填入该字段，可以在CODING CI的凭证管理页面获取该idis block mr 整型，选填，合并请求触发时是否阻塞用户的blockMR，0 false，1 trueis local mr 整型，选填，填入1，CODING CI会在编译机上的工作空间进行模拟合入，不会提交和影响线上代码的合入，模拟合入成功，则会以合入后的代码继续执行任务的后续步骤，0 false，1 truemaximum builds 整型 0 5 ，选填，允许任务的并发数，配置后，任务可以同时运行多次构建，并发数代表任务可以同时运行的构建数，可以根据编译机的并发能力设置合理的并发数certificate id 整型，选填，任务关联的证书id，证书id可以在CODING CI平台上的证书管理处获取yaml source type 整型，选填，默认为0 代码库类型，任务从配置的代码库中获取qcifile，可以填入1 UI编辑类型任务，任务从数据库中获取qcifile的内容，填入1后需要再传入字段pipeline json，传入任务的qcifile的json格式内容pipeline json json格式内容，选填，当yaml source type 1时，需要填入任务的qcifile的json格式内容，用于任务执行project id 整型，选填，默认为0 未归属项目，使用项目下的资源时必需填入任务所归属的项目id，否则无法使用项目下的资源 如认证 证书等资源 任务创建后，会默认任务运行成功或者失败时，都邮件通知任务管理员和成员，如果需要额外指定通知，可以调用后面的通知创建接口相关链接 1.CODING CI的Oauth2认证 CODING CI的Oauth2认证 2.CODING CI的凭证管理 CODING CI的凭证管理 请求示例 params dict name qci apiclient test 20181012001 , admin xxxxx , members , auth type 2, repo username , repo password , code source http xxxxx.com xxxxxxxx MyTestProject.git , code branch master , feature1 , yaml location qcifile.yml , trigger type TRIGGER MANUAL TRIGGER CI , trigger content branch master , week 1,7 , hour 0,23 , branch master , week 1,7 , hour 0,23 , code source type git , desc 测试api client , user env key1 secret lB1dohFKFF....... , key2 value2 params json.dumps params dict 3.请求返回 成功则返回状态码 201，成功创建，返回内容如下 name 之前填入的任务名称 desc 任务描述 code source 代码库路径 yaml location qcifile相对路径 code source type 代码库类型 id 创建任务的ID admin 任务管理员 code branch 任务分支 失败则返回状态码 417，异常，返回内容如下 detail 错误信息 4.常见错误 qcifile获取失败 请检查代码库路径 qcifile位置 以及分支的配置信息，如果这里的信息都确认无误，还需要再检查认证信息，如果auth type 1，需要检查用户名和密码，密码需要在CODING CI平台上 加密 如果auth type 2，则需要检查是否已经在QCI平台上 授权 ，授权对应的用户与 api网关的token 对应的用户是否一致，如果这些都检查无误，请联系QCI管理员 hr 二 更改任务配置接口1.基本信息 接口名称 CODING CI更改任务配置接口请求接口 http api.dq.oa.com qci rest api pipeline pipeline id pipeline id 需要更改配置的任务的ID请求方式 PATCH 2.请求参数 headers Content Type application jsonX DQAPI Authentication 填入授权的api网关token，api网关负责人 xianyunlan 蓝贤赟 ，因权限管理需要，请使用个人token申请X DQAPI USERNAME 对应的用户名 不带中文和分号 X COMMON PROJECT ID 对应的项目id api网关申请token body json格式，参数类似创建接口，可只传需要修改的参数及修改后的值，不传的参数则不修改请求示例 params dict name qci change 20181012001 , admin xxxxx1 xxxxx2 , members xxxxx3 , params json.dumps params dict 注意 如需更改UI类型的任务的qcifile内容，可以传入pipeline json字段，传入值为更新后的pipeline json的内容，格式为json格式，新传入的pipeline json会覆盖数据库中存储的pipeline json内容 如需切换任务类型 UI类型 代码库类型 ，建议在CODING CI界面上操作3.请求返回 成功则返回状态码 200 失败则返回状态码 417，可从detail中获取错误信息 三 禁用任务接口1.基本信息 接口名称 CODING CI禁用任务接口 禁用任务后，仅可使用手动触发来执行任务，其他触发方式不会再触发执行 请求接口 http api.dq.oa.com qci rest api pipeline pipeline id disablepipeline id 需要禁用的任务的ID请求方式 POST 2.请求参数 headers Content Type application jsonX DQAPI Authentication api网关申请的token X DQAPI USERNAME 对应的用户名 不带中文 3.请求返回 成功则返回状态码 200，成功禁用，没有body 失败则返回状态码 400，失败，返回内容如下 detail 错误信息 hr 四 删除任务接口1.基本信息 接口名称 CODING CI删除任务接口 删除任务属于高危操作，请知晓删除后的结果再删除 删除操作是一个不可回撤的操作 删除任务后，任务配置以及在平台上的执行历史等信息均会被清除，请谨慎操作 请求接口 http api.dq.oa.com qci rest api pipeline pipeline id deletepipeline id 需要删除的任务的ID请求方式 POST 2.请求参数 headers Content Type application jsonX DQAPI Authentication api网关申请的token X DQAPI USERNAME 对应的用户名 不带中文 3.请求返回 成功则返回状态码 200，成功删除，没有body 失败则返回状态码 400，失败，返回内容如下 detail 错误信息 hr 五 启动任务接口1.基本信息 接口名称 CODING CI启动任务接口 手动触发一次执行 请求接口 http api.dq.oa.com qci rest api pipeline pipeline id startpipeline id 需要启动的任务的ID请求方式 POST 2.请求参数 headers Content Type application jsonX DQAPI Authentication api网关申请的token X DQAPI USERNAME 对应的用户名 不带中文 请求示例1 选择分支触发一次任务 params dict trigger base branch , cur branch master , cur env params test value test 20181008 params json.dumps params dict 请求示例2 选择标签触发一次任务 params dict trigger base tag , cur tag V3.1.3 , cur env params test value1 test 2090409 , test value2 secret N3dhHMPONX6SmQioRoqmvRED0PiRc8xxnxF...... params json.dumps params dict 请求示例3 选择版本号触发一次任务 params dict trigger base revision , cur revision 123456 , cur branch master , cur env params test value test 20181008 params json.dumps params dict 3.请求返回 成功则返回状态码 200，成功启动 pipeline result id 1810, 任务执行的id detail , ret true 任务执行成功 失败则返回状态码 400 或者417 ，失败，返回内容如下 detail 错误信息 启动任务，采用请求的方式并不方便应对需要处理启动时返回的内容的场景，例如 主流水线中需要启动子流水线的场景。这种场景可以考虑使用CODING CI提供的启动子流水线的插件，启动后可以等待子pipeline执行完毕，任务启动成功后，可以通过BUILD ID SUBPIPELINE环境变量获取到子pipeline的QCI BUILD ID环境变量值详情可以参考 CODING CI 启动流水线插件 hr 六 获取任务执行结果的接口1.基本信息 接口名称 CODING CI获取一次执行的结果接口请求接口 http api.dq.oa.com qci rest api pipeline pipeline id totalresult pipeline result id pipeline id 需要获取结果的任务IDpipeline result id 需要获取任务的执行的id，对应QCI的环境变量QCI BUILD ID，将 pipeline result id 替换成lastrun则可获取最新一次处于执行中或者执行完成的执行结果，即 http api.dq.oa.com qci rest api pipeline pipeline id totalresult lastrun请求方式 Get 2.请求参数 headers Content Type application jsonX DQAPI Authentication api网关申请的token X DQAPI USERNAME 对应的用户名 不带中文 3.请求返回 成功则返回状态码 200，获取成功 id 1810, 执行id pipeline id 307, 任务id starter xxxxxxxx , 启动人 start time null, 启动时间 finish time null, 任务结束时间 cur branch master , 当前执行的分支 cur revision 6c88db49 , 当前执行的版本号 status 0, 当前执行的状态 run num 2, 是该任务的第几次执行 code source http xxxx.com xxx xxx.git , 任务的代码库路径 trigger type TRIGGER MANUAL , 当次执行的触发方式 restart from null, 当次执行时哪一次执行的重测 restart from run num null, 重测于第几次执行 pipeline file version 2.0 n n nstages n stage environment n... 当前版本号对应的qcifile的yml文件内容 stages 列表，任务的stage的结果，多个stage串行执行 id 445, stage的结果的id stage num 1, stage的执行顺序，1 2 3... status 0, details info 等待执行 , stage执行的详情 starter xxx , stage的启动人 start time null, finish time null, name environment , stage名称 tasks 列表，stage下的task的执行结果 id 1483, task的结果id name environment , task名称 status 0, task的执行状态 start time null, starter xxxx , task的启动人 details info 等待执行 , task的执行详情 finish time null, task num 1, task是stage的第几个task，同一stage下的task并行执行 tool output title null, task执行报告的title tool output url null, task执行报告的链接 tool output template null task执行报告的内容 , id 446, stage num 2, status 0, details info 等待执行 , starter xxx , start time null, finish time null, name build , pipeline result 1810, tasks id 1484, name build , status 0, start time null, starter xxx , details info 等待执行 , finish time null, task num 1, tool output title null, tool output url null, tool output template null 其中，任务的触发方式对应有 TRIGGER MANUAL 手动启动, TRIGGER TAG 打tag触发, TRIGGER CI 代码提交触发, TRIGGER MR 合并请求触发, 任务执行的状态码 0, 未执行 ,1, 执行中 ,2, 成功 ,3, 失败 ,4, 中止 ,5, 下发中 ,6, 超时 ,7, 中止中 ,8, 命令异常 ,9, 异常 , 失败则返回状态码 400 或者417 ，失败，返回内容如下 detail 错误信息 4.CODING CI获取任务执行历史的接口 接口名称 CODING CI获取任务执行历史的接口请求接口 http api.dq.oa.com qci rest api pipeline pipeline id totalresultpipeline id 需要获取结果的任务ID请求方式 Get支持参数 page 1 page size 10 ordering id status 2 即返回前10个成功执行的结果，第一个即为最新一次成功执行的结果 筛选条件支持 pythonstatus 2,3,4 筛选结果状态在2，3，4中的结果start time 0 2020 04 14 2017 56 13 start time 1 2020 04 14 2017 56 14 筛选启动时间处于start time 0 start time start time 1的结果，finish time使用方式类似cur branch test , test2 筛选执行分支为test或者test2的结果，trigger type starter sourch branch和target branch使用方式类似 返回内容类似 count 1154, next http qci.oa.com rest api pipeline 1 totalresult...... , previous null, results id 179433, pipeline id 1, starter jerryqzhang , start time 2019 05 1615 00 30 , finish time 2019 05 1615 10 48 ,...... 一次执行的完整结果，与上面类似 , hr 七 审批任务接口1.基本信息 接口名称 CODING CI审批任务接口 peompt任务 请求接口 http api.dq.oa.com qci rest api taskresult task result id pk prompttask result id pk 需要审批的任务的审批task的id请求方式 POST 2.请求参数 headers Content Type application jsonX DQAPI Authentication api网关申请的token X DQAPI USERNAME 对应的用户名 不带中文 请求示例 params dict desc test prompt 20181226 , result 2, params json.dumps params dict desc 字符串，可以为空，审批描述信息 result 整型，必录，2 通过，QCI任务继续执行，3 终止，QCI任务结束3.请求返回 201，通过操作完成 ret true, detail 审批完成 , prompt result id 106, desc test prompt 20181226 , result 2 201，终止操作完成 ret true, detail 审批完成 , prompt result id 107, desc 123 , result 3 失败则返回状态码 417，返回内容如下 detail 错误信息 八 下载artifacts文件的接口如果脚本中需要获取artifacts的下载链接，可以使用如下方式拼接 http api.dq.oa.com qci rest api totalresult QCI BUILD ID artifacts FILENAME 请求头部需要带上参数 X DQAPI Authentication YOUR TOKEN, X DQAPI USERNAME YOUR NAME YOUR TOKEN可以在api网关个人管理页面获取到 api网关申请token 参数解释 QCI BUILD ID CODING CI平台环境变量，当前集成ID，shell命令中通过 QCI BUILD ID方式获取，py脚本可以通过os.getenv QCI BUILD ID ,None 的方式获取，也可以通过启动接口返回的pipeline result id字段获取 FILENAME 用户在qcifile中配置的artifacts文件，用于下载指定的单个文件，可以带上相对路径，不需要填上相对路径的第一条斜杠。如果用户的编译环境是windows环境，则在拼接下载链接的时候，需要将windows的分隔符转换为linux系统的分隔符，例如windows下上传的artifacts填写为 test myFile.apk ,则拼接文件时需要使用的链接是 http api.dq.oa.com qci rest api totalresult QCI BUILD ID artifacts test myFile.apk 九 任务的通知创建接口任务创建后，会默认任务运行成功或者失败时，都邮件通知任务管理员和成员，如果需要额外指定通知，可以调用通知创建接口1.基本信息 接口名称 任务的通知创建接口，每次创建会覆盖之前的配置请求接口 http api.dq.oa.com qci rest api pipeline jobId notify bulkprocessjobId 任务的配置id请求方式 POST 2.请求参数 headers Content Type application jsonX DQAPI Authentication api网关申请的token X DQAPI USERNAME 对应的用户名 不带中文 请求示例 params dict notice name 通知 , 单条通知记录不要修改 index 1, 单条通知记录不要修改 channel SMS ENWECHAT EMAIL WECHAT ENWECHAT GROUP , 通知的渠道 group QCI JOB ADMIN QCI JOB MEMBER QCI TRIGGER QCI JOB NOTIFY USER , 通知的成员 enwechat group , 填入微信群号 user , 指定用户通知 template , 通知内容 on success always , 成功时的通知条件 on failure always 失败时的通知条件 params json.dumps params dict name 该条通知的名称 index 整型，该任务的第一条通知配置为1，可以支持配置多条通知记录，第二条为2 channel 通知渠道，多个渠道用分号分隔 SMS 短信 ENWECHAT 企业微信 EMAIL 邮件 WECHAT 微信 ENWECHAT GROUP 企业微信群，群号通过后面的enwechat group填入 group 通知的组，目前支持QCI内置的组，QCI JOB ADMIN 该任务管理员 QCI JOB MEMBER 该任务成员 QCI TRIGGER 该任务当次执行的启动人 QCI JOB NOTIFY USER 指定额外的人，通过后面的user字段指定 enwechat group 企业微信群号，填入“ww”开头的企业微信群号 user 指定的额外的通知用户，多个用户用英文分号分隔 template 通知的内容 on success 成功时的通知条件配置，支持填入always 总是通知，change 结果变化时通知，never 不通知 on failure 失败时的通知条件配置，支持填入always 总是通知，change 结果变化时通知，never 不通知 支持一次创建多条通知记录，可以组合不同的条件不同的通知渠道和通知对象，传入方式如下 params dict notice name 通知 , 单条通知记录不要修改 index 1, 单条通知记录不要修改 channel SMS ENWECHAT EMAIL WECHAT ENWECHAT GROUP , 通知的渠道 group QCI JOB ADMIN QCI JOB MEMBER QCI TRIGGER QCI JOB NOTIFY USER , 通知的成员 enwechat group , 填入微信群号 user , 指定用户通知 template , 通知内容 on success always , 成功时的通知条件 on failure always 失败时的通知条件 , name 通知2 , index 2, channel SMS ENWECHAT EMAIL WECHAT ENWECHAT GROUP , group QCI JOB ADMIN QCI JOB MEMBER QCI TRIGGER QCI JOB NOTIFY USER , enwechat group , user , template , on success always , 成功时的通知条件 on failure always 失败时的通知条件 params json.dumps params dict 3.请求返回 200，创建成功 count 创建的通知条数, results 通知的详细配置 400，创建失败 附录1.CODING CI加密服务 QCI加密服务 2.api网关的token申请 api网关的token申请 ，api网关负责人 xianyunlan 蓝贤赟 ，因权限管理需要，请使用个人token申请3.CODING CI的Oauth2认证 CODING CI的Oauth2认证 4.CODING CI的凭证管理 CODING CI的凭证管理 ","categorie":"持续集成-CODING-CI接口文档"},{"route":"/docs/ci/FAQ.html","content":" 常见问题 Q 执行cmd时提示Permissiondenied A 常见提示Permissiondenied的场景如下 场景一 cmd对应的文件没有执行权限 日志提示示例 . test.sh bin sh . test.sh Permissiondeniedcmdreturncode 126 原因 CODING CI执行构建时，默认使用qci用户启动，该cmd文件在qci用户下没有执行权限 解决方案 若代码源为git gitadd chmod xpath to file，然后提交即可 若代码源为svn linux下 svnpropsetsvn executableonpath to filesvncommit m commit备注 windows下 右键 propeties new executable，然后提交即可 场景二 cmd操作的目标文件 文件夹没有读写权限 日志提示示例 python2. test.pyTraceback mostrecentcalllast File usr lib64 python2.6 shutil.py ,line51,incopyfilewithopen dst, wb asfdst IOError Errno13 Permissiondenied data test.py 原因 qci用户对目标文件 目录没有读写权限 解决方案 给目录文件 目录授权 hr Q 执行shell脚本时，脚本存在，但执行提示 bin sh M badinterpreter Nosuchfileordirectory A 不同系统编码格式导致的问题，需将源文件文档格式转为unix格式 hr Q 执行cmd命令时，提示命令不存在，但手动在编译机上执行同样的命令没问题 A CODING CI在非登录非交互式shell下执行构建任务，和用户手动登录编译机执行命令，加载环境变量的顺序不一致，可参考 QCI环境变量实现方式 hr Q 编译机访问IDC如何申请网络策略？ A CODING CI编译机默认在DevNet网络环境下，访问IDC域 及部分OA域名 需要单独申请网络策略，才能够访问。申请需要到 http ticket.oa.com net access control input 建单，编译机IP 源IP 为 10.125.58.70 9.77.87.15 9.77.87.153 9.77.88.66 9.77.88.237 9.77.89.90 9.134.144.168 9.134.145.152 9.134.144.58 9.134.145.69 9.134.144.63 9.134.114.220 9.134.115.234 9.134.116.188 9.134.115.227 9.134.114.155 9.134.147.39 9.134.150.171 9.134.150.50 9.134.150.12 9.134.150.237 9.134.148.59 9.134.150.83 9.134.149.180 9.134.148.26 9.134.150.145 9.134.126.52 9.134.126.44 9.134.126.104 hr Q 编译机访问外网失败？ A CODING CI编译机默认在DevNet网络环境下，无法访问外网。但可以通过代理访问，代理为 devproxy.oa.com 8080 。Docker容器内默认已有 http proxy http devproxy.oa.com 8080 https proxy http devproxy.oa.com 8080 环境变量，大部分应用都会读取环境变量配置的代理并生效。但有的应用 比如npm 需要用户另行单独配置代理。 hr Q 我可以在QCIFile中直接使用gitpush命令吗？ A CODING CI在准备工作空间时，可以保证用户文件与代码仓库中一致，但并不能完全保证git信息如用户期望。一般来说，工作空间下的HEAD指针是游离的，需要用户自行使用命令操作。 hr Q 为什么我的gitclone命令会报错？ A gitclone若无鉴权，会提示 fatal couldnotreadUsernamefor ，并失败。需要增加鉴权信息，比如 http username password git.code.oa.com repo myproject.git 。或者通过SSH协议，用SSH KEY进行鉴权。 hr Q 如何在CODING CI上拉取git代码仓库 A 可以参看 CODING CI平台中拉取git代码仓库说明文档 ","categorie":"持续集成-常见问题"},{"route":"/docs/ci/README.html","content":" 目录 快速入门 基本概念 快速接入 接入要求 使用手册 项目 项目管理 配置文件 QCIFile 介绍 QCIFile参考 集成任务设定及阶段划分 文件路径配置格式 环境变量的使用 条件执行 忽略节点执行结果 超时时间 人工确认prompt 收尾阶段finally 触发方式 通知及其它配置 任务 任务创建 流水线界面配置 任务展示 触发方式 多分支监控 任务的并发 任务的重新运行 个性化任务结果展示 用户自定义上报Git内容 项目徽章展示 任务通知配置 自动取消 自定义版本号 登录调试 不清理工作空间 环境变量 CODING CI环境变量分类与使用 CODING CI内置通用环境变量 CODING CIWindows环境变量 凭证管理 认证管理 证书管理 编译环境 内置编译环境 编译机接入 Linux 编译机接入 DevNet tLinux一键接入 编译机接入 Windows 编译机接入 Windows编译机手工接入 编译机接入 MacOS 编译机接入 IDC 编译机接入 广州合作机房 编译机管理 qci worker命令 编译环境的指定 filebeat安装指南 流水线模板 流水线模板 Docker指引 使用language指定编译环境 Docker编译环境说明 Docker编译镜像订制 公共编译机Docker命令使用说明 文件缓存及任务加速 CODING CI能力集成 CODING CI插件汇总 Android构建 iOS构建 工具接入规范 镜像插件使用 CODING CI错误码释义 CODING CI示例 腾讯使用场景案例 公共账号申请指引 CODING CI对接ARS发布 CODING CI对接织云发布 TAPDwebhook触发CODING CI任务 常见问题 规范与建议 版本号规范建议 CODING CI接口文档 qcicli的使用说明 Releasenotes ","categorie":"持续集成-目录"},{"route":"/docs/ci/qci-cli.html","content":" qcicli的使用说明 hr 通过命令行或者py脚本方式与QCI平台进行交互详细内容请参考 CODING CIAPIClient官方文档 一 安装和使用 1.安装qcicli pipinstallqcicli ihttp pypi.dq.oa.com simple trusted host pypi.dq.oa.com 2.在api网关申请访问QCI服务的token api网关token申请 ，api网关负责人 xianyunlan 蓝贤赟 ，因权限管理需要，请使用个人token申请3.使用命令行或者脚本方式 CODING CI平台提供的命令行或者脚本可以参考 CODING CIAPIClient 二 命令行使用示例 获取自己有权限的Job qcipipelinelist tYOUR TOKEN uYOUR NAME 读取任务配置 qcipipelineread pid 400 tYOUR TOKEN uYOUR NAME 启动任务 qcipipelinestart pid 400 pcur branch master tYOUR TOKEN uYOUR NAME 启动任务，采用命令的方式并不方便应对需要处理启动时返回内容的场景，例如 主流水线中需要启动子流水线的场景。这种场景可以考虑使用QCI提供的启动子流水线的插件，启动后可以等待子pipeline执行完毕，任务启动成功后，可以通过BUILD ID SUBPIPELINE环境变量获取到子pipeline的QCI BUILD ID环境变量值详情可以参考 CODING CI 启动流水线插件 带参数启动任务 qcipipelinestart pid 400 pcur branch master pcur env params ZHIYUN REMARK test 20181008002 tYOUR TOKEN uYOUR NAME 注意 上述示例传入了一个用户自定义参数ZHIYUN REMARK test 20181008002 ，cur env params里面可以继续添加别的参数 获取任务执行历史 qcipipelinetotalresultlist ppipeline id pk 400 tYOUR TOKEN uYOUR NAME 获取一次执行结果 qcipipelinetotalresultread ppipeline id pk 400 pid 1200 tYOUR TOKEN uYOUR NAME 审批任务 qcitaskresultpromptcreate ptask result id pk QCI TASK ID pdesc test presult 2 tYOUR TOKEN uUSERNAME result 2为继续，3为终止 三 py脚本使用示例 创建任务 importqcicliclient qcicli.QCIClient headers X DQAPI Authentication YOUR TOKEN , X DQAPI USERNAME YOUR NAME action pipeline , create params name qci test , admin YOUR NAME , members , auth type 2, repo username , repo password , code source http git.xxxxxx xxxxxxxx.git , code branch master , feature1 , yaml location qcifile.yml , trigger type TRIGGER MANUAL TRIGGER TIMER , trigger content branch master , week 1,7 , hour 0,23 , branch feature1 , week 1,7 , hour 0,23 , code source type git , desc 测试api clientV 2 , user env key1 secret lB1dohFKFFEVj..... , key2 value2 result client.request action,headers,params params result 可选的触发方式有 TRIGGER MANUAL , 手动启动 , TRIGGER TAG , 打tag触发 , TRIGGER CI , 代码提交触发 , TRIGGER MR , 合并请求触发 , 读取自己有权限的任务列表 importqcicliclient qcicli.QCIClient headers X DQAPI Authentication YOUR TOKEN , X DQAPI USERNAME YOUR NAME action pipeline , list result client.request action,headers 读取任务配置 importqcicliclient qcicli.QCIClient headers X DQAPI Authentication YOUR TOKEN , X DQAPI USERNAME YOUR NAME action pipeline , read params id 400, result client.request action,headers,params params 启动任务 importqcicliclient qcicli.QCIClient headers X DQAPI Authentication YOUR TOKEN , X DQAPI USERNAME YOUR NAME action pipeline , start params id 400, cur branch master result client.request action,headers,params params 带参数启动任务 importqcicliclient qcicli.QCIClient headers X DQAPI Authentication YOUR TOKEN , X DQAPI USERNAME YOUR NAME action pipeline , start params id 400, cur branch master , cur env params key1 secret lB1dohFKFFEV...... , key2 value2 result client.request action,headers,params params 获取任务执行历史 importqcicliclient qcicli.QCIClient headers X DQAPI Authentication YOUR TOKEN , X DQAPI USERNAME YOUR NAME action pipeline , totalresult , list params pipeline id pk 400, result client.request action,headers,params params result 获取一次执行结果 importqcicliclient qcicli.QCIClient headers X DQAPI Authentication YOUR TOKEN , X DQAPI USERNAME YOUR NAME action pipeline , totalresult , read params pipeline id pk 400, id 1209, result client.request action,headers,params params result 审批任务 importqcicliclient qcicli.QCIClient headers X DQAPI Authentication YOUR TOKEN, X DQAPI USERNAME USERNAME action taskresult , prompt , create params task result id pk 123, desc test , result 2, result client.request action,headers,params params 四 qcifile使用示例 例如，流程内调起别的CODING CI任务 stages stage start job 123cmds qcipipelinestart pid 400 pcur branch master tYOUR TOKEN uYOUR NAME 五 常见问题解决 1.编码问题，可以尝试在执行命令之前先执行如下命令 exportLC ALL en US.utf 8 exportLANG en US.utf 8 2.网络连接问题，DEVNET机器需要申请访问API网关的网络策略，可以在ticket.oa.com上申请访问100.66.82.34 80的策略 hr ","categorie":"持续集成-qcicli的使用说明"},{"route":"/docs/ci/release.html","content":" What snewinQCI comingsoon 项目管理员可以修改项目下的资源 Release2020 03 11Feature qcifile支持配置mr阻塞 mr本地模拟合入参数Changed 凭证和证书后台存储优化 Release2020 03 02Feature 集成页面可以查看代码库提交历史和文件差异 qcifile支持配置触发方式 CI TAG MR 通知方式及其它高级选项 artifacts产出支持5G以上大文件 Release2020 02 27Feature 可以在构建详情中查看代码库提交历史 增加 QCI TEMPLATE ID QCI TASK RESTART 环境变量Change prompt超时支持用户设置超过24h Release2020 02 13Fixed 修复设置版本号后又禁用后仍下发环境变量的错误 Release2020 02 10Feature 机器离线通知 Release2020 01 09Feature 增加操作历史记录的接口 任务批量绑定标签的接口 qcifile支持全局timeout设置 启动子流水线插件支持父流水线中止后子流水线也会中止Change 条件判断正则表达式支持单行模式 Release2019 12 31Feature 机器离线通知机器负责人 项目模板关联标签 新增下载流水线artifacts的插件 详情 prompt发送消息包含detail内容，detail内容支持动态环境变量Change 任务运行提示调整为中文提示Fixed 自动取消与任务下发竞争的问题修复 凭证 证书 集成环境项目名称显示BUG修复 Release2019 12 07Feature QCI界面改版，更快捷的入口，一触即达 增加任务标签，可以把项目下的任务进行分类 审批支持修改审批人Change QCI默认容器镜像迁移到腾讯云csighub.tencentyun.com镜像仓库 dockerimage.isd.com已停止维护 QCI默认maven源配置为腾讯maven源服务mirrors.tencent.com maven.oa.com已停止维护 Fixed 前端task等待时间 执行时间展示的问题修复 Release2019 12 09Feature 支持流水线模版配置任务 获取流水线制品的接口支持获取版本号相关字段 Release2019 11 21Feature 任务可配置 不清理工作空间 QCI内置编译机器增加IDC网段Mac环境 任务执行增加排队时间的显示 执行历史记录支持筛选待审批状态的执行Change 任务中止和超时会继续执行finally步骤 获取last artifacts和artifacts接口的返回值格式保持一致 Release2019 11 04Feature 支持自定义构建号 QCI BUILD VERSION ，支持 每次构建 1 ， 每次成功构建 1 ， 锁定 三种策略 Release2019 10 30Feature 支持DEVNET环境下机器的远程调试 Release2019 10 24Feature 支持资源一键迁移项目Change 优化无项目权限时的提示页面 环境管理 增加每页显示数的配置 Release2019 10 16Feature QCI资源和权限按照项目进行划分Fixed 修复 我的QCI 菜单在低分辨率下被遮挡的问题 Release2019 09 28Feature 增加环境变量 QCI LAST SUCCESS BUILD ID , QCI LAST SUCCESS BUILD COMMIT , QCI LAST SUCCESS BUILD REVISION 支持配置 公共帐号 的权限 Release2019 09 23Feature 任务可以精确的显示步骤的执行结果 支持pluginasdocker 支持外网访问认证Change UI配置任务时选择标签过滤掉公共机器的标签Fixed 修复集成序号并发问题 Release2019 08 08Feature 任务详细信息改为状态推送，状态更新更及时 认证信息支持一键自动生成SSHKey，无需复杂的手动生成 认证信息支持共享给其他用户使用 执行历史页面支持在url上添加参数筛选数据Change 可以在认证管理里进行OAuth认证了 Release2019 07 25 hr Feature 增加插件市场 prompt 支持设置超时时间，超时时间支持设置单位 prompt 支持设置自定义表单项，表单内容可以在后续阶段通过环境变量获取，支持必填校验 UI配置中可以编辑 阶段 的配置项 QCI执行环境配置优化 QCI内置执行环境支持选择windows和mac环境 QCI内置执行环境支持配置编译依赖工具和版本，并且自动生成对应的环境变量 自定义执行机支持选择当前用户有权限的机器列表 自定义Docker支持指定宿主机器 提供下载指定流水线最新一次成功构建产物artifacts的接口 提供织云回滚插件 详细说明 支持下载同一次执行内不同阶段产生的同名的文件Change UI界面将一些关键字翻译成中文,便于理解 优化启动时环境变量的排序，用户可修改的优先展示Fixed 修复消息通知的转义问题 issues 58 优化多task的任务结果的接口性能 Release2019 07 11 hr Feature 集成历史可以填写 备注信息 ，来标明本次集成的相关信息 增加 添加任务结果备注 插件，可以在任务运行时动态设置备注信息 详细说明 增加环境变量 QCI FAIL TASKS ，可以获取失败任务的名称Change 当任务没有配置有效的stage时，在执行历史列表里任务状态改为 忽略 Release2019 07 08 hr Feature 任务启动接口可以设置 启动人 参数Fixed 修复紧接着 prompt 步骤后的stage拿不到 prompt 相关的环境变量的问题 Release2019 07 03 hr Feature 任务可以设置 允许自动取消排队中的任务 ，自动取消排队中的任务 左侧任务栏 任务badge实时更新状态 日志支持分段显示，优化大日志的显示方式 增加 外网体验 插件 详细说明 Change prompt节点支持企业微信私聊消息推送 prompt信息支持使用动态环境变量 取消任务配置中的 证书配置 ，增加 证书 插件，支持 SSL TLS证书 详细说明 左侧任务栏列表搜索不区分大小写 任务取消了24小时和最新一次才能重跑的限制 依赖环境需使用setup指定 Release2019 06 03 hr Feature 启动任务支持按指定commit号启动 UI类型任务支持关联代码库和取消关联代码库 执行历史页面支持按启动者搜索，支持多个条件联合搜索 织云插件 支持配置织云提交版本号的变量名，织云下载插件支持直接下载最新包Change 选择重跑的操作优化 默认选中失败的第一个stage下所有失败task 任务配置界面增加没有权限创建webhook的提示 Release2019 04 25 hr Feature UI配置支持直接选择插件和在表单上填写参数，方便用户配置任务 task和stage可以单独指定执行环境 支持设置setup步骤，可以指定在每个stage前都执行的操作 UI自定义脚本配置支持多行文本 证书管理 证书文件支持上传多个描述文件 statusfile支持多个报告链接 prompt prompt支持用分号分隔多个处理人 通知 支持用分号分隔多个企业微信群Change 任务配置界面增加代码库路径的提示和校验 通知 消息通知开头增加任务结果状态，一目了然任务执行结果 Release2019 04 10 hr Feature 启动GIT任务时支持选择TAG进行触发 环境变量支持 字符串 单选 多选 只读 等类型， 单选 多选 启动时可以下拉选择， 只读 启动时不允许修改 我的集成环境 中可以查看哪些任务在该机器上运行 UI配置支持配置 失败继续运行 artifacts的产出新增MD5值 Release2019 03 29 hr Feature prompt增加 详细信息 字段，支持markdown格式和环境变量，人工处理时展示更丰富的信息和交互。 Release2019 03 27 hr Feature 任务配置界面优化，UI和代码库操作界面统一 UI配置pipeline界面支持导入导出qcifile 在代码库配置qcifile的任务支持转成UI配置 MR触发的任务支持版本号跳转到MR的链接 Release2019 03 22 hr Feature 支持选择特定任务进行重跑 增加MR的ID和IID环境变量 QCI MR ID QCI MR IID 增加prompt处理信息的环境变量 QCI PROMPT MSG 增加 STKE镜像发布插件 Changed MR触发时，当重新打开或新打开MR时，即使相同的commit号也会触发Fixed 大量task做条件判断时的性能优化 修复MR触发任务重跑时无法获取QCI MR TARGET BRANCH的问题 修复不关联代码库时无法定时启动的问题 Release2019 03 13 hr Feature 支持任务 遇错继续运行 和 重跑失败任务 的功能 任务配置支持版本号管理 任务详情页面支持 上一个 和 下一个 快速跳转 任务详情页面和历史集成页面支持commit号跳转Changed prompt处理时间不占用整个任务的超时时间 任务配置界面代码库路径兼容SSH和HTTP两种协议 Release2019 03 01 hr Feature 增加UI编辑功能，可以通过界面配置流水线 界面编辑流水线支持无代码库的情况Fixed 优化大文件下载逻辑 Release2019 02 27 hr Fixed 修复自行添加的webhook触发不生效的问题 修复QCIFile中if条件表达式，如果环境变量为空时 和 表达式解析错误的问题 Release2019 02 22 hr Feature 环境变量支持增加备注信息 批量导入和导出 iOS编译支持企业证书管理 增加 taf 插件 说明 增加金刚扫描插件 说明 Release2019 02 19 hr Feature 任务结束的通知，自定义通知内容支持markdown格式 增加代码提交的相关的环境变量QCI COMMIT AUTHOR QCI COMMIT DATE QCI COMMIT MESSAGE 增加task开始执行的时间戳的环境变量QCI BUILD TIMEChanged 创建gitwebhook逻辑优化，兼容用户自己编辑过webhook的情况。 当任务认证没有master或owner的权限时，可以自己添加QCI的hookurl到git项目中。 任务结束的通知，企业微信消息任务结果不同，用颜色加以区分 Release2019 01 29 hr Feature 自定义通知支持环境变量与html样式 GITMR触发时支持模拟合入后运行任务 Release2019 01 23 hr Feature 项目部署敏感配置信息隔离 增加环境变量QCI JOB NAME QCI JOB CREATOR QCI JOB ADMIN QCI JOB MEMBER QCI JOB URL QCI使用QCI来进行自动化部署Fixed 支持下载大文件 修复环境变量带正则关键字时解析错误的问题 Release2019 01 17 hr Feature 自定义通知功能上线，可以任意组合配置多条通知，多种通知方式任选 日志展现优化，关键字高亮 阶段折叠 显示各阶段耗时 支持任务设置并发运行数量 支持证书配置与终端构建 QCIFile中task支持 ignore 关键字,设置 ignore 关键字的task的执行结果不影响任务的执行 QCIFile中status关键字支持上传目录作为报告展示 QCIFile中定义的环境变量，允许使用其他环境变量进行定义 增加环境变量 QCI LAST BUILD ID ,可以获取上次构建信息 增加环境变量 QCI JOB CREATOR ,可以获取任务创建者 QCIFile中条件判断支持严格的布尔型判断 项目徽章 shield 支持自定义字段和不展示最新构建id，前端添加示例和预览 支持上传文件到migcdn 说明 新增对接织云接口 下载包的接口，支持获取织云上的下载链接和直接下载压缩包到本地 说明 新增织云的QCI公开任务和案例，详情可以查看 说明 新增对接AlloyKit 离线包管理平台 插件 说明 Changed 公开的任务不会出现在我的任务的列表中 artifacts添加鉴权，对项目没有权限的用户不能下载artifacts 优化任务启动速度 优化Worker升级策略，优化镜像更新策略 优化代码拉取策略，避免合并冲突，防止Code平台异常导致的代码全量拉取Fixed 修复gitbranch带有特殊字符导致代码拉取bug 修复任务执行历史的筛选的条件为空时处理的问题，执行历史添加按分支筛选 Release2018 12 20 hr Feature 集成历史页面支持按分支过滤 集成历史页面增加停止任务功能，支持取消排队中的任务 QCI任务支持设置成 公开 或 私有 ， 公开 的任务任何人都可以查看，只有管理员才能修改 通过 QCI PROMPT OPERATOR 环境变量可以获取prompt的处理人 首页支持搜索用户的访问记录Changed QCIFile中status关键字对应的文件中status结果字段非必填 自动触发的任务当QCIFile有格式问题时也会增加一次构建记录，可以直接在界面上查看错误信息 Release2018 12 07 hr Feature 支持代码库SSH认证 增加凭证管理，认证信息集中管理 可以在qcifile中自定义超时时间 支持Git自定义上报内容 qcifileif语句支持模糊匹配以及正则表达式 对接织云新接口，简化接口调用逻辑 qcifilefinally增加all success的关键字支持 增加环境变量 QCI JOB ID ，标识QCI的任务ID QCI任务结果徽章点击后可弹出多种使用样例 下载文件的链接支持指定绝对路径 job任务支持按代码库路径全局搜索Changed 左侧任务访问列表增加选中效果 任务点击“停止”按钮后，状态会变为“停止中” 任务执行后相同的artifact会合并显示 重跑任务后QCI TRIGGER TYPE与重跑任务一致Fixed 修复qcifileif条件语句与空字符串比较解析失败的问题 修复QCIRunner执行中文出现编码错误 Release2018 12 03 hr Fixed 修复cache缓存速度慢的问题 Release2018 11 12 hr Feature MR触发任务，支持配置是否block qcifilelabel支持配置环境变量 qcifileprompt中msg和to支持配置环境变量 QCI增加任务结果的徽章显示链接Changed 启动和配置任务时会检查默认分支是否存在，防止直接启动失败 MR触发任务，同一个commit号启动过后将不再启动 用户点击任务中止后 尚未中止成功时，任务会显示“中止中”的状态Fixed 修复git在多分支情况下无webhook时CI不触发的bug Release2018 11 01 hr Feature worker支持设置多标签 定时任务支持设置“代码未变更时不触发”Changed 规范系统内置的环境变量Fixed 修复cache参数下发的问题 修复动态环境变量在if表达式获取不到的问题 启动时，监控分支不存在的话，不会默认选中 Release2018 10 19 hr Feature qcifile中if关键字的表达式式，支持 ISNOT 和 NOTIN Changed 启动任务时，会选择用户配置的第一个分支 正则表达式除外 做为默认值 多分支选择时，会将用户配置的分支 正则表达式除外 分组放在前面，方便选择 Release2018 10 16 hr Feature qcifile支持人工确认prompt关键字 支持多分支监控，一个任务可以对多个分支设置启动方式 支持stage task名称以及artifacts temps cache等关键字设置环境变量 支持 ciskip 忽略定时启动 接口文档以及qcicli库上线 规范错误码，错误码可以直接关联帮助文档Changed 创建或编译任务时可以选择多条分支或正则表达式匹配多条分支 可以按照分支设置多条定时任务 启动时支持选择分支Fixed 修复qcifile中相同前缀的环境变量解析错误的问题 Release2018 09 18 hr Feature qcifile支持条件型的stage task设置 qcifile支持设置finally关键字 qcifile支持按language指定docker镜像 编辑任务的时候oauth可以切换为当前用户的认证 任务界面可以下载日志 支持Mac执行机的接入 Release2018 08 21 hr Feature 支持复制任务 GIT项目支持使用帐号信息授权 任务列表支持按产品过滤 支持在push MR的message中填写 ciskip 或 skipci ，忽略本次触发Changed MR触发时如果源分支没有创建任务时，触发目标分支的任务 创建任务界面，分类改为OAuth授权和账户信息授权Fixed 修复任务结果上报到git上的链接错误 Release2018 08 17 hr Feature 左侧访问记录支持鼠标拖动排序，新访问的项目放在访问记录的最后面，可以通过鼠标拖动来改变位置 编辑任务时，需指定任务属于哪个项目的，以便后续针对项目做筛选和权限控制 支持git提交检测，可以在git上查看每次commit的集成信息 git支持通过Webhook的方式，在PUSH TAG MR时自动触发任务的执行Changed 鉴于支持排序，左侧访问记录删除我关注的任务一项 查看任务执行界面改版，能够更清晰的看到任务执行情况Fixed 修复多个任务在等待队列时，用户手动启动任务，会出现启动的顺序与队列顺序不一致的问题 修复SVN在使用用户账户启动时报无权限 Release2018 08 03 hr Feature 我的集成环境中可以设置编辑机的label 最大负荷 责任人等信息 首页左侧访问记录可以删除Changed QCI邮件发送者变更为新账号qci admin Release2018 08 01 hr Feature 创建git任务支持一键OAuth授权 QCIFile支持配置dockerhub 帐号密码配置 task超时监控，cmd超过10min无输出或整个task运行超过24小时进程会被结束掉 支持SVN GIT增量拉取代码 接入API网关 任务结束后可以发邮件通知给相关责任人Changed 公共编译机label改为PUBLICFixed 执行cmd时环境变量与执行机的环境变量保持一致 修复创建任务时，用户填写用户名和密码错误时，界面因为重试导致响应慢的问题 中止任务后可以显示完成的日志信息 Release2018 07 16 hr Feature 任务查找更方便，用户可以收藏任务 以及查找最近访问的任务 代码库权限支持自定义用户帐号 Docker支持内外网docker镜像库 支持重新启动任务 任务详情界面支持查看本次代码提交的详细信息Changed 任务信息更方便查看，左边侧边栏直接展示收藏和访问任务列表和最新构建信息 简化创建任务流程，无需创建代码库，创建任务只需一步Fixed 解决任务配置定时计划时勾选星期天不生效的bug Publish2018 06 29 hr Feature 通过yaml自定义复杂的CI CD的流水线任务 智能动态分配集成资源，让资源得到最大限度的利用 支持使用Docker环境执行任务，保证集成环境的隔离 安全全面升级敏感信息加密保护 通过插件脚本实现与周边系统的无缝对接","categorie":"持续集成-Release notes"},{"route":"/docs/ci/unfinished.html","content":" 文档建设中","categorie":"持续集成-快速入门-接入要求"},{"route":"/docs/code-analysis/README.html","content":" Coding代码分析帮助文档用心关注每行代码迭代 助您传承卓越代码文化 代码分析是指在不运行代码的方式下，通过词法分析 语法分析 控制流 数据流分析等技术对程序代码进行扫描分析，验证代码是否满足规范性 安全性 可靠性 可维护性 部分性能 对代码进行综合分析和度量等等指标的一种代码分析技术。可以轻松的监管代码综合质量趋势，工程师们修复代码后可自动跟踪代码具体质量问题的消除。针对静态分析预测所产生的误报，可以轻松进行误报管理。针对第三方代码，可以轻松进行过滤管理。针对存量和增量，可以轻松进行批次管理。目前已集成100 个细分工具，含业界知名商业工具 业界知名开源工具 圈复杂度 重复代码 自研工具 二次开发的工具 业务团队自建工具等，提供开源，代码规范等规则包进行了扫描，可轻松复用。覆盖29门语言。支持的语言包括 C C Java JavaScript Objective C PHP Python C Ruby Kotlin Go Lua Swift Html Css TypeScript sql VisualBasic PL SQL T SQL RPG APex PL I Dart XML ","categorie":"代码分析-快速入门"},{"route":"/docs/qta/API.html","content":" 通过API使用QTA平台QTA平台通过提供API，让用户或第三方开发者能集成和扩展QTA平台的功能。 使用前准备1.在QTA平台上 个人中心 获取一个凭证 Token 2.根据不同的网络区域选择对应的API网关 网络 API网关 OA http devnet.api.qta.oa.com DevNet DevCloud http devnet.api.qta.oa.com 自研机房 IDC http api.qta.oa.com 云机房 CDC http api.qta oa.tencentyun.com 外网 仅限部分功能可用 https api.qta.tencent.com 访问APIQTAAPI按照RESTful方式设计，默认使用URL “http api.qta.oa.com”访问。API鉴权使用JWTToken方式，简单的说，就是在HTTP请求中设置HTTPHeader Authorization Bearer token API概览 API 功能说明 测试用例API 测试用例库和测试用例数据管理 测试任务API 测试任务和执行控制 测试报告API 测试报告数据上报和查询 测试资源API 测试资源管理和使用 制品API 测试制品管理 上传和信息查询 元数据API 测试工具和测试类型注册和管理 测试项目API 测试项目管理 鉴权管理API 鉴权和密钥管理 ","categorie":"自动化测试-使用 API"},{"route":"/docs/qta/CHANGE.html","content":" Changelog在这里，你可以看到QTA平台的更新动态及用法，欢迎随时关注 更多建议意见欢迎随时联系 QTA小助手 目录概览 2019.06.13 2019.06.27 2019.07.11 2019.07.25 2019.08.08 2019.08.08 2019.09.05 2019.09.26 2019.10.17 2019.10.31 2019.10.14 2019.11.28 2019.12.12 2019.12.26 2020.01.09 ","categorie":"自动化测试-Changelog"},{"route":"/docs/qta/CLI.html","content":" 通过命令行工具使用QTA平台 qtap cli qtap cli 是QTA平台提供的命令行工具，可以通过命令行的方式来使用平台提供的功能 使用前准备1.安装Python和 pip 1.安装 qtap cli shell pipinstall ihttp pypi.dq.oa.com simple trusted hostpypi.dq.oa.comqtap cli 1.在QTA平台上 个人中心 获取一个凭证 Token 1.根据不同的网络区域选择对应的API网关，并通过 修改配置 设置对应的API网关的地址 网络 API网关 OA http devnet.api.qta.oa.com DevNet http devnet.api.qta.oa.com 自研机房 IDC http api.qta.oa.com 云机房 CDC http api.qta oa.tencentyun.com 外网 仅限部分功能可用 https api.qta.tencent.com 使用 登录和登出登录之前要先获取API密钥，然后执行 shell qtaplogin t yourtoken 如果要清理本地的登录态，可以执行 shell qtaplogout 修改配置 配置API网关地址 qtapconfigsetAPI URLhttps api.qta.tencent.com 查询所有配置 qtapconfigls 删除一个配置 qtapconfigunsetAPI URL 重置全部配置 qtapconfigreset 更多功能命令行工具还提供更多的功能，详情请参考命令行工具帮助信息或QTA其他功能模块文档，比如通过命令行 上传测试报告 本地执行测试 测试工具接入 扩展命令行工具QTA命令行工具会检测可执行文件路径下的 qtap 前缀的应用程序，并将其作为命令行工具的子命令。比如复制 usr bin echo 文件为 usr bin qtap echo 后，则可以这样使用 shellqtapechohello ","categorie":"自动化测试-使用命令行工具"},{"route":"/docs/qta/EXTENSION.html","content":" 扩展QTAQTA平台提供不少扩展点，以支持不同用户或组织的定制化的需求。目前的扩展点包括 服务能力插件 测试工具插件 接入新的测试工具，支持对于测试工具的用例管理 执行和报告展示 测试资源类型插件 自定义新的测试资源类型，支持资源管理配置和在自动化测试用例中使用测试资源 客户端扩展 命令行工具扩展 可以在QTA命令行工具中新增子命令 服务端扩展 制品库对接 自定义被测包获取和使用的方式 代码库对接 自定义测试用例托管代码库 用户和鉴权 自定义新的用户管理和鉴权 权限控制体系 对象存储 自定义底层数据存储方式 消息通知 自定义消息推送方式","categorie":"自动化测试-扩展 QTA"},{"route":"/docs/qta/INTRO.html","content":" QTAQTA平台旨在帮助用户更快更好地在研发过程中落地和应用自动化测试，提升业务测试效率和质量。 功能架构 QTA通过两个中台的提供自动化测试所需要的 基础服务 ，包括 测试项目 测试用例 测试执行 测试资源 测试报告 QTA提供统一的 测试工具接入层 ，让大部分主流测试工具框架能方便地使用自动化测试服务。QTA平台针对不同的测试类型场景专门构建对应的 测试自动化应用 ，包括 功能测试 压力测试 兼容性测试 开发中 单元测试 开发中 性能测试 开发中 谁在使用QTA服务了公司大量的业务团队，包括QQ 空间 腾讯云等等，具体的接入业务列表可以参考 这里 。","categorie":"自动化测试-简介"},{"route":"/docs/qta/QTAPFILE_FORMAT.html","content":" QTAPFile格式文档QTAPFile是存放在自动化测试代码库中的一个文件，文件名默认为 QTAPFile.yml ，用于提供自动化测试代码库的配置信息给QTA平台。模版格式如下 yamlversion 1.0task setup . global setup.shteardown . global cleanup.shenv setup . env setup.shteardown . env cleanup.shresource android setup . android device setup.shteardown . android device cleanup.shios setup . ios device setup.shteardown . ios device cleanup.shwindows setup . windows device setup.shteardown . windows device cleanup.sh 各个字段说明如下 字段 是否必要值 说明 version 是 目前固定为 1.0 task 否 执行相关配置 task.setup 否 测试任务执行初始化命令，每个任务开始前执行一次 task.teardown 否 测试任务执行反初始化命令，每个任务结束前执行一次 task.env 否 测试任务执行环境初始化相关配置 task.env.setup 否 测试任务执行环境初始化命令，每个执行节点在开始执行测试前都会执行一次 task.env.teardown 否 测试任务执行环境反初始化命令，每个执行节点在结束执行测试前都会执行一次 task.resource 否 测试任务预分配资源初始化相关配置 task.resource. res type .setup 否 指定类型的每一个资源，在开始执行测试前都会执行一次 task.resource. res type .teardown 否 指定类型的每一个资源，在结束执行测试前都会执行一次 在以上的命令行程序，可以使用平台设置的环境变量 变量名 说明 作用域 QTAP RUN ID 当前测试执行任务的ID，每个执行任务唯一 task QTAP REPORT ID 当前测试报告ID task QTAP ARTIFACT ID 当前被测制品ID task QTAP ARTIFACT FILES 当前被测制品本地可访问路径，多个文件会以 间隔 task QTAP NODE ID 当前执行节点ID task QTAP RES TYPE 当前处理的资源类型名 task.resource QTAP RES ID 当前处理的资源ID task.resource QTAP RES PROP JSON 当前处理的资源属性详情，以JSON格式编码 task.resource ","categorie":"自动化测试-QTAPFile格式说明"},{"route":"/docs/qta/QUICKSTART.html","content":" QTA快速入门 快速搭建第一个测试项目 以Web为例 创建代码仓库进入平台后根据引导，创建代码库。Coding平台入口 进入 Coding平台 个人项目下 左侧侧边栏 自动化测试 用例QTA平台入口 进入 QTA平台 个人项目下 左侧侧边栏 用例 用例库 创建代码库 后生成一个代码库 创建代码库 打开代码仓库，可以看到里面已经有基本的用例结构 自动生成的代码仓库结构图 在pcwebtest hello.py中已经自动生成了一个测试用例HelloTest，在平台执行后可以看到报告。本地若想开始写用例，请先将代码拉到本地 gitclonehttp xxx PCWeb.git在QTA平台上根据指引创建完代码库后，代码库中自动生成了一个测试用例，你可继续创建任务 启动任务，则会生成demo用例对应的报告。 测试环境你可以选择你习惯的开发环境，如Eclipse 命令行执行 PyCharm等，后续QTA开源了QTA二次开发的QTA IDE后，也可采用。 本地安装依赖库首先请在代码仓库根目录下的requirements.txt中添加依赖库，如有多个依赖库，分多行写入，如qt4wqt4c同时本地安装,如qt4w自动化需要qt4w pipinstallqt4w如果你所依赖的端只有egg包，无法用pip安装，可以在项目根目录下创建exlib文件夹，把egg包放入exlib路径下。当然，如果是后台自动化，就是在requirements.txt增加qt4s，本地 pipinstallqt4s 了，其他类推。 第一个Web自动化用例开始前，请阅读自动化基础库 QTAF文档 和Web自动化组件 QT4W文档 和对应端的组件库。Android iOS端的Web自动化用例可以参考 Web示例用例 ,PC端的Web自动化用例与Android iOS类似，本节以刚建好的PCWeb项目为例。 PC端Web自动化测试首先确保你的PC已安装了被测浏览器，如chrome IE等,同时按 本地安装依赖库 一节添加了qt4c和qt4w依赖库。在pcwebtest hello.py中的HelloTest中实现如下 coding utf 8 示例测试用例 2019 02 27QTAF自动生成importtimefrompcweblib.testcaseimportPCWebLCTTestCasefromqt4w.browser.browserimportBrowserfrompcweblib.demopageimportDemoPage,ProfilePageclassHelloTest PCWebLCTTestCase 示例测试用例 owner qta timeout 5priority PCWebLCTTestCase.EnumPriority.Highstatus PCWebLCTTestCase.EnumStatus.Designdefrun test self self.startStep 1.设置信息并提交 browser Browser Chrome self.logInfo 打开web页面 page browser.open url https qtacore.github.io qt4w demo.html ,DemoPage self.logInfo 用户名设置为qta page.set name qta self.logInfo 年龄设置为20 page.set age str 20 self.logInfo 公司设置为tencent page.set company tencent self.logInfo 性别设置为女 page.set female self.logInfo 点击提交 page.submit time.sleep 3 等待页面跳转self.start step 2.检查页面跳转以及内容是否正确 page browser.find by url https qtacore.github.io qt4w welcome.html name qta sex female age 20 company tencent ,ProfilePage page.wait for ready self.logInfo 检查页面标题 self.waitForEqual 检查页面标题 ,page, title ,self.casedata title self.logInfo 检查公司 self.waitForEqual 检查公司 ,page.control 公司 , inner text , tencent if name main HelloTest .debug run 该用例实现了Web页面的表单填写和提交，并验证提交后的信息是否正确。在pcweblib testcase.py中实现用例的测试基类实现 coding utf 8 示例测试用例 2019 02 27QTAF自动生成fromtestbaseimporttestcasefromqt4w.browser.browserimportBrowserclassPCWebLCTTestCase testcase.TestCase PCWebLCT测试用例基类 defpre test self super PCWebLCTTestCase,self .pre test self. clean env super PCWebLCTTestCase,self .pre test Browser.register browser IE , browser.ie.IEBrowser Browser.register browser Chrome , browser.chrome.ChromeBrowser def clean env self frombrowser.chromeimportChromeBrowserfrombrowser.ieimportIEAppChromeBrowser.killall IEApp.killAll defpost test self super PCWebLCTTestCase,self .post test 上述实现了测试基类的环境初始化。在pcweblib demopage.py中实现各个Web页面的封装，其中元素用XPath定位，具体可网上查看XPath语法 coding utf 8 示例页面 fromqt4wimportXPathfromqt4w.browser.browserimportIBrowser,Browserfromqt4w.webcontrolsimportWebPage,WebElement,InputElement,SelectElementclassDemoPage WebPage Demo页面 ui map title type WebElement, locator XPath div class panel heading , name type InputElement, locator XPath input id name , female type WebElement, locator XPath input value female , male type WebElement, locator XPath input value male , age type SelectElement, locator XPath select id age , company type InputElement, locator XPath input id company , submit type WebElement, locator XPath button id submit , 设置用户名defset name self,name self.control name .value name 设置性别defset female self self.control female .click defset male self self.control male .click 设置年龄defset age self,age self.control age .selection age 设置公司名defset company self,company self.control company .value companydefsubmit self self.control submit .click classProfilePage WebPage 个人资料页 ui map 用户名 XPath div id name , 性别 XPath div id sex , 年龄 XPath div id age , 公司 XPath div id company 第一个后台自动化用例建议一个代码仓库只存放一端的自动化脚本，如后台自动化脚本和Web自动化脚本可分别在QTA平台创建2个代码仓库分别存放。对于后台自动化，首先请确保根据“本地安装依赖库”一节操作完成，然后请阅读自动化基础库 QTAF文档 和后台自动化 QT4S文档 。后台自动化项目需检查项目根目录下的 settings.py 文件，需要确保变量 INSTALLED APPS 变量赋值了qt4s,如下 INSTALLED APPS qt4s 而QT4S的demo用例可以参考 后台自动化示例用例 其他端的示例用例请参见开篇各端的链接文档。 本地执行用例cd path to projectpythonmanage.pyruntestpcwebtest hello.py如果你用IDE执行的用例，且你项目下创建了exlib用于存放以来的第三方库，需要把exlib添加进PythonPath.后续QTA IDE开源后，该步骤可省略。 提交代码到远程代码仓库在项目根目录下，添加你的修改并commit gitadd.gitcommit m 第一个web用例 然后push到远程仓库gitpush接下来到远程仓库检查代码已提交完成。 平台执行任务在平台选择你的项目 进入 Coding平台 个人项目下 左侧侧边栏 自动化测试 任务列表进入 QTA平台 个人项目下 左侧侧边栏 执行 任务找到你最开始创建的任务，点击启动即可。此时会拉最新代码来执行。 启动任务 ","categorie":"自动化测试-快速入门"},{"route":"/docs/qta/SDK.html","content":" 使用QTA平台SDK针对部分用户常用的功能，也提供相应的SDK以方便使用，详情请参考一下表格。 SDK 语言 提供的功能 贡献者 qtap cli python 资源使用 文件存储 QTA qtap java sdk java 资源使用 caesarzhli 如果您有基于QTA的API实现的其他的SDK能贡献出来，也随时欢迎联系我们加上。","categorie":"自动化测试-使用 SDK"},{"route":"/docs/quick-start/coding.html","content":" 什么是CODING 1.什么是CODINGDevOpsCODINGDevOps为产品研发团队提供整套的研发流程管理系统。从代码研发规范管理到持续集成 代码分析 自动化测试，构建物管理直至最终持续部署，整套流程均可在在CODING入口完成。通过CODING，研发团队可实现标准化的代码研发 测试和发布流程，完整记录版本发布过程，降低管理难度，提高效率。2.什么是项目项目是业务团队或具体产品的专属空间，成员在项目内登记工蜂代码库后，可开启研发规范管理 运行持续集成任务 进行代码分析和自动化测试 制品库等研发环节操作。除此之外，项目还支持成员进行需求 缺陷等项目协同工作，进行测试管理。项目管理员有权对项目成员 权限等资源进行管理。3.快捷入口基础 了解如何创建项目 了解如何添加成员并设置权限 了解如何登记代码库 进阶 了解如何开启研发规范管理 了解如何创建集成任务 了解如何开启代码分析 了解如何进行自动化测试 了解如何管理制品 了解如何开启持续部署 ","categorie":"快速入门-什么是 CODING"},{"route":"/docs/quick-start/faq.html","content":" 常见问题 1.为什么我加入项目了，还是提示没有权限请点击项目内导航左下角的 项目设置 ，访问 成员 tab，查看自己在项目内的权限。若没有相关功能权限，可联系管理员为您关联有对应权限的用户组。2.为什么添加成员时搜索不到某个成员？可能该成员已被加入项目。可能该成员还未同步至CODING平台，请该成员访问 tencent.coding.oa.com 即可。 目前成员同步采取定时同步方式，存在一定的延迟。 3.项目内功能模块很多，我可以只开启需要的吗请点击项目内导航左下角的 项目设置 ，访问 功能开关 tab，关闭不需要的功能模块。注意 有部分功能模块默认开启，暂未接入开关，暂时无法关闭。4.我可以随意创建项目吗目前创建项目是无需审批的，不受数量和权限限制。","categorie":"快速入门-常见问题"},{"route":"/docs/quick-start/project-members.html","content":" 添加成员 点击项目图标进入项目内页面。只有项目管理员可以添加成员 设置管理员 管理用户组。 添加成员1.添加项目成员默认为管理员权限。点击项目内导航左下角的 项目设置 ，再访问 项目与成员 成员 页面，点击页面右上角的 添加成员 按钮，页面将出现弹窗。2.在弹窗中输入成员的英文名 中文名搜索，勾选待添加的成员，点击 确认 完成添加。 图片描述 被添加的成员同时收到站内通知。3.或者选择您加入的其他项目，批量导入成员。 图片描述 设置管理员和成员权限项目创建时，默认初始化6种权限的用户组 项目管理员 开发 测试 项目经理 产品 运维。点击成员列表的 关联用户组 按钮，为成员关联 项目管理员 用户组。建议关联开发 测试用户组。注意 若成员没有通过用户组获得对应的权限，则当他访问项目内功能模块，将会提示“没有权限”。 用户组成员通过加入用户组获取权限。成员在项目内的权限为所加入的各个用户组权限之和。项目创建时，默认初始化6种权限的用户组 项目管理员 开发 测试 项目经理 产品 运维。除项目管理员外，开发测试等用户组均可以重新命名 设置权限及删除。管理员还可以新增用户组，设置权限，然后为成员关联用户组。 图片描述 图片描述 ","categorie":"快速入门-添加成员"},{"route":"/docs/quick-start/project-new.html","content":" 项目 初次访问1.访问http tencent.coding.oa.com2.若您是第一次访问网站或者登录cookie过期，将跳转至IOA认证页面，完成认证将跳转至工作台页面。3.已登录用户将直接跳转至工作台页面。 创建项目点击工作台页面的 全部项目 按钮或顶部导航栏右上角的 项目 图标，即可访问项目中心。1.在项目中心，点击 新建项目 按钮进入创建项目页面。2.完善项目信息 项目名称 必填 项目英文名 必填，默认根据项目名称拼音生成，用于组成项目访问地址 项目描述 图片描述 添加成员 详见添加成员 3.点击 新建项目 按钮完成创建，创建成功后页面自动进入项目内页面。项目创建者默认是项目管理员，管理员默认包含项目内功能的访问和操作权限。 项目中心 我管理的 项目代表我是该项目的管理员。 图片描述 工作台 我的项目 默认展示5个项目，点击 全部项目 可进入项目中心。 我的事项 列出项目内处理人是我且状态是“未完成”的需求 任务 缺陷 史诗，以及我参与的迭代，支持按照项目筛选。 图片描述 DevOps模块功能过时，正在优化中。 项目动态 列出我参与项目的所有动态及我操作的动态，支持按项目筛选。","categorie":"快速入门-创建项目"},{"route":"/docs/quick-start/project-repos.html","content":" 代码库登记 在项目内登记工蜂的代码仓库，供研发规范 持续集成 代码分析等业务模块调用。代码库来源目前支持工蜂内网，工蜂外网版 GitHub Gitlab正在开发中。 图片描述 新建代码库认证1.点击项目内导航 代码库登记 ，点击代码库列表页顶部的蓝色新建按钮，进入新建页面。 图片描述 2.选择认证方式，体现代码库地址认证方式默认是OAuth授权，您需要点击 前往认证 链接，完成认证后可从代码库下拉列表中便捷地勾选目标代码库。若选择用户名 密码或SSH Token方式，再勾选对应的凭据，然后复制代码库的地址粘贴到输入框中。 图片描述 3.完善信息并提交后，代码库列表新增一条记录，并显示该条认证对应的仓库权限供用户参考。至此，代码库登记成功，研发规范 持续集成 代码分析等业务模块可成功调用。4.注意当OAuth或凭据失效时，对应认证也会失效，失效的认证将影响业务模块调用。凭据需要操作者是管理员，或者关联的用户组有凭证权限。 新增认证您可以对已关联至项目内的代码库新增其他的认证方式。 图片描述 编辑认证可编辑已关联的认证方式和备注，关联人和项目管理员可编辑认证。 重置Webhook若项目内Webhook失效，可通过重置按钮重新配置。注意 至少存在一条有效认证时，才可成功重置Webhook. 移除代码库移除代码库需要管理员权限。移除代码库及其所有认证，将会导致研发规范 持续集成和代码分析模块失去当前代码库的认证授权，相关任务将无法运行或运行失败。","categorie":"快速入门-登记代码库"},{"route":"/docs/test/quick-start.html","content":" title 快速入门 CODINGDevOpsOA帮助中心pageTitle 快速入门pagePrevTitle pagePrev pageNextTitle 管理测试用例pageNext test manual cases management.html 本文档将引导您实践一个项目的快速测试流程，以熟悉CODING测试管理的基本使用方法。1.创建一个项目。2.创建一个测试用例。3.创建一个测试计划。4.执行一个测试任务。 操作步骤 步骤1 创建项目1.登录CODING，鼠标移动至右上角的 imgsrc https main.qcloudimg.com raw 7531b01c25014beb2754277107fc4ab1.png style margin 0 ，单击浮出来的 创建项目 。 2.进入项目创建页面后，填写项目地址 项目名称即可创建项目，同时您还可以填写项目描述并添加项目成员。建议您勾选“启用README.md文件初始化项目”。3.单击 新建项目 ，完成创建项目，创建人为项目的管理员。 步骤2 创建测试用例1.在新建项目的左侧菜单栏中选择 测试管理 用例管理 进入用例管理页面。 2.单击 imgsrc https main.qcloudimg.com raw 0680d1e4f6dd9930ddd50b701f243377.png style margin 0 ，输入名称后按回车键创建分组。 3.单击 创建用例 。4.填写测试用例标题 选择分组 前置条件 文本描述 预期结果。5.单击 保存 ，即可完成测试用例创建。 步骤3 创建测试计划1.选择左侧菜单栏中的 测试管理 测试计划 ，进入测试计划页面。2.单击 imgsrc https main.qcloudimg.com raw 0680d1e4f6dd9930ddd50b701f243377.png style margin 0 ，开始创建测试计划。2.填写测试计划标题 描述信息，选择执行者 所属迭代 是否包含全部用例。3.单击 创建计划 ，即可完成测试计划创建。 选择“包含全部用例”，则项目下所有用例都将成为当前测试计划下的测试任务 选择“手动圈选用例”，则需单击 圈选范围 选择需要纳入测试计划的用例。 步骤4 执行测试任务1.在测试计划页面，单击右上角 开始测试 。2.进入测试任务执行页面，单击下方 记录结果 进入窗口，可选择通过 受阻 重测 失败4个状态，并填写备注信息。3.单击 添加结果 ，即完成了该测试任务的一次测试。","categorie":"测试管理-快速入门"},{"route":"/docs/RD-specifications/功能介绍/125-fen-zhi-guan-li.html","content":"","categorie":"研发规范-1.2 功能介绍-1.2.5 分支管理"},{"route":"/docs/RD-specifications/功能介绍/129-niu-zhuan-tapd-dan-zhuang-tai-hong-fa-liu-shui-xian.html","content":" 扭转TAPD需求 缺陷单的状态触发CODING CI流水线 hr 功能介绍扭转TAPD需求单 缺陷单到某状态时，自动触发指定的CODING CI流水线。 配置 step1关联TAPD项目详见 1.2.2 step2状态配置配置入口 状态配置入口 配置项 配置项 功能演示TCMS测试项目的需求单状态扭转到 需求转测试 状态时，触发 测试环境部署 流水线 状态配置 状态配置 效果展示扭转TAPD需求单到 需求转测试 状态后， 扭转状态 测试环境部署 流水线被触发。 流水线被触发 ","categorie":"研发规范-1.2 功能介绍-1.2.9 扭转TAPD需求/缺陷单的状态触发CODING-CI流水线"},{"route":"/docs/RD-specifications/功能介绍/分支关联CI任务.html","content":" 分支关联CI任务 这部分的功能旨在帮助开发在拉取完相关分支后，根据配置的模版参数创建关联相应的ci任务，目前支持的ci平台为coding ci，后续会丰富更多的ci平台，满足不同的业务团队。 enterimagedescriptionhere 适用仓库范围 所有仓库 所有仓库都使用此模版来创建ci任务 部分仓库 所选仓库的分支使用此模版来创建ci任务 适用版本范围 所有版本 所有版本的分支都用此模版来创建ci任务 部分版本 所选择的版本下的分支用此模版来创建ci任务 分支类型 什么样的分支类型使用此模版来创建ci任务 创建方式 yaml 通过代码库中的yaml来创建ci任务，核心是填写一个yaml的路径 理想情况是只需填写一个yaml便可，但是比如启动方式等暂未整合到yaml中，所以单独提供了界面配置 已有ci模版 ci平台会提供模版功能。平台会拉取其他ci平台配置好的模版来创建ci任务。 已有任务 选择ci平台已经存在的任务。平台会拉取ci平台固定的任务来和分支建立关联关系。","categorie":"研发规范-1.2 功能介绍-1.2.4 分支关联CI任务"},{"route":"/docs/RD-specifications/功能介绍/分支列表.html","content":" 分支列表分支列表页面，按照工作流配置的分支类型展示项目下关联的全部代码库的全部分支，如图1所示。如果项目开启了版本管理，则会分版本展示，如图2所示。 图1分支列表 无版本 图2分支列表 有版本 ","categorie":"研发规范-1.2 功能介绍-1.2.5 分支管理-1.2.5.1 分支列表"},{"route":"/docs/RD-specifications/功能介绍/分支命名和合入规则.html","content":" 分支规则 分支类型 enterimagedescriptionhere 点击创建分支类型 enterimagedescriptionhere 里面规定了此分支类型的命名规则 分支命名规则,例如填写dev . ,将匹配dev 为前缀的分支，另外占位符 version 可用来匹配版本，例如填写dev version . ，前端填写拉分支表单页面会自动替换为dev v2.0.0 . ，本地拉分支对于分支名字为dev v2.0.0 test的分支将会归为版本名为v2.0.0的版本 是否为保护分支 是否要关联需求或缺陷 自定义字段 体现在前端拉分支表单页面 以上规则不仅用于页面拉取分支，当开发在本地拉取分支时，同样会按上面的规则进行匹配。例如开发拉取的分支需要绑定需求，如果发现提交message中没有 story xxxx，则冻结分支。需要来平台补全信息，方可解除冻结。 分支类型还包括此类型所使用的工具 enterimagedescriptionhere ","categorie":"研发规范-1.2 功能介绍-1.2.3 分支命名和合入规则"},{"route":"/docs/RD-specifications/功能介绍/分支自动清理.html","content":"自动清理需由项目管理员在平台预先配置，参考如下图，开发同学不需要做额外的任何配置，当开发同学的分支满足了自动清理的条件时就会被自动的删除。 PS 具体的自动清理请咨询团队制定规范的同学","categorie":"研发规范-1.2 功能介绍-1.2.8 分支自动清理"},{"route":"/docs/RD-specifications/功能介绍/分支详情.html","content":" 分支详情从分支列表页面点击分支名可查看分支详情 图8.1，8.2 图8.1查看分支详情 图8.2查看分支详情 基本信息 如图8.2左上角标识，展示了分支名 分支状态 所属版本库，框1显示了更为详细的基本信息，包括所属版本 源分支 版本号 起始commit号 分支别名 分支类型 保护状态 分支成员 创建人 创建时间，和自定义表单项。此处可编辑分支基本信息，支持修改分支别名，变更所属版本，修改分支成员。 注 分支状态说明 1.待创建 提交表单后，等待分支创建，仅登记分支时选择创建新分支2.创建失败 待创建分支创建失败，可能存在多种原因导致创建失败，如果无法自行处理，可联系平台负责人3.活跃分支 分支状态正常，可工作4.冻结分支 不符合分支类型要求的分支，会被置为冻结状态。冻结操作 将分支设为保护分支，去除全部分支成员5.申请合入 分支已发起mr6.已合入 分支已经合入发布分支7.已发布 分支已发布8.已删除 已从代码库中删除 需求缺陷 如图8.2的框2，展示分支已关联的需求和缺陷，支持添加或取消关联。 CI任务 展示当前分支相关的CI任务，默认为登记分支自动创建的CI任务 需配置CI模板 。也可将已有CI任务添加到当前分支关联的CI任务中 图9.1，9.2 。 图9.1CI任务 图9.2CI任务 自动同步代码记录 如果开启了自动同步代码功能，此处将展示当前分支从源分支同步代码的执行记录。发生文件冲突时，可查看冲突文件明细。","categorie":"研发规范-1.2 功能介绍-1.2.5 分支管理-1.2.5.3 分支详情"},{"route":"/docs/RD-specifications/功能介绍/创建工作流.html","content":" 1.概述1.平台旨在通过可配置的规则来约束分支的拉取与合入，同时管理研发过程并提供辅助工具，从而提升研发规范性和团队效率。2.另外平台强调低侵入性，开发不必来平台拉分支。在本地拉的分支通过自动注册的webhook，同样可以达到分支合规性检测以及创建相应ci任务的目的。 2.创建工作流1.点击下图中各个工作流的查看详情可以了解本流程的分支类型，分支拉取和合入规则等。 test 2.可以选择是使用内置的工作流还是完全自定义。如果选择内置工作流，平台会初始化一些基础数据例如分支类型，合入规则等。 enterimagedescriptionhere ","categorie":"研发规范-1.2 功能介绍-1.2.1 创建工作流"},{"route":"/docs/RD-specifications/功能介绍/同步源分支.html","content":" 1.自动同步自动同步需由项目管理预先配置各个分支类型是否启用自动同步，配置之后匹配为该类型的分支每天都会自动同步源分支的变更，配置过程参考如下图 自动同步是由项目管理员在平台预先配置好的，开发同学不需要做额外的任何配置，但是当分支同步发生冲突时需要开发同学手动处理，平台会将发生冲突的文件的下载地址附加在平台的自动同步记录处，开发同学可以下载冲突文件以更直观的确认冲突的详情。 2.手动同步除了可以使用自动同步之外，平台也支持手动启动同步源分支的功能，使用方法参考如下图 ","categorie":"研发规范-1.2 功能介绍-1.2.7 同步源分支"},{"route":"/docs/RD-specifications/功能介绍/本地拉分支须知.html","content":"平台不限制开发同学必须通过平台来创建分支，开发同学可以依然在本地使用自己惯用的方式来创建分支，不过必须遵守团队制定的管理规范，包括分支命名规范，附加信息要求 必须绑定需求或缺陷，必须填写的自定义字段 等。分支在被 push 到远程仓库的时候，平台会收到相应的 webhook 启动将此分支登记到平台的流程，在登记的过程中会检测分支的命名以及 push 之前最后一次提交的 commitmessage ，因此为保证此分支在 push 之后能够被正常使用，开发同学必须 1.创建什么分支类型的分支，就按此分支类型的命名规则对分支进行命名，不规范命名的分支将被冻结无法使用 2.如果此分支类型有要求必须绑定需求或缺陷，那就要在最后一次的提交中按如下规则补充需求 缺陷的绑定信息 绑定需求，支持同时绑定多个需求 story 123456789, story 123456789 绑定缺陷，同样支持同时绑定多个缺陷 bug 123456789, bug 123456789另外如果对应分支类型有要求必填的自定义字段信息，类似如下要求 那么分支在被 push 之后一定会被冻结，然后开发同学也会收到分支被冻结的通知，此时开发同学只需按照通知提示转去平台上的分支详情页面补充相关字段信息即可解除分支的冻结状态 PS 当研发配置开启了版本管理即分支需要跟随版本，本地拉分支如何关联版本？ 首先需要配置分支规则包含版本占位符“ version ”，例如正则 dev version . 当开发本地分支名为dev v1.2.0 test时，推送之后系统则将此分支归属为版本v1.2.0，如果没有匹配到版本则归属为最新版本。","categorie":"研发规范-1.2 功能介绍-1.2.6 本地拉分支须知"},{"route":"/docs/RD-specifications/功能介绍/登记主干和Tapd.html","content":" 基本设置以自定义工作流为例，创建之后会进入如下页面 enterimagedescriptionhere 区域一为控制此工作流是否跟随版本 此版本指产品发布版本，比如一些终端产品app的版本v6.7.5等 ，开启版本管理后，拉取的分支将归属于版本，包括分支关联的需求 缺陷等数据也将从该版本关联的维度 维度 比如可以关联多个tapd的迭代到此版本下，那么此版本的需求数据会从这些迭代池拉取 去筛选过滤。禁用后，分支将无此限制。 区域二负责注册主干，如果没有找到仓库需要先行去仓库管理页面登记仓库及其认证信息。然后点击登记主干，选择仓库与分支。登记主干后可看到如下展示 enterimagedescriptionhere 区域三负责关联tapd项目到本项目下。点击添加关联会跳转tapdOauth界面。根据提示选择项目即可。 注意 1 tapdoauth只会列出自己是管理员的项目， 2 tapdoauth界面暂不支持多选，如果需要关联多个项目需要多次点击添加关联 ","categorie":"研发规范-1.2 功能介绍-1.2.2 登记主干和Tapd"},{"route":"/docs/RD-specifications/功能介绍/登记分支.html","content":" 登记分支如果项目启用了版本管理，需要先新建一个版本 图3.1，3.2 ，再进行分支登记 图4 ，以便将分支归属到版本下。如果未启用版本管理，可以直接登记分支 图5 。 图3.1新建版本 图3.2新建版本 登记分支 有版本 图5登记分支 无版本 表单项释义 分支类型 可选工作流中配置的分支类型，每次只能登记一种分支类型的分支。 操作类型 创建新分支 分支上不存在，需要通过平台创建新分支 登记已有分支 分支已经存在于远端代码库，登记到平台上使用 代码库 当前项目下关联的代码库 源分支 当前所选代码库下， 在平台上登记过 的分支 分支名 分支名称，需符合分支类型规定的命名规范 分支成员 创建保护分支的有效，将设置为保护分支的developer TAPD需求 分支关联tapd需求 TAPD缺陷 分支关联tapd缺陷 注 如果项目未开启版本管理，关联需求和缺陷时，可以从关联的tapd项目下全部需求和缺陷中选择。如果项目开启了版本管理，则每个版本可以单独配置该所需的tapd的迭代或版本 管理粒度更精细 ，如图6.1，6.2，6.3。 图6.1关联tapd迭代 版本 图6.2关联tapd迭代 版本 图6.3关联tapd迭代 版本 批量登记支持批量登记分支，在填完表单后，点击继续登记分支 图7 。 图7批量登记分支 同一批登记的分支为同一种分支类型，关联相同的tapd需求和缺陷。同一批登记的分支默认被划分到同一个分支分组，可通过平台的接口获取一个分支分组下的全部分支。","categorie":"研发规范-1.2 功能介绍-1.2.5 分支管理-1.2.5.2 登记分支"},{"route":"/docs/RD-specifications/接口文档/使用必读.html","content":" 使用必读 hr 请求地址 http tencent.coding.oa.com api workflow rest api 请求参数 headers Content Type application jsonAuthorization tokenxxxxxxxxxx为CODING平台上申请的APITOKENHTTP X COMMON PROJECT ID 产品id，咨询reeduszhang leodjli johnqsyang 返回值 status 1表示请求成功，其他表示失败， message 请求失败时，包含出错信息， data 请求成功时，包含返回的数据 ","categorie":"研发规范-1.3 接口文档-1.3.1 使用必读"},{"route":"/docs/RD-specifications/接口文档/分支.html","content":" 分支列表 url http tencent.coding.oa.com api workflow rest api branch请求方式 GET请求参数 page 页数pageSize 每天条数，默认100version filter 按版本过滤status filter 按状态过滤branch type filter 按分支类型过滤 查询分支依赖 url http tencent.coding.oa.com api workflow rest api branch dependence请求方式 GET请求参数 repository 代码库地址branch 分支名 查询分支关联的需求 缺陷 url http tencent.coding.oa.com api workflow rest api branch storybug请求方式 GET请求参数 repository 代码库地址branch 分支名 批量扭转TAPD需求单 缺陷单状态 url http tencent.coding.oa.com api workflow rest api storybugservice update status请求方式 POST请求参数 tasks 需求 缺陷单id，json格式，如 1020422390858198531 , 1020422390858198527 type story bug status 扭转后的状态 获取需求 缺陷单关联的分支 url http tencent.coding.oa.com api workflow rest api storybugservice get branches by task请求方式 GET请求参数 id 需求 缺陷单id，json格式，如 1020422390858198527 type 0 tapd需求，1 tapd缺陷 ","categorie":"研发规范-1.3 接口文档-1.3.3 分支"},{"route":"/docs/RD-specifications/接口文档/版本.html","content":" 版本列表 url http tencent.coding.oa.com api workflow rest api version请求方式 GET请求参数 无 ","categorie":"研发规范-1.3 接口文档-1.3.2 版本"},{"route":"/docs/RD-specifications/附加参考/Git工作流介绍.html","content":" Git工作流介绍Git在使用上很注重灵活性，因此没有标准化的使用流程。使用Git管理的团队合作的项目时，重要的是要确保团队就如何应用流程达成一致，所以应制定适合团队或选择一个业界公认的Git工作流程。目前有几种公认的Git工作流程可能非常适合您的团队，接下来将简单介绍其中的一些可选的工作流程。可以混合搭配不同的工作流，以满足团队的个性化需求。 希望工作流程能够提高团队的效率，而不是限制生产力的负担。评估Git工作流程时应考虑以下几点 1.此工作流程是否与团队规模匹配？2.使用此工作流程是否能够避免不规范的操作？3.此工作流程是否会给团队带来新的不必要的认知开销？ 1.gitflowGitflow工作流定义了围绕项目发布设计的严格分支模型。这为管理大型项目提供了一个强大的框架。Gitflow非常适合具有计划发布周期的项目，是最早诞生 并得到广泛采用的一种工作流程。 1.1gitflow分支类型及功能 master develop master 长期分支，主分支，用于存储正式的发布历史记录 develop 长期分支，主分支，充当功能的集成分支 enterimagedescriptionhere feature 短期分支，合并后删除。用于新功能开发，从develop分支拉取，并合入develop分支，禁止直接与master交互 enterimagedescriptionhere release 短期分支，合并后删除。当develop分支上有了足够发布的功能 或临近预定的发布日期 ，就可以从develop分支拉出release分支。创建release分支起将开始发行周期，因此此刻之后不能添加任何新功能到release分支，release分支中仅应包含错误修复，文档生成以及其他面向发布的任务。一旦准备好发布，release分支将合并到master并用版本号创建tag。同时，应该将release分支合回develop分支 enterimagedescriptionhere hotfix 短期分支，合并后删除。hotfix分支用于快速修复生产。hotfix分支与release分支和feature分支很像，只是hotfix分支是从master拉取而不是develop分支。这是唯一应直接从master分支拉出的分支。修复程序完成后，应将release分支合并到master和develop 或当前release分支 中，并应使用更新的版本号标记master 1.2gitflow完整工作流程1.从master拉出develop分支2.开发新功能 从develop拉出feature分支，feature分支上功能开发完成后，合入develop分支3.当前版本功能开发完成后 从develop拉出release分支，release分支发布完成后，合入master和develop分支4.生产环境bug 从master拉出hotfix分支，hotfix完成后，把hotfix分支合入master和developer分支 1.3评价 1.3.1优点1.适合于 版本周期明确 的 大型 项目2.工作流设计比较完备，包含专门用于生产环境问题修复的渠道 1.3.2缺点1.开发容易忘记要从develop拉出feature分支，而是习惯从master拉取2.对于大部分项目来说，工作流程过于复杂 2.githubflowGithubflow是Gitflow的简化版，专门配合 持续发布 。是Github.com使用的工作流程。 github参考文档 2.1githubflow分支类型及功能 master 长期分支，主分支 开发分支 短期分支，合并后删除。用于功能开发 修复分支 短期分支，合并后删除。用于bug修复 2.2githubflow完整工作流程 enterimagedescriptionhere 1.从master拉出开发 修复分支2.分支开发完成后，向master发起pullrequest PR 或是mergerequest MR 3.代码合入master并重新部署，删除拉出的分支 2.3评价 2.3.1优点1.Githubflow的最大优点就是简单，对于 持续发布 的产品是最合适的流程 2.3.2缺点1.要求master分支的更新与产品的发布是一致的。但有时候代码合并进入master分支，并不代表它就能立刻发布。比如有固定发布窗口期和需要等待审核的产品2.不适合任何生产环境代码落后于master代码的情况 gitlabflow针对生产环境代码落后于master，无法使用githubflow的情况。通常，可以在master分支以外，另外新建一个production分支跟踪线上版本，这便是GitlabFlow。Gitlabflow是吸取了Gitflow与Githubflow的优点，既有适应不同开发环境的弹性，又有单一主分支的简单和便利。是Gitlab.com推荐的做法。 gitlab参考文档 上游优先Gitlabflow的最大原则就是 上游优先 upsteamfirst ，即只存在一个主分支master，它是所有其他分支的 上游 。只有上游分支采纳的代码变化，才能应用到其他分支。 3.gitlabflow持续发布 包含环境分支 3.1gitlabflow持续发布分支类型及功能 enterimagedescriptionhere master 长期分支，主分支，用于部署开发环境 pre production 长期分支，用于部署预发布环境 production 长期分支，用于部署生产环境 开发分支 短期分支，合并后删除。用于功能开发 修复分支 短期分支，合并后删除。用于bug修复 3.2gitlabflow完整工作流程 3.2.1日常开发1.从master拉出开发分支2.分支开发完成后，合入master，部署开发环境3.开发环境测试验证通过后，从master向pre production发起MR4.预发布环境测试验证通过后，将pre production分支merge到production分支 3.2.2bug修复1.从master拉出修复分支2.修复完成后，向master发起MR3.master自动化测试通过后，可将修复分支commit依次cherry pick到pre production分支和production分支4.在某些情况下，可能需要执行更多的手工测试 这导致无法执行上述的master pre production production合并的标准流程 ，那么可以从修复分支向下游分支发起MR 3.3评价1.适用于 持续发布 的项目，如web应用前后端2.持续发布的工作流只关心最新版本，对历史版本无记录 4.gitlabflow版本发布 包含发布分支 4.1gitlabflow版本发布分支类型及功能 enterimagedescriptionhere master 长期分支，主分支 发布分支 长期分支，用于记录包含次要版本的生产环境代码 开发分支 短期分支，合并后删除。用于功能开发 修复分支 短期分支，合并后删除。用于bug修复 4.2gitlabflow完整工作流程1.从master拉出开发分支2.分支开发完成后，合入master，部署开发环境3.软件要发布时，从master拉出发布分支，发布分支应包含次要版本，如 2 3 stable,2 4 stable 4.从master拉修复分支5.修复完成后，合入master测试验证6.测试验证后，把补丁代码cherry pick到发布分支，同时创建新的tag记录补丁版本号 4.3评价1.适用于 多版本并行 的项目2.发布分支应尽可能晚的创建，以最大限度地减少将bugfixes应用于多个分支所花费的时间3.发布分支拉出后，只有严重的bugfixes代码可以合入发布分支","categorie":"研发规范-1.4 附加参考-1.3.1 Git工作流介绍"},{"route":"/docs/artifacts/快速开始/Docker.html","content":" 在CODING中使用Docker制品库该文档介绍如何将Docker镜像存储在CODING制品库中。其内容包括认证配置 推送和拉取。 阅读该篇文档需要准备好以下内容 在CODING中创建一个项目 安装好Docker客户端 上传制品 UI配置在CodingCI任务配置界面，任务配置tab，添加新步骤 其他 启动流水线 docker 在插件表单中填写插件必须的参数 docker 脚本调用上传 usage qci plugincoding mirrors artifacts generic push repositoryrepository packagepackage versionversion repository 必填，软件源命名空间名称 package 必填，软件源制品仓库下的包名，对应Docker镜像的名称。 目前仅支持一级包名，即不允许出现 符号 version 选填，镜像版本，若不填则取环境变量ARTIFACT VERSION的值。均为空则默认为latest 下拉制品 登录至软件源dockerregistrydockerlogin username username password password mirrors.tencent.com 从软件源dockerregistry上pull镜像dockerpullmirrors.tencent.com repository package version username 必填，软件源平台用户名，一般为OA账号 password 必填，软件源令牌，访问 软件源网站 repository 必填，软件源命名空间名称 package 必填，软件源制品仓库下的包名，对应Docker镜像的名称。 目前仅支持一级包名，即不允许出现 符号 version 选填，镜像版本，若不填则取环境变量ARTIFACT VERSION的值。均为空则默认为latest","categorie":"制品库-快速开始-Docker制品库"},{"route":"/docs/artifacts/快速开始/Generic.html","content":" 在CODING中使用Generic制品库该文档介绍如何将Generic镜像存储在CODING制品库中。其内容包括认证配置 推送和拉取。 上传制品 UI配置在CodingCI任务配置界面，任务配置tab，添加新步骤 其他 启动流水线 generic 在插件表单中填写插件必须的参数 generic 脚本调用上传 usage qci plugincoding mirrors artifacts generic push repositoryrepository filesfiles versionversion username 必填，软件源平台用户名，一般为OA账号 password 必填，软件源令牌，访问 软件源网站 repository 必填，软件源创建的仓库地址 files 填写本次运行的工作空间路径的同级或下级的目录或文件的相对路径。支持路径通配符，支持 , 逗号分隔，使用多个通配符 version 选填，镜像版本，若不填则取环境变量ARTIFACT VERSION的值。均为空则默认为latest 下拉制品建议使用wget命令，尤其是对于大文件下载，wget可以在网络异常中断时自动续传 wget user username password password https mirrors.tencent.com repository generic repository files filename 当然，使用curl命令也是可以的 curl requestGET O u username password urlhttps mirrors.tencent.com repository generic repository files filename username 必填，软件源平台用户名，一般为OA账号 password 必填，软件源令牌，访问 软件源网站 repository 必填，软件源命名空间名称 files 必填，软件源制品仓库下的包名，对应Docker镜像的名称。 目前仅支持一级包名，即不允许出现 符号 version 选填，镜像版本，若不填则取环境变量ARTIFACT VERSION的值。均为空则默认为latest","categorie":"制品库-快速开始-Generic制品库"},{"route":"/docs/artifacts/快速开始/Maven.html","content":" 在CODING中使用Maven制品库该文档介绍如何将Maven镜像存储在CODING制品库中。其内容包括认证配置 推送和拉取。 上传制品 UI配置在CodingCI任务配置界面，任务配置tab，添加新步骤 其他 启动流水线 maven 在插件表单中填写插件必须的参数 maven 脚本调用上传 usage qci plugincoding mirrors artifacts maven push deploy typedeploy type repositoryrepository pompom settingssettings filefile versionversion deploy type 必填，deploy类型，1为deploy2为deploy file repository 必填，软件源命名空间名称 pom 选填，pom.xml文件路径。可不传，默认为在前项目根目录 在发布类型为deploy的情况下会忽略该值 settings 选填，settings.xml文件路径 file 选填，需发布的文件路径 注 该选项在发布类型为deploy file的情况下为必选项，若选择了非deploy file的发布类型将会忽略该值 version 选填，镜像版本，若不填则取环境变量ARTIFACT VERSION的值。均为空则默认为latest 下拉制品1.编辑您的 settings.xml 文件。 xml settings omittedxml profiles profile id RepositoryProxy id activation activeByDefault true activeByDefault activation repositories repository id ID id name NAME name url https mirrors.tencent.com repository maven REPO url releases enabled true enabled releases snapshots enabled true enabled snapshots repository repositories profile profiles settings 2.编辑您的 pom.xml 文件。 xml project dependencies dependency groupId GROUP ID groupId artifactId ARTIFACT ID artifactId version VERSION version dependency dependencies project 3.执行拉取命令。 shellmvninstall ","categorie":"制品库-快速开始-Maven制品库"},{"route":"/docs/artifacts/快速开始/PyPi.html","content":" 在CODING中使用PyPi制品库该文档介绍如何将PyPi镜像存储在CODING制品库中。其内容包括认证配置 推送和拉取。 上传制品 UI配置在CodingCI任务配置界面，任务配置tab，添加新步骤 其他 启动流水线 pypi 在插件表单中填写插件必须的参数 pypi 脚本调用上传 usage qci plugincoding mirrors artifacts pypi push repositoryrepository pathpath versionversion repository 必填，软件源命名空间名称 path 选填，上传目录，可选。若不传则默认为dist version 选填，镜像版本，若不填则取环境变量ARTIFACT VERSION的值。均为空则默认为latest 注意setup.py setup name值需与repository相同 下拉制品 pipinstall package upgrade ihttps mirrors.tencent.com repository pypi tencent pypi simple extra index urlhttps mirrors.tencent.com pypi simple ","categorie":"制品库-快速开始-PyPi制品库"},{"route":"/docs/ci/使用手册/handbook-menu.html","content":" 使用手册 配置文件 QCIFile 介绍 任务 凭证管理 环境变量使用文档 编译机 流水线模板 Docker指引 文件缓存及任务加速 CODING CI能力集成 CODING CI错误码释义 ","categorie":"持续集成-使用手册"},{"route":"/docs/ci/常见案例/QCI-ARS.html","content":" CODING CI对接ARS完成集成后部署针对前端 Node 及后台服务，常会有编译及自动化完成后，将编译产出物部署到测试环境及正式环境的使用场景。 ahref http ars.sng.local target blank ARS a 作为SNG内使用最为广泛的发布系统之一，CODING CI如何和ARS完成对接，较多的业务都有咨询过这个问题。此文档以两个案例为场景，介绍如何通过QCI及ARS，完成编译后的文件发布工作。 ARS提单发布 功能描述 构建完成后，将构建产出提交ARS生成ARS发布单，在ARS系统上完成后续的测试环境部署 预发布部署 正式部署等步骤，遵循完整的ARS发布流程。 适用场景 对于发布流程管控比较严格，需要遵守完整的发布过程及发布统计 想复用ARS已有的其他辅助功能，例如灰度 分批发布 回滚等。 qcifile.yml参考 yamlversion 2.0 definethestagesstages stage Webpack打包cmds cd. webpack tnpminstall tnpmrunbuild 安装node module，完成webpack打包 stage 创建ARS单cmds pip3installars client ihttp pypi.dq.oa.com simple trusted host pypi.dq.oa.com 安装ARS组件 ars clicreate p120 m270 vtest dtest cwillionpan owillionpan ffileA fileB 生成ARS单status . create ars ticket result.json 将提单结果体现到QCI页面上 点此查看QCIFile详细配置说明 点此查看ARS提单脚本详细参数说明 预期效果 创建ARS单截图 参照上述QCIFile配置生成的CI任务，会有以上两个步骤， Webpck打包 及 创建ARS单 ，其中ARS单创建完毕后，会在界面上提供 ARS单链接 的链接，用户可点击该链接，跳转到ARS系统对应的发布单，继续在ARS上完成后续的发布流程。如果创建ARS单失败，则任务失败，整个持续集成任务返回失败。 注意事项 接入业务需自行保证当前发布机器有安装好ARSAgent。 查看如何安装agent 接入业务需自行保证当前编译机 待发布文件可匹配ARS映射。 查看如何建立映射 调用ARS的提单接口需申请接口权限，请自行申请Task执行机器 qcifile.ymlLabel对应机器 的接口提单权限。 申请权限入口 为防止ARS单发布时间距离提单时间较远，业务需自行保证本次集成产出的待发布文件不会被覆盖或清理。可考虑使用QCI的artifacts下载能力作为ARS的http发布源，或事先自行将文件拷贝至其他不被清理的目录 ARS直接发布 功能描述 构建完成后，将构建产出通过ARS发布接口，直接推送至目标机器的指定目录。 适用场景 对于发布流程管控比较宽松，例如测试环境部署 不需要在ARS系统上保留发布单记录，且无需其他发布特殊功能支持。 qcifile.yml参考 yamlversion 2.0 definethestagesstages stage 后台编译cmds makeclean make 完成后台组件的编译工作 stage 测试环境部署cmds pip3installars client ihttp pypi.dq.oa.com simple trusted host pypi.dq.oa.com 安装ARS组件 ars clitransfer dest ipXXXX f build dest path data release cwillionpan uroot sync 通过ARS接口直接将文件发布到对应目标机器上status . create ars ticket result.json 将发布结果体现到QCI页面上 点此查看QCIFile详细配置说明 点此查看ARS发布脚本详细参数说明 预期效果 ARS直接发布截图 参照上述QCIFile配置生成的CI任务，会有以上两个步骤， 后台编译 及 测试环境部署 ，其中ARS单创建完毕后，会在界面上提供 发布结果 的链接，显示当前发布的结果 成功或失败IP总数 ，用户可点击该链接，跳转到ARS系统对应的发布结果查询页面，查看具体的发布日志及失败原因。如果有至少1个IP发布失败，或者在30分钟仍未发布结束 发布超时 ，则任务失败，整个持续集成任务返回失败。 注意事项 接入业务需自行保证源机器与目标机器有安装好ARSAgent。 查看如何安装agent 调用ARS的直接发布接口需申请接口权限，请自行申请Task执行机器 qcifile.ymlLabel对应机器 的直接发布接口权限。 申请权限入口 其他扩展1.以上demo均是在集成完成后，对目录对全量发布。如有业务希望针对本次提交内容做差异部署，可基于QCI提供的内置环境变量 QCI VERSION 获取到当前集成的基线号，并调用SVN Git的相关接口或命令行获取到差异文件，进而以参数形式将待发布文件或目录传递给ARS脚本，达到增量发布的目的。2.以上两种发布场景相互并不互斥，即用户可根据自身需要，在一个集成任务里设置任意个提单逻辑及直接发布逻辑。3.以上demo只包含简单的构建 发布两个步骤，业务可根据自身需要，在集成任务的任意阶段配置任意的任务，例如单元测试 代码扫描 版本归档等。","categorie":"持续集成-腾讯使用场景案例-CODING-CI对接ARS发布"},{"route":"/docs/ci/常见案例/QCI-tapd_webhook.html","content":" TAPDwebhook触发CODING CI任务 使用场景 TAPD需求单变更触发CODING CI任务 TAPDBUG单变更触发CODING CI任务 配置步骤 1.准备阶段需要事先准备一台服务器用于部署Mikit小工具 生成TAPDwebhook调用的接口 ，服务器可以在Devnet IDC或者CDC网络环境 2. Mikit平台 接入参照 http file.sng.com browse qta htdocs mikitlib lastest develop.html 网络环境 区分devnet idc cdc ，确保机器可以访问 cmq queue gz.api.qcloud.com 80api.dq.oa.com 80file.sng.com 80 安装Mikit客户端工具mikitlib pipinstall Umikitlib ihttp pypi.dq.oa.com simple trusted hostpypi.dq.oa.com 3.制作Mikit工具，生成TAPDwebhook调用的接口 1 工具制作参照 http file.sng.com browse qta htdocs mikitlib lastest develop.html可以参考实例DEMO中的Mikit工具代码 编写Mikit工具脚本代码 编写Mikit工具配置文件 2 工具调试发布 工具调试参照 http file.sng.com browse qta htdocs mikitlib lastest develop.html 工具发布参照 http file.sng.com browse qta htdocs mikitlib lastest publish.html 3 webhook接口地址生成 生成webhook地址参照 http file.sng.com browse qta htdocs mikitlib lastest develop.html 4.TAPDwebhook配置联系TAPD热线 5001 ，提供以下信息给TAPD热线 提供要监听的项目ID 事件 需求创建 需求更新 需求删除 缺陷创建 缺陷更新 缺陷删除 任务创建 任务更新 任务删除 发布评审创建 发布评审更新 自定义对象实例创建 自定义对象实例更新 自定义对象实例删除，可多选 接收数据的URL 验证密码 非必选，给接入方验证请求是否来自TAPD 数据格式 非必选，可选有json form，默认为form形式 TAPDwebhook指引文档 http km.oa.com group 20683 articles show 301061 实例DEMO CVMFT提测自动化流程CVMFT提测自动化流程为 TAPD需求单扭转为“转测试”时通过TAPD的webhook触发CODING CI任务，该任务完成测试环境部署 QTA自动化测试 自动扭转TAPD需求单和BUG单状态等。CVM自动化提测pipeline如下 image.png 其中触发CODING CI任务的TAPDwebhook对应的Mikit工具代码为 tapd webhook.zip ","categorie":"持续集成-腾讯使用场景案例-TAPD webhook触发CODING-CI任务"},{"route":"/docs/ci/常见案例/public-account.html","content":" 公共账号申请指引 hr 背景 hr 使用SVN管理代码库的项目，或不希望使用OAuth2授权的TGIT项目接入CODING CI时，需提供账号密码授权CODING CI访问代码库。 授权账号可以使用个人的域账号，但个人账号需定期修改密码，很不方便。 建议申请一个公共账号来授权，公共账号在项目组内使用，自行维护，降低安全风险。 公共账号需有拉取代码的权限 公共账号申请步骤 hr 第一步 申请一个业务邮箱账号作为项目公共账号 申请入口在 办公流程审批系统 IT流程 01 业务邮箱账号申请,如下图所示 业务邮箱账号申请 申请页面如下所示，填写账户名 发送频率和用途后提交，审批通过即可 业务邮箱账号申请 第二步 SVN 授权。若使用SVN托管代码库，需 将业务邮箱账号申请设置为SVN公共账号，申请流程参见 SVN公共账号申请 。注 申请时需填写使用IP，填一个自己项目平时会拉代码的IP即可，不需要填所有使用IP。 在code.oa.com上给账号添加只读权限 业务邮箱账号申请 第二步 TGIT 授权。若使用TGIT托管代码，需 首先将业务邮箱账号设置为公共账号，设置入口如下图所示 业务邮箱账号申请 给需要接入的项目授权 业务邮箱账号申请 注 若使用代码提交 打标签 合并请求等webhook方式触发任务，必须有master或owner的权限，否则reporter即可","categorie":"持续集成-腾讯使用场景案例-公共账号申请指引"},{"route":"/docs/ci/快速入门/QCI-concept.html","content":" CODING CI基本概念介绍 什么是CI 持续集成 ，CD 持续交付 Insoftwareengineering,continuousintegration CI isthepracticeofmergingalldeveloperworkingcopiestoasharedmainlineseveraltimesaday...Extremeprogramming XP adoptedtheconceptofCIanddidadvocateintegratingmorethanonceperday perhapsasmanyastensoftimesperday. Continuousdelivery CD isasoftwareengineeringapproachinwhichteamsproducesoftwareinshortcycles,ensuringthatthesoftwarecanbereliablyreleasedatanytime.Itaimsatbuilding,testing,andreleasingsoftwarewithgreaterspeedandfrequency.Theapproachhelpsreducethecost,time,andriskofdeliveringchangesbyallowingformoreincrementalupdatestoapplicationsinproduction.Astraightforwardandrepeatabledeploymentprocessisimportantforcontinuousdelivery.参考维基百科中 持续集成 和 持续交付 的定义，持续集成号召所有的开发团队都将开发副本对齐至一个统一的主线版本 主干 ，而且频繁的 至少一天一次 合入到主干。合入后的代码经过编译集成及自动化测试后，可快速输出一个有质量保证的版本，提供后续环节进行审批及发布部署。开发分支频繁合入主干带来的主要优势有 1.保证开发分支与主干差异不会太大。多人协作开发时，如果分支与主干差异过大，极易出现代码重复和覆盖情况2.快速发现问题。当开发完成部分功能开发后，即可合入主干进行测试或体验效果，出现问题后可快速定位问题原因。 “ContinuousIntegrationdoesn tgetridofbugs,butitdoesmakethemdramaticallyeasiertofindandremove.” MartinFowler,ChiefScientist,ThoughtWorks 3.提升测试效率。基于CI及增量测试技术，可以将每次集成后的代码内容进行测试，测试周期分散到更长阶段，相比于整个功能上线后的完整测试质量和效果更高。4.持续的交付物产出。通过CI可每次输出集成测试通过后的交付物，为加速产品上线周期提供可能。 CI CD示意图以下是CI，CD及其他一些软件工程研发效率领域常出现的几个概念 敏捷开发，持续部署，DevOps 的示意图 CICD示意图 CODING CI的价值从概念和示意图上来看，无论是CI还是CD，它除了构建之外都应该还包含自动化测试 版本归档 发布部署等流程，能做到从代码到版本库及测试环境 甚至正式环境 的串联打通。而目前公司内的CI CD现状更倾向于 1.持续集成系统只关注构建，提供下载构建产出物的接口，下游工具自行监控构建结果 拉取构建产出进行测试 归档或部署2.各BG各部门的自动化测试 归档 部署的功能种类繁多，但相互之间联系较少，因此项目团队需要到不同的工具平台操作和查看结果，使用成本较高3.由于各平台并未打通数据相互隔离，项目团队很难清晰的对版本质量进行整体把控，开发及运营也无法清晰的了解到当前哪个基线版本是测试通过的，为版本发布带来风险基于以上现状，CODING CI从 流程串联 及 数据整合 的这两个角度出发，打造一个更纯粹的持续集成 持续交付平台，它具备以下特性及优势 1.CI CD任务支持流水线作业，业务可自行将任务划分成若干阶段 流水线形式 ，满足各研发环节的界定和串联2.相比以往平台封闭内置能力相比，CODING CI提供更开放的自助接入能力。业务可根据自身需要将自动化工具接入到CI CD任务中，满足各类自动化工具组合诉求3.约定工具数据汇报展示方案，可在CODING CI平台上快速浏览整个CI CD流程的核心关键信息，并提供详细信息的跳转链接，辐射关联其他更丰富的内容。4.基于docker容器的集成任务。相比以往需要自行提供编译机接入的CI CD系统不同，CODING CI满足业务提供docker镜像，以容器的方式完成项目的整个CI CD任务，降低接入成本。5.支持docker镜像的编译。基于dockerfile完成镜像编译并提交到任意dockerhub 支持内外网 6.集成任务加速。业务可针对任务特性，自助的将集成任务中间结果缓存，在任务内及任务间复用，从而达到任务加速的功能。此外CODING CI还通过磁性分发 workspace缓存等管理方式，对集成任务静默提速。 CODING CI关键术语定义CODING CI中定义几个基本概念示意图如下 Pipeline示意图 PipelinePipeline本意是指流水线任务，即整个CI CD任务像是在管道中似的逐步推进。而在CODING CI中，每个CI CD任务我们都定义成一个pipeline，大家可以把任务定义成多个阶段串行的流水线任务 当然也可以只有一个阶段 ，各个阶段顺序执行，任意阶段执行失败后，任务不再继续执行，整个Pipeline执行失败 StageCODING CI中的Pipeline中的每个阶段，我们称之为Stage。可以用Stage来定义及划分CI CD中的不同流程状态，例如“编译阶段” “测试阶段” “发布阶段”等。一个Stage下可以有多个task 任务 ，各个task并发执行相互独立。任意task失败后，不影响其他task继续执行，但整个Stage会标记为失败。全部task成功后，Stage视为成功。 TaskTask是CODING CI下的最小执行粒度，每个Task代表着CODING CI中的一个任务单元 包括自动化及手工任务 ，例如“项目构建” “单元测试” “人工确认”等。自动化任务中，每个Task可以由多个执行命令 cmd或bat 来组成。各个命令顺序执行，任意命令执行失败 返回非0 后，则中止后续命令执行，task返回失败。所有命令全部执行成功后，task视为成功。 ArtifactsArtifacts代表当前CI CD任务的结果产出，可提供用户在界面上进行下载。在任意Task中，业务均可自行指定当前任务执行结束后，在执行机上哪些文件或目录可作为构建产出物。CODING CI平台会将指定的文件 或目录下所有文件 进行持久化存储并提供界面及接口的下载。 artifacts Cache用户可在任意Task中将部分文件 例如编译中间文件 编译证书文件 依赖包等 进行缓存。后续在任意时间执行相同的Pipeline时，CODING CI可直接复用该缓存，减少中间文件或依赖文件的重新生成时间，从而达到集成加速效果。 点此了解更多 Temp由于CODING CI采用分布式执行方式，在pipeline的不同Stage及task执行时，他们可能会分配到不同的执行机上去执行任务，为保证上游任务的结果产出下游可继续复用，用户可在任意Task中将部分文件 例如任务执行产出文件 临时文件 进行缓存。下游Stage的各Task在执行时，QCI会将这部分缓存文件拷贝到执行机上，从而提供各个任务在同一台任务上执行的体验。与Cache不同的是，Temp文件仅在一次pipeline执行中生效，Pipeline结束后Temp文件将会删除。 Workspace在任务执行机上，所有任务执行的根目录。CODING CI会将业务的代码从SVN或Git下拉到本地，所有Task的命令也会在该目录下运行。建议所有脚本逻辑都应该基于workspace下的相对目录执行，脚本逻辑触达到workspace之外的目录，将会导致不可预期的执行结果。","categorie":"持续集成-快速入门-基本概念"},{"route":"/docs/ci/快速入门/QCI-first-steps.html","content":" CODING CI快速接入示例 hr 前言此文档提供一个集成任务快速接入 CODING CI平台 的示例，引导用户快速创建可执行的CODING CI任务。通过浏览此帮助文档，了解CODING CI的基本概念和任务配置的详细说明。1 进入CODING平台 http tencent.coding.oa.com user ，选择对应的项目后，点击左侧边栏的 构建与部署 模块中的“构建”，点击 新建任务 按钮，创建任务。 pipeline接入指导01 2 进入创建任务界面，快速体验可以依次输入任务名，选择不使用代码库，UI配置流水线，公共执行机和通用环境 pipeline接入指导02 3 提交并前往任务编辑页面，新建一个stage，stage里面可以新建task，点击新建的stage下的第一个task pipeline接入指导06 配置task的执行内容task名称 测试命令行 echo helloCODING CI 其他配置均使用默认，点击右上角的 保存并前往任务页 pipeline接入指导07 CODING CI支持的丰富的插件库，也支持简单的接入新的插件，详情可查看 CODING CI的集成插件 pipeline接入指导07.02 4 执行任务，任务页面可以执行任务 配置任务和查看任务的执行详情 执行历史等 pipeline接入指导08 快速跳转链接 1. CODING CI平台新建任务 2. QCIFile语法参考 可以查看CODING CI支持的更多的功能3. CODING CI编译机接入 ","categorie":"持续集成-快速入门-快速接入"},{"route":"/docs/ci/规范与建议/versioning_recommendation.html","content":" 版本号规范建议版本号规范的重要性往往容易被忽视。然而，不论对ToB还是ToC业务而言，不规范的版本号使用都将会带来多方面的影响。为此，我们以 语义化版本号规则 为参考基础，结合若干项目实践，提供以下版本号规范建议，希望能够为有需要的项目提供帮助。 简而言之外显版本号 主版本号.次版本号.修订号 附加说明 内部版本号 主版本号.次版本号.修订号.构建号 附加说明 示例 9.0.5 3.1.0 ICBC 5.2.15.63 8bc6fdc3 20190510114705 其中 外显版本号 发布后 如官网 AppStore等 展示给用户的版本号。 内部版本号 更为详尽的版本信息，在“关于” “ version”展示，及用于安装包名称等。 版本号提升 主版本号 与旧版不兼容的特性，或者重磅功能 想给用户留下深刻印象 例如新年版本 次版本号 常规功能增加和修改，并且没有兼容性问题 修订号 缺陷修复，并且没有兼容性问题 构建号 每次构建递增 附加说明 按需添加额外的标识，如客户标识 commit号 日期时间等。 版本号规范1. 划分外显版本号和内部版本号 外显版本号 是交付到客户手中或发布到官网 AppStore等之后显示给用户的版本号，一般采用 三段式 ，如9.0.5 必要时可带上附加标识，比如客户标识，3.1.0 ICBC。 内部版本号 包含更为详尽的信息，用于安装包命名 在“关于” “ version”展示等。1. 除附加说明外，数字版本号必须是非负整数，并且每段开头不用占位的0 例如， 9.0.5 是OK的，但 9.0.05 是不规范的，最后的 05 须改为 5 。1. 各段版本号必须能够支持超过1位数字 程序在规划设计时就应该考虑这一点，不能乐观地认为每段版本号只要1位就足够了，比如只能支持 9.0.5 ，而支持不了 9.10.1 73.10.152 。1. 发布的主版本号必须大于等于1 在初始开发阶段，可以采用像0.5.1这样的版本号，一些开源项目也喜欢这样做。但是，正式发布时主版本号须大于等于1 如 1.0.0 。1. 一个版本发布后，其内容不能再修改，任何改动都必须发布一个新版本 不要给用户带来惊吓 用户无论什么时候取 9.0.5 版本，它的功能都是一样的，不能出现 今天的 9.0.5 版本 比 昨天的 9.0.5 版本 多了或少了功能的情况。1. 构建号随着每次构建而递增 构建号也称Build号 BuildNO，必须是逐次递增，主流CI平台都提供这类数字。1. 常规bugfix提升修订号 常规bugfix 指修复缺陷并且不会引入新特性或造成兼容性问题，否则就要评估提升次版本号或者主版本号。1. 常规特性发布提升次版本号 次版本号也称为特性版本号 功能版本号。 常规特性 指新增特性或修改原有特性，并且是向前兼容的。 常规特性发布 除了新增 修改的特性，可以同时带上 常规bugfix 。当 次版本号 提升时， 修订号 须重置为 0 ，例如 9.0.5 9.1.0 。1. 引入不兼容的特性或者有重大亮点时才提升主版本号 当引入不兼容的特性时 像Python2.7.x与Python3.x ，必须提升主版本号。当汇集了重大亮点功能，想给用户带来深刻印象时 例如某版本汇集X Y Z重磅功能于一身，自信必成一代爆品 ， 可以 提升主版本号。 提升主版本号 时除了不兼容的特性，可同时带上 常规特性 和 常规bugfix 。当 主版本号 提升时， 次版本号 修订号 须重置为 0 ，例如 9.2.7 10.0.0 。1. 可按需要添加附加说明 附加说明是为了更好地说明用途 与代码库的联系 以及其它对项目有意义的信息，比如客户标识 commit号 日期时间 哈希值 安卓versioncode等。附加说明多用于 内部版本号 ， 外显版本号 除非确有必要 例如特定客户的专用版本 否则不用。附加说明只能使用 ASCII字母数字 点号 . 连字符 ，即 0 9A Za z . 。避免特殊字符和非ASCII字符 比如中文 日文 ，以免在不同系统平台 程序上造成展示和使用问题。 示例 3.1.0 ICBC 5.2.15.63 8bc6fdc3 20190510114705 1.2.0.55 r1366 sha.f480b914 1. 版本号大小根据主版本号 次版本号 修订号 构建号按优先级从高到低进行对比 判断版本号大小时，取出 主版本号 次版本号 修订号 构建号 按优先级从高到低进行对比，附加信息不作为版本号大小判断依据。例如 1.0.0.22 1.1.9.5 1.1.10.1 r2196 20190510 2.0.0.33 r1728 20190421 br 更多详情，请参考 http km.oa.com group csigscm articles show 378371","categorie":"持续集成-规范与建议-版本号规范建议"},{"route":"/docs/code-analysis/ci/README.html","content":" 在持续集成中使用代码分析 在流水线中配置首先需要创建一个集成任务，点击左侧边栏的 持续集成 模块中的“流水线”，新建一条流水线，并选择代码源和希望扫描的代码库，创建后在流水线配置中添加新阶段，并选择CodeDog代码分析插件。只有指定了代码库的流水线才能够进行代码分析，否则将无法保存。 创建集成任务 如果你的代码库已经在代码分析中关联过，并且已经有了自己希望应用的扫描方案，那么可以在页面上选择这个扫描方案。 选择扫描方案 如果是从没进行过扫描的代码库，可以在页面上点击创建扫描方案跳转到代码分析模块中添加扫描方案。完成扫描方案配置后在流水线选择即可。 了解扫描方案 在流水线模版中配置首先需要创建一个模版，点击左侧边栏的 持续集成 模块中的“流水线模版”，新建一个流水线模版，并选择代码源和希望扫描的代码库，创建后在流水线配置中添加新阶段，并选择CodeDog代码分析插件。如果你已经知道需要应用该模版的代码库，并且这些代码库有相同名称的希望扫描的扫描方案。那么可以直接在插件中填入该扫描方案即可。 编辑流水线模版 如果你已知需要应用该模版的代码库的语言类型，可以在页面上直接指定语言和官方推荐的扫描方案。如果你需要应用该模版的流水线涉及到不同语种的代码，那么可以选择自动识别语言，我们会识别出占比前三名的语言并根据你选择的官方扫描方案进行扫描。假如被识别出来的语言并没有你选择的方案对应则会跳过该方案，不被扫描。 自动识别语言 在插件中配置通过指标通过指标是指代码库中代码扫描发现的问题结果需要满足的条件，如果未满足，会导致代码分析插件无法通过。代码检查指标主要对代码检查问题的数量控制，保证总问题数和新增问题数在一定范围内。代码度量指标主要包括对圈复杂度和代码重复率的控制。代码平均圈复杂度表示全部方法的平均圈复杂度 超标方法平均圈复杂度度则仅关注超标方法的平均值。代码重复率表示所有重复文件总行数除以代码总函数乘以100，单位是一个百分比。遇到输入框需要填写数值的情况，不建议填写0以及非负数，否则会默认视为无效 注意事项如果是编译型语言 C C C Java Objective C Scala Swift VisualBasic ，codedog需要捕获编译过程的中间信息，建议将codedog扫描放在流水线的编译构建步骤之前，以免影响codedog扫描结果的完整性。 官方扫描方案介绍扫描方案是代码分析的规则和指标的集合，同时也说明扫描范围， 详情参考 云代码质量分析 针对云相关业务推荐的扫描方案模版，包含基础规则包及Xcheck安全扫描，圈复杂度及代码统计检查。如果业务关注不在该范围内的检查，可以在此基础上增加检查项或者调整扫描参数。 开源治理 通过建设度量体系，牵引研发质量提升，协同效果落地，不断改善技术氛围，目前主要用于Oteam，并逐步推广至所有开源项目的度量。主要包含腾讯代码规范扫描 圈复杂度及代码统计相关扫描。 Xcheck安全 CSIG安全专项测试组研发的静态应用安全测试 SAST，Staticapplicationsecuritytesting 工具，安全发现业务代码中的安全风险。目前支持的语言包括Python Node.js Golang Java PHP，支持常见的Web安全漏洞扫描，例如命令注入 SQL注入 XSS XXE URL跳转 目录穿越 SSRF 反序列化 模板注入。 腾讯代码规范 根据代码规范OTeam给出的各语言代码规范指引输出的代码分析配套规则包。 点击查看代码规范详情 。插件中选择默认为全量规则，根据公司Oteam的建议，存量项目可以选择存量项目规则包，存量规则包的扫描范围范围小于可以按需到代码库的扫描方案 代码检查 规则配置中进行规则包的调整。注意部分语言需要补充环境变量才能准确扫描。环境变量中配置内容如下 Java 使用全量规则扫描配置 CHECKSTYLE TYPE tencent使用存量规则扫描配置 CHECKSTYLE TYPE tencent stock JavaScript语言 目前支持部分规范，支持react vue 使用全量规则扫描配置 ESLINT JAVASCRIPT CONFIG TYPE tencent使用存量规则扫描配置 ESLINT JAVASCRIPT CONFIG TYPE tencent stockVue项目代码分析配置 ESLINT JAVASCRIPT CONFIG TYPE tencent vueESLINT JAVASCRIPT EXT .js,.jsx,.vue Python 需要配置 PYTHON CONFIG TYPE tencent默认为Python3。如希望扫描python2代码，配置PYTHON VERSION 2 开源检查 包括对内对外开源检查两个规则包。规则范围包括敏感信息查询 开源协议检查 脏字检查等功能。可以根据需要进入代码库的扫描方案 代码检查 规则配置中根据对内开源或者对外开源选择响应的规则包进行扫描。插件中默认是两个规则包全部开启。 推荐 根据多年来业务使用过程中对规则的认可度，包括不限于规则的有效性 误报率 执行耗时等多方面的考量精心筛选出的代码规则包。如果是编译型语言 例如Java 希望使用该规则包，则需要提供编译相关信息，用于对代码进行进一步的分析。需要在扫描方案中的代码检查中提供编译命令等信息。","categorie":"代码分析-持续集成和代码分析-持续集成中使用代码分析插件"},{"route":"/docs/code-analysis/codelint/config.html","content":" 代码检查扫描配置 CodeDog采用业界 自研的80 款工具，配置代码检查项能够有效地发现代码中存在的异味代码代码检查设置主要包括工具规则的配置和扫描环境的基础配置两部分。可参考 扫描方案 代码检查 规则配置规则配置主要是以规则包为元素，由官方规则包和自定义规则包两部分组成。平台提供一些系列的官方规则包，覆盖代码规范 安全 开源等方面。 代码规范 支持 腾讯代码规范 的检查，详情参考 腾讯代码规范 进行扫描。 查看更多 安全 提供安全相关的扫描，例如 sql 注入 跨站脚本攻击 。 查看更多 开源 提供代码开源的必要检查，包括 开源协议检查 脏字检查 编码规范 等方面。 查看更多 基础 无需编译，适合初级用户，快速检查代码并且熟悉扫描流程。 查看更多 推荐 适合中级用户，编译性语言需要提供编译命令，对编译环境有要求。 查看更多 NOTE style flat 用户可以根据需要选择官方规则包进行扫描，并可以在官方规则包的基础上屏蔽某些规则或者调整默认的优先级，设置指定参数。这些操作都会记录在自定义规则包中。 自定义规则包则用于给用户自选规则和工具。并且记录对官方规则包的修改，当自定义规则包中的规则和官方规则包的规则发生冲突，则以自定义规则包优先级更高。 基础配置基础设置用于设定是否开启代码检查，并且用于选择编译型工具的扫描方案设置编译环境等。","categorie":"代码分析-代码检查-代码检查扫描配置"},{"route":"/docs/code-analysis/codelint/result.html","content":" 代码检查结果查看启动CodeDog代码扫描后，如果含有代码检查功能，则代码分析结束后会上报结果信息到CodeDog平台，用户可在平台上查看问题列表及详情。 问题列表进入代码检查问题列表页面后，默认展示当前分支 当前扫描方案 即分支项目 发现的全部未处理问题。如果仅希望查看增量问题，可以进入扫描任务页面，指定查看某一次的扫描结果即可。也可以在过滤筛选项中填入发现问题的扫描 id 进行筛选查看结果 该 id 为扫描任务ID，需要到扫描任务列表中查询 。 责任人说明 责任人为 gitblame 操作得到的代码提交人，如果发现非企业微信名称，则可能开发自己做了名称修改，需要联系开发在git中改为用企业微信名称提交代码。 问题级别说明 代码检查的问题级别是根据对应扫描方案中规则设置的严重级别定义的，从高到低分为 致命 错误 警告 提示 。如果调整问题级别，则需要进入扫描方案中调整这个规则的严重级别，调整后需要进行全量扫描使得调整生效。 批量处理说明 问题列表支持批量修改问题状态。关联TAPD后也可以批量处理问题，如果是已经提单到TAPD的项目也会同步更新TAPD。 批量处理 问题详情可以查看代码详情，将一个文件内的同一规则的问题聚合在一起展示。点击规则信息可以查看规则说明，部分规则还提供了修改建议。 TIP style flat 规则说明中的信息是该规则的原始详情信息，如果在扫描方案中修改了该规则的相关信息 如严重级别 参数等 ，此时请忽略该原始信息与扫描方案对应规则信息不匹配问题。 此处提供查看规则信息主要是提供规则的说明和修改建议。 查看规则详情 规则详情 ","categorie":"代码分析-代码检查-扫描结果查看"},{"route":"/docs/code-analysis/codemetric/summary.html","content":" 功能介绍功能包括 圈复杂度检查 重复代码检查 代码统计 。配置参考 扫描方案 代码度量配置 圈复杂度圈复杂度 CyclomaticComplexity ，也称为条件复杂度或循环复杂度，是一种软件度量，一种代码复杂度的衡量标准。它可以用来衡量一个模块判定结构的复杂程度，数量上表现为独立执行路径条数，也可理解为覆盖所有的可能情况最少使用的测试用例数，即合理的预防错误所需要测试的最少路径条数。圈复杂度大说明程序代码的判断逻辑复杂，可能质量低且难于测试和维护。程序的可能错误和高的圈复杂度有着很大关系。业界建议圈复杂度控制在10，有些项目会放松到15.目前考虑大部分项目是刚刚进行圈复杂度检查，所以CodeDog将该检测值设置为20，业务可以按需调整，逐步优化代码质量。 重复代码在 SoftwareCloneDetectionandRefactoring 一文中，对重复代码的类型进行了定义 1.完全一致的代码或者只修改了空格和评论2.结构上和句法上一致的代码，例如只是修改了变量名3.插入和删除了部分代码4.功能和逻辑上一致的代码，语义上的拷贝对项目定期进行重复代码可以帮助开发发现冗余代码，进行代码抽象和重构，便于管理维护代码。 代码统计支持全量增量展示代码行数统计，可以按语言查看占比。","categorie":"代码分析-代码度量-功能介绍"},{"route":"/docs/code-analysis/codetools/summary.html","content":" 功能介绍目前扩展功能包括 代码热区分析工具 代码统计工具 代码热区分析工具代码热区分析工具，通过可视化的方式展示了代码的变更频率，可用于识别代码的风险程度1.点击启动任务按钮，输入相关参数，启动扫描 2.任务启动后点击 扫描详情 可查看任务执行详情 3.点击 下载结果文件 ，下载文件后，点击 数据解析器 ，将文件拖拽或者上传到指定位置，查看结果 4.圆圈的颜色越深代表代码变更越频繁，半径越大代表代码行数越多，点击圆圈可查看具体文件名 代码统计工具统计指定时间内代码提交行数和问题数据，使用方式同代码热区分析工具，代码统计工具无数据解析步骤。","categorie":"代码分析-扩展功能"},{"route":"/docs/code-analysis/quickstart/introduction.html","content":" 功能介绍 代码检查不运 代码的 式下，对代码扫描分析检查。涉及词法分析 语法分析 控制流 数据流分析等技术，检测代码规范性 安全性 可靠性 可维护性 潜在Bug等指标。常见的检查项包括 空指针异常 资源释放 未使用代码 死循环 高危函数 魔法数字等。 代码度量 圈复杂度圈复杂度是一种代码复杂度的衡量标准。可以用来衡量一个模块判定结构的复杂程度，数量上表现为独立执行路径条数，也可理解为覆盖所有的可能情况最少使用的测试用例数，即合理的预防错误所需要测试的最少路径条数。圈复杂度能指导我们做什么 圈复杂度高的模块和方法，其缺陷个数往往也多，需重点关注。可指导测试用例设计，创建数量与被测代码圈复杂度值相等的测试用例，以此提升用例对代码的分支覆盖率。持续集成环境中，可评估模块或函数的复杂度和增长值。遇到圈复杂度高的函数该怎么处理 重构函数 提炼函数，替换算法简化条件表达式 逆向表达，分解条件，合并条件，合并条件，以多态取代条件式简化函数调用 读写分离，参数化方法，以明确函数取代参数支持的语言包括C C Java JavaScript Objective C PHP Python C Ruby Go Lua Swift 重复代码重复代码表示一段源代码在一个程序，或者一个团体所维护的不同程序中重复出现，是不希望出现的现象。Don tRepeatYourself 支持的语言包括C C Java JavaScript Objective C PHP Python C Ruby Kotlin Go Swift 代码统计代码统计可以帮你统计各个目录下的代码数量及变更情况。 了解完全部功能，快速开启一次代码分析吧。 ","categorie":"代码分析-快速入门-功能介绍"},{"route":"/docs/code-analysis/quickstart/quickstart.html","content":" 如何启动一次代码检查 关联代码库首先需要将希望扫描的代码库进行与Coding平台关联。 关联代码库 开启第一次代码分析完成关联后，点击进入代码分析，开启第一次CodeDog代码分析。 开启代码分析 选择需要扫描的代码库和分支 进行扫描方案配置 选择扫描语言。注意语言决定了扫描的内容，需要按需填写。 选择运行环境。选择该代码库通常执行的环境，如果没有特定的环境，建议优先选择CodeDog Linux。 如果不希望使用我们提供的公共机器，或者对性能和扫描速度有要求，则可以填加专机， 点击查看专机接入操作指引 。 选择开启希望扫描的功能 代码检查 圈复杂度 重复代码 代码统计。 启动扫描我们会根据你的这次操作生成一个扫描方案。后续还有其他分支希望用同样的方案扫描。则可以直接添加分支项目并选择这个默认的扫描方案进行扫描。 了解扫描方案 查看分支概览进入分支概览可以查看该分支指定扫描方案的概览数据。 分支概览 ","categorie":"代码分析-快速入门-快速启动一次代码分析"},{"route":"/docs/code-analysis/repomanage/branchproj.html","content":" 分支项目定义 分支项目是由代码库的某个分支 eg master 与某种扫描方案构成的一个扫描项目 NOTE style flat 分支项目 分支 扫描方案","categorie":"代码分析-代码库管理-分支项目"},{"route":"/docs/code-analysis/tencentstandards/README.html","content":" 腾讯代码规范介绍 背景腾讯代码规范OTeam旨在联合腾讯各大BG，制定公司统一的代码规范，推广公司统一的编码风格，减少开发人员间的代码风格差异，消除团队间差异。并以此为出发点，普及代码质量意识，推广代码文化，推进跨业务间CodeReview，以此提升公司开发人员的整体代码质量。 各语言规范说明 语言 规范详情 C https git.code.oa.com standards cpp Java https git.code.oa.com standards java JavaScript https git.code.oa.com standards javascript Objective C https git.code.oa.com standards oc Python https git.code.oa.com standards python C https git.code.oa.com standards csharp Go https git.code.oa.com standards go CodeDog扫描支持CodeDog针对腾讯代码规范准备了各语言的规则包。并针对存量代码库和普通代码库分别给出两套规则包供选择。 点击查看如何扫描 ","categorie":"代码分析-腾讯代码规则扫描-腾讯代码规范介绍"},{"route":"/docs/code-analysis/tencentstandards/guide.html","content":" 腾讯代码规范扫描指引 页面启动扫描 未关联代码库 如果尚未在Coding上关联过代码库，则需先进行关联操作。 已关联代码库 关联后点击进入代码库，进入扫描方案菜单并创建一个新的扫描方案, 查看扫描方案介绍 。需要开启 代码检查 功能，并 选择规范标签 然后需要开启 代码统计 功能。然后进入左侧分支项目菜单中点击添加分支项目，选择需要扫描的分支和已经创建好的扫描方案启动扫描即可。 添加分支项目 注意，如果包含Java和JavaScript语言需要在环境变量中增加一条配置。 JavaScript扫描需要在环境变量中配置 ESLINT JAVASCRIPT CONFIG TYPE tencent Java扫描需要在环境变量中配置 CHECKSTYLE TYPE tencent JavaScript配置 CI流水线中配置代码规范扫描","categorie":"代码分析-腾讯代码规则扫描-腾讯代码规范扫描指引"},{"route":"/docs/code-analysis/toolmanage/addtool.html","content":" 工具开发规范代码分析除了提供丰富的内置扫描工具和规则，还支持用户自定义工具和规则，定制更适合业务自身的扫描能力。代码分析目前支持的自定义工具 规则方式包括以下两类 自定义正则规则 自定义工具，均可以通过用户自行配置完成整个接入流程。 自定义正则规则 hr 适用场景 通过一条正则表达式，能够匹配到目标代码的情况。 hr 1. 添加规则 进入代码分析 工具规则，进入工具列表，筛选出RegexScan工具。 RegexScan工具 进入RegexScan工具的规则列表，并点击右侧添加规则 添加自定义规则 2. 填写规则信息 按照需求填写相关信息完成配置。 规则示例 规则扫描场景 扫描代码中的usleep 方法调用，如果参数小于100，容易造成CPU使用率过高，造成性能浪费，判断为缺陷。 正则表达式 匹配usleep 字符串，括号中的内容为1位或2位整数，那么正则表达式可以写成 busleep s s d 1,2 s ，这里考虑了字符串中存在空格的情况。 NOTE style flat 建议先测试好正则表达式是否正确，正则表达式测试网站推荐 http tool.oschina.net regex 添加规则内的字段说明 规则名称 前端展示名称 建议使用单词首字母大写的格式，如UsleepMethod规则简述 作为扫描出来到问题标题规则参数 1.参数格式类似ini的格式，也就是key value的格式2. 必选 regex参数，用于指定扫描的正则表达式，例如 regex busleep s s d 1,2 s 。3. 必选 msg参数，用于展现issue说明，例如 msg 函数方法 s已经废弃，请使用xxx方法。 msg中的“ s”使用regex中的group 用“ 括起来的部分 一一匹配。 如果regex没有定义group，则msg最多有一个 s,并由整个regex匹配的字符串替代 如果msg里没有包含“ s”，则直接显示msg 如果msg没有提供，则默认为“发现不规范代码 s” 不建议使用默认格式，太笼统 4. 可选 ignore comment参数，用于指定是否忽略注释代码，可选值 True true False false。例如ignore comment True,默认是False5. 可选 include参数，用于将指定扫描文件匹配范围，使用unix的文件匹配格式，多项使用英文分号 隔开。例如 include path to dir path to .cpp 6. 可选 exclude参数，用于指定不扫描的文件。格式参考include参数。3. 将自定义规则添加到项目扫描方案中 进入代码库 扫描方案 代码检查 查看 编辑规则，添加规则。 自定义工具适用场景 简单正则表达式无法满足，需要更多的代码逻辑来匹配目标代码的情况。只需要几步操作 1.编写代码，实现扫描工具逻辑2.提交工具到git代码库3.并在页面上创建新工具4.为工具添加规则5.在项目扫描方案中添加规则以下是具体操作步骤 1. 编写代码，实现扫描工具逻辑 根据需要匹配的目标代码场景，编写对应的工具逻辑。可以参考Python写的 Demo项目 要求 运行方式 支持命令行执行，比如 pythonrun.py 或 run.exe ，执行命令的工作目录为工具代码的根目录 CodeDog提供环境变量 使用方式请参考Demo项目 BASHSOURCE DIR 要扫描的代码目录路径DIFF FILES 增量文件列表TASK REQUEST 任务参数json文件路径 在代码中通过环境变量获取，比如python代码 pythonimportossource dir os.environ.get SOURCE DIR ,None 输出 结果输出到当前工作目录下的 result.json 文件中，比如Python代码 pythonimportjsonwithopen result.json , w asfp json.dump result,fp,indent 2 result.json 文件格式如下 json path 文件绝对路径 , line 行号 , column 列号,可以直接写0 , msg 提示信息 , rule 规则名称,可以根据需要输出不同的规则名 , refs line 回溯行号 , msg 提示信息 , tag 用一个词简要标记该行信息，比如uninit member,member decl等，如果没有也可以都写成一样的 , path 回溯行所在文件绝对路径 ,... , ... ,... 说明 refs 可选，记录问题回溯路径信息。比如当前文件的回溯路径其他的3行代码，可以将这三行的路径及提示信息，按顺序添加到refs数组中。2. 提交工具到git代码库 1 在git.oa.com上创建一个新代码库，将工具源代码或编译打包后的可执行文件，提交到git代码库中 代码库中建议添加上README.MD文件，说明工具功能和维护人 2 将 codepuppy 账号添加为git代码库成员，赋予 reporter 权限 3 后续需要修改规则实现逻辑，可以直接更新代码库，CodeDog会拉取最新代码执行3. 在codedog页面创建新工具 1 进入工具规则页面，点击 添加工具 页面手动添加工具 2 在添加工具页面，填写工具信息参数说明 工具名称 工具的唯一标识 前端展示名称 工具在页面上展示的名称，可以与工具名称相同或不同，建议使用单词首字母大写的格式 License 如果是开源工具，填写工具遵循的开源协议，没有可不填 工具描述 简单说明工具的功能等 工具Git仓库地址 即之前提交的工具git代码库地址 工具执行命令 该命令的工作目录为拉取后的git工具库根目录 环境变量 工具执行所需的环境变量，我们提供以下公共环境变量 BASHpython version 可选，如果工具是python执行，可以指定python版本，可选值 2或3 负责成员 一般填写工具创建人 协同成员 工具的协同开发者，可以查看 使用工具，以及添加工具规则 可用成员 可查看工具和使用工具规则 NOTE style flat 工具权限说明 工具创建时，默认是私有工具，不对所有人可见，如果希望推广给所有人使用，需要申请公开工具，CodeDog管理员会进行审批。 enterimagedescriptionhere 4. 为工具添加规则 1 创建工具完成后，进入 规则列表 页面，点击 创建规则 2 在添加规则页面，填写规则配置配置项说明 规则名称 规则的唯一标识，建议使用单词首字母大写的格式 前端展示名称 规则在页面上展示的名称，可以与规则名称相同或不同，建议使用单词首字母大写的格式 规则简述 简要描述规则发现的是什么问题，扫描结果中会作为问题标题展示 详细描述 请详细说明规则背景 问题 后果 解决方法等，可以附上KM链接，最后请加上规则负责人，比如 详细请咨询xxx。支持markdown格式。 类别 根据规则的作用选择 严重级别 按需选择该规则的严重级别 规则参数 如无需要通过参数传递的信息，可留空 解决方法 按照实际情况，说明该代码问题的解决方法，建议附上正确写法的代码demo 规则标签 可不填 适用语言 按需选择 负责人 请填写该规则负责人 是否为自定义规则 请勾选该项完成配置填写后，点击 添加规则 ，完成。 说明 工具添加完成后，默认是不在执行机的工具支持列表中的，请联系bensonqin，将工具添加到执行机的工具支持列表中，才能在项目中执行该工具的规则。5. 在项目扫描方案中添加规则，启动扫描 1 进入扫描方案，进入 代码检查 配置页面，点击配置规则。 2 在自定义规则包中，将需要使用的新工具的规则，添加进来 3 添加完成后，建议启动一次全量扫描，使用新规则对代码库进行扫描","categorie":"代码分析-工具管理-工具开发规范"},{"route":"/docs/code-analysis/toolmanage/manage.html","content":" 工具和规则管理可以直接进入工具规则中进行调整。支持工具自助添加 编辑 上架 下架 私有 公开等一系列操作。","categorie":"代码分析-工具管理-工具和规则管理"},{"route":"/docs/management/api/automation.html","content":" title 接入自动化工具 CODING帮助中心pageTitle 接入自动化工具pagePrevTitle API文档管理pagePrev management api start.htmlpageNextTitle OpenAPI导入指南pageNext management api openapi.html CODINGAPI文档 目前支持接入Docker与cURL进行自动化发布文档，省去了人工上传API数据的时间和繁琐的步骤。 即将支持接入 CODING持续集成 与Jenkins。 准备工作因为接入自动化工具需要用到 CODING开放API 的能力，而后者需要授权才可访问，所以需要您先开通“项目访问令牌 推荐 ”或者“个人访问令牌”。 为了区分人工和自动化的操作，建议使用项目访问令牌，并为API文档开通专用访问令牌。 开通项目访问令牌点击 项目 设置 开发者选项 项目令牌 ，选择 新建项目令牌 ，依次填入信息。其中管理权限请勾选 API文档 。 获取令牌用户名和密码在 项目令牌 页面，点击 查看密码 ，可获取令牌用户名和密码。 我们要用到的是 令牌密码 token ，复制后备用。 准备好符合规范的API数据 CODINGAPI文档 目前支持符合OpenAPI Postman apiDoc这3种规范下的YAML或者JSON格式的API数据。比如，这是OpenAPI规范下YAML格式的API数据 yamlopenapi 3.0.0info title SampleAPIdescription Optionalmultilineorsingle linedescriptionin CommonMark orHTML.version 0.1.9servers url http api.example.com v1description Optionalserverdescription,e.g.Main production server url http staging api.example.comdescription Optionalserverdescription,e.g.Internalstagingserverfortestingpaths users get summary Returnsalistofusers.description OptionalextendeddescriptioninCommonMarkorHTML.responses 200 statuscodedescription AJSONarrayofusernamescontent application json schema type arrayitems type string 使用Docker接入自动化 Docker 是一种轻量级的虚拟化技术，是一种Linux容器 LinuxContainers，缩写为LXC 技术的封装。为了更方便地上传API数据，CODING专门提供了Docker镜像 apidoc publisher 来实现API数据的上传，相较于cURL方式更加易懂，操作更加方便。 环境变量 环境变量 描述 ACCESS TOKEN 访问令牌 APIDOC TEAM 企业域名，若企业首页地址为 https abc.coding.net，则企业域名即为abc APIDOC PROJECT 项目地址名称，若项目首页地址为 https abc.coding.net p xyz，则项目地址名称即为xyz APIDOC ID API文档资源ID，若选中文档详情地址为 https abc.coding.net p xyz api docs 1，则ID即为1 APIDOC RELEASE TYPE 传输内容形式 content为文本形式，file上传文件形式 APIDOC CONTENT API数据内容 上传发布API文档Docker方式支持“文本”和“上传文件”这2种形式发布API文档，我们更推荐使用“上传文件”形式。 上传文件形式发布上传文件形式需要指定APIDOC RELEASE TYPE为file，并挂载API数据文件的目录至容器的 opt目录中，其中API数据必须保存在名为data.txt的文件中。请将以下命令中的环境变量替换为您的真实数据，无需保留花括号，并在终端内执行 shelldockerrun it rm eACCESS TOKEN 访问令牌 eAPIDOC TEAM 企业域名 eAPIDOC PROJECT 项目地址名称 eAPIDOC ID API文档资源ID eAPIDOC RELEASE TYPE file v API数据文件路径 data.txt opt data.txt ecoding apidoc publisher 比如我的命令是这样的 shelldockerrun it rm eACCESS TOKEN token eAPIDOC TEAM codingcorp eAPIDOC PROJECT code repo eAPIDOC ID 2 eAPIDOC RELEASE TYPE file v c Workspace code repo data.txt opt data.txt ecoding apidoc publisher 这是我的操作演示截图，终端返回 apidocsuccess 即为发布成功 在文档管理页面可以看到更新动态 文本形式发布文本形式需要指定APIDOC RELEASE TYPE为content，并在命令中传入API数据内容，其中API数据要以单引号括起来。请将以下命令中的环境变量替换为您的真实数据，无需保留花括号，并在终端内执行 dockerrun it rm eACCESS TOKEN 访问令牌 eAPIDOC TEAM 企业域名 eAPIDOC PROJECT 项目地址名称 eAPIDOC ID API文档资源ID eAPIDOC RELEASE TYPE content eAPIDOC CONTENT API数据内容 ecoding apidoc publisher 比如我的命令是这样的 shelldockerrun it rm eACCESS TOKEN token eAPIDOC TEAM codingcorp eAPIDOC PROJECT code repo eAPIDOC ID 2 eAPIDOC RELEASE TYPE content eAPIDOC CONTENT openapi 3.0.0info title SampleAPIdescription Optionalmultilineorsingle linedescriptionin CommonMark orHTML.version 0.1.9servers url http api.example.com v1 ecoding apidoc publisher 这是我的操作演示截图 使用cURL接入自动化 cURL 是一个利用URL语法在命令行下工作的文件传输工具，它支持文件上传和下载，所以是综合传输工具。使用cURL工具可以很简单的在命令行模式下将API数据上传至CODING，这在CI CD工具中非常实用。 CODINGAPI文档 提供了 API发布 的接口，可以上传API数据更新API文档，支持文件上传或以文本形式传输API数据。接口地址 POSThttps team .coding.net api docs api v1 projects project api docs id release 路由参数接口中的路由参数将以 开头标识，如 team 参数 描述 team 企业域名，若企业首页地址 https abc.coding.net，则企业域名即为abc project 项目地址名称，若项目首页地址 https abc.coding.net p xyz，则项目地址名称即为xyz id API文档资源ID，若选中文档详情地址为 https abc.coding.net p xyz api docs 1，则ID即为1 Header 参数 描述 Authorization 授权信息，此处填写访问令牌，格式为 token 访问令牌 请求参数 Body 文本形式可直接将API数据内容字符串传给服务端。API数据内容支持OpenAPI Postman Apidoc，格式支持JSON YAML 参数 描述 content API数据内容，如OpenAPI描述文件内容 范例 shellcurl XPOST H Authorization token 访问令牌 H Accept application json https abc.coding.net api docs open api v1 projects xyz docs 2 releases F content API数据内容 上传文件可将生成的API数据文件直接上传至服务端，支持内容及格式与文本形式一致。 参数 描述 支持格式 最大文件大小 file API数据文件路径，如 data api data.yml yml json 5MB 范例 shellcurl XPOST H Authorization token 访问令牌 H Accept application json https abc.coding.net api docs open api v1 projects xyz docs 2 releases F filename API数据文件路径 ","categorie":"文档管理-API 文档管理-接入自动化工具"},{"route":"/docs/management/api/config.html","content":" title API文档管理配置说明 CODING帮助中心pageTitle API文档管理配置说明pagePrevTitle API文档管理快速入门pagePrev management api start.htmlpageNextTitle MockAPI功能介绍pageNext management api mock intro.html 创建API文档需要经过2个步骤 1.配置基础信息2.配置描述信息 基础信息配置 如上图所示为需要填写的基础信息，包括 文档标题 API文档的标题，将显示在API文档的左上角和正文顶部。 访问模式 私有模式 访问API文档需要登录或输入访问令牌。 公开模式 访问API文档无需登录，直接可以查看。 访问地址 https 企业域名 .coding.net 项目地址名称 docs 自定义访问地址 自定义访问地址 该地址可自定义，项目内不可重复。 企业域名 当前企业子域名称，如 https abc.coding.net，则子域名称为 abc 项目地址名称 当前API文档管理所在的项目地址名称，如 https abc.coding.net p xyz中 xyz 为项目地址名称。 API数据录入目前支持3种主流API描述语言 OpenAPI Swagger OpenAPI 始于Swagger规范，是目前使用最广泛的RESTAPI的API描述标准，由Linux基金会维护，官方最新版本为OpenAPI3.0。需要注意的是Swagger规范已于2015年捐赠给Linux基金会后改名为OpenAPI 来源 OpenAPI 规范 Swagger 实现规范的一系列工具栈用户可将编写完成的OpenAPI描述文件 支持JSON YAML ，也可使用如 springfox 生成OpenAPI描述文件，导入至CODING，并生成精美的API文档。 Postman Postman 是一款服务于RESTAPI的完整开发环境，您可以在Postman设计API，并通过导出的PostmanCollection文件导入CODING，生成精美的API文档。 apiDoc apiDoc 是一款通过注释或注解生成API文档的工具，支持Java PHP JS等多种语言，生成方便，但文档体验较差。您可通过将生成文档中间文件 api data.json 导入至CODING，生成精美的API文档。 该步骤在一开始进入时提供了一份 宠物商店 DemoAPI数据，供用户参考。用户可以点击Tips中的 清空范例 清除数据。API数据输入框支持输入以上3种API描述语言，并支持解析 JSON 和 YAML 格式数据， 若觉得输入框太小，可点击右上方按钮最大化。 描述信息配置 如上图所示为配置描述信息步骤。上一步骤已经完成了API文档的基础部分，而这一步骤则是填充API描述信息，包括 简介 介绍API的背景 作用等。 API基础路径 用于描写 API服务器地址 ，可以在 名称 中指定环境名称。 详细描述 用于详细描述API的背景 功能 调用的规范等，支持Markdown语法，详细描述将显示在API文档GETSTARTED正文中。该部分可展开至全屏编辑。 需要注意的是Markdown语法中的一级标题 写法为 ，将被提取为API文档GETSTARTED导航栏的菜单项。 API基础路径配置API基础路径配置开关有 关闭 和 打开 两种状态，用于描写API服务器地址，可以在名称中指定环境名称。开关默认为关闭状态。 更多说明见 API路径详解 。 关闭 自定义基础路径 开关 固定使用 配置基础信息 时API文件数据中的基础路径地址，不可修改，也不可指定基础路径名称。 打开 自定义基础路径 开关 API基础路径可以在页面上自定义，默认自动填充 配置基础信息 时API文件数据中的基础路径地址。 API路径详解合理 好用的RESTfulAPI应该规范好协议 域名 版本 路径 操作等方面。 协议 API与用户的通信协议，总是使用HTTPS协议。 域名 应该尽量将API部署在专用域名之下。比如 https api.petstore.com 如果确定API很简单，可以考虑放在主域名下。比如 https petstore.com api 版本 应该将API的版本号放入路径。比如 https petstore.com api v1 另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。 路径 又称 终点 endpoint ，表示API的具体网址。 路径是可供调用的RESTAPI单元。举例来说，有一个API提供宠物医院 petstore 的信息，包括各种宠物和不同客户的信息，则它的路径应该设计成下面这样 https petstore.com api v1 pet https petstore.com api v1 user API基础路径 同个API下，不同路径的相同组成部分。举例来说，有一个API提供宠物医院 petstore 的信息，其中包含各种宠物信息的路径为 https petstore.com api v1 pet ，包含不同客户信息的路径为 https petstore.com api v1 user ，则它们的相同组成部分 https petstore.com api v1 是这个API的基础路径。 路径的作用 通过配置路径，您可以定义向开发者公开API的交互方式。 一个或多个HTTP操作一起构成完整的路径。这些操作是与API交互的不同方式，您可以使用 GET POST PUT DELETE PATCH 和 OPTIONS 操作。","categorie":"文档管理-API 文档管理-API 文档管理配置说明"},{"route":"/docs/management/api/start.html","content":" title API文档管理快速入门 CODING帮助中心pageTitle API文档管理快速入门pagePrevTitle Markdown语法pagePrev management markdown.htmlpageNextTitle 接入自动化工具pageNext management api openapi.html 产品功能介绍API ApplicationProgrammingInterface ，又称为应用编程接口，是软件系统不同组成部分衔接的约定。软件开发的过程中，通常会有不同的分工和职责，如后端接口开发与APP开发工作。其主要目的是为了让开发人员间达成一定的约定，而无需考虑其底层的源代码或内部实现细节。API本身是抽象的，它仅定义了一个接口，而不涉及应用程序在实际实现过程中的具体操作。CODING所提供的 API文档管理 是一个非常强大的工具，它可以帮助您引领API的发展和成熟，为开发人员提供出色的交互体验，并允许使用OpenAPI Postman Apidoc描述格式集成至现有的CICD工作流中，从而实现自动化发布流程。此文将帮助您快速熟悉CODINGAPI文档管理的基本使用操作。 创建API文档1.在 项目 文档管理 API文档 中点击 发布API文档 按钮。 2.在配置基础信息页，填写 API文档标题，选择 API文档访问模式 私有 公开模式 ，输入 API文档访问地址 ，并导入API数据。 私有模式 访问API文档需要登录CODING企业账号且拥有当前项目API文档功能查看权限，或通过分享口令登录查看。 公开模式 访问API文档时无需登录，可直接进行查看。 3.在录入API数据页，选择 导入数据 或 使用默认Demo数据 后点击 完成并发布 按钮。 分享API文档1.在API文档详情页点击 添加分享对象 按钮，填写 分享对象名称 ，随机生成 手动填写 访问口令 ，选择 口令有效期 完成分享对象新增。 2.点击分享对象末端 编辑 按钮，选中 复制链接与口令 ，分享链接与口令将复制在粘贴板中。 3.发送链接与口令至对应分享对象，分享对象可通过此链接访问API文档。 分享对象访问API文档1.分享对象通过分享链接进入API文档登录页后输入 访问口令 。 2.文档中DESCRIPTION部分展示了API文档的基础信息 APIREFERENCE部分为各个API对应的调用说明 请求路由 请求参数 响应参数等 ，且在右侧提供请求和响应的范例Demo，方便开发人员进行查看。 "},{"route":"/docs/qta/apis/ARTIFACT.html","content":" 制品API 目录 制品库 制品 制品库 接口 HTTP方法 HTTPURI 说明 repo create POST artifact artifact repo 创建一个制品库 repo delete DELETE artifact artifact repo repo id 删除一个制品库 repo list GET artifact artifact repo 查询制品库列表 repo get GET artifact artifact repo repo id 查询制品库详情 repo create POST artifact artifact repo ... 制品库创建需要提供以下必要参数 name 制品库名称 project id 测试项目ID provider 制品提供方，目前仅支持 qta managed ，即通过QTA平台托管制品的方式，后续会支持 qci 等第三方制品管理系统此外根据制品提供方类型，可能还需要以下参数 ref id 制品提供方对应的制品库引用ID，由 provider 指定的制品库定义，比如QCI的任务ID创建成功会返回以下字段 id 制品库ID repo delete DELETE artifact artifact repo repo id 删除制品库会删除对应的全部制品信息 repo list GET artifact artifact repo query condition 查询制品库列表，支持以下查询条件 offset 分页查询偏移 limit 分页查询每页返回上限 project id 测试项目ID repo get GET artifact artifact repo repo id 返回制品库详情信息，包括一下字段 provider 提供方 provider url 提供方的url ref id 提供方提供的制品库引用ID name 名称 制品 接口 HTTP方法 HTTPURI 说明 artifact create POST artifact artifact 创建一个制品 artifact delete DELETE artifact artifact artifact id 删除一个制品 artifact list GET artifact artifact 查询制品列表 artifact get GET artifact artifact artifact id 查询制品详情 artifact attr get GET artifact artifact artifact id attr 查询制品属性 artifact attr update PATCH artifact artifact artifact id attr 更新制品属性 artifact file get GET artifact artifact artifact id file 查询制品文件列表 artifact file upload POST artifact artifact artifact id file 上传制品文件 artifact create POST artifact artifact ... 创建制品需要以下必要信息 repo 制品库ID创建成功会返回对应的信息 id 制品库ID artifact delete DELETE artifact artifact artifact id 删除一个制品 artifact list GET artifact artifact query condition 查询制品列表，支持以下查询条件 offset 分页查询偏移 limit 分页查询每页返回上限 repo 制品库ID artifact get GET artifact artifact artifact id 返回制品库详情，包括一下字段 provider url 提供方的url ref id 提供方提供的制品库引用ID artifact attr get GET artifact artifact artifact id attr 查询制品属性，返回结果为属性字典 artifact attr update PATCH artifact artifact artifact id attr ... 更新制品属性，请求参数为要更新的属性字典。属性一旦创建即不能删除，但可以通过多次更新请求来重写属性值 artifact file get GET artifact artifact artifact id file 查询制品文件列表，返回格式为字典，字典Key为文件名，Value为可下载的文件URL artifact file upload POST artifact artifact artifact id file 上传文件，有以下必要参数 name 制品文件名 file 文件数据 注意，和其他请求包不同，上传文件的请求需要使用form data的格式 上传成功后，会返回对应制品的全部文件列表信息，同 artifact file get 返回的结果","categorie":"自动化测试-使用 API-制品 API"},{"route":"/docs/qta/apis/AUTH.html","content":" 鉴权管理API Token管理 接口 HTTP方法 HTTPURI 说明 token create POST auth token 创建一个Token token delete DELETE auth token token id 删除一个Token token list GET auth token 查询个人的全部Token token create POST auth token 不需要任何参数创建成功会返回的信息有 id TOKENID token Token凭证 algorithm JWT算法 secret JWTSecret key JWTKey token delete DELETE auth token token id token list GET auth token ","categorie":"自动化测试-使用 API-鉴权 API"},{"route":"/docs/qta/apis/DRUN.html","content":" DRun接口 目录 任务调度 节点连接 节点任务控制 接口使用示例 任务调度JSON RPC的接口如下 接口 说明 start job by xml 启动一个DRun任务，通过XML stop job 停止一个DRun任务 get job status 查询DRun任务状态 get job log 查询DRun任务日志 不建议使用，性能慢 create secret 创建加密环境变量密钥 delete secret 删除加密环境变量密钥 jobscheduler start job by xml通过XML，启动一个DRun任务，参数有 job flow 字符串类型，任务XML job data 字符串类型，暂时不使用，默认传None notify rpc url 字符串类型，通知回调的rpc接口，默认为空字符串启动成功，返回drun任务ID，字符串类型 jobscheduler stop job取消一个任务的执行，参数有 job id 字符串类型，drun任务ID，start job by xml接口返回的任务ID jobscheduler get job status查询DRun任务状态，参数有 job id 字符串类型，drun任务ID，start job by xml接口返回的任务ID返回字典，包括下面的键值 status 任务状态，字符串类型，状态有 init , waiting , running , done , error , cancelling , cancelled init 初始化 waiting 等待中 running 执行中 done 已完成 error 异常 cancelling 取消中 cancelled 已取消 progress 执行进度，字符串类型 jobscheduler get job log查询DRun任务日志 不建议使用，性能慢 ，参数有 job id 字符串类型，drun任务ID，start job by xml接口返回的任务ID log filter 字典类型，日志过滤条件，默认为None返回日志信息，数组类型 jobscheduler create secret创建加密环境变量的密钥，无参数，返回数组 secret id 字符串类型，密钥ID pubkey 字符串类型，公钥，用于对环境变量进行加密 jobscheduler delete secret删除加密环境变量的密钥，参数有 secret id 字符串类型，密钥ID，create secret接口返回的密钥ID 节点连接JSON RPC的接口如下 接口 说明 hello 注册节点 heartbeat 上报节点心跳 put task 提交一个任务 batch put task 批量提交任务 cancel task 取消一个任务的执行 batch cancel task 批量取消任务 get node 查询节点信息 task start 任务开始执行 task finished 任务结束执行 task failed 任务执行失败 task waiting 节点等待中 task running 节点重新开始执行 log 打印日志 nodeconn hello注册一个新节点，参数有 properties 字典类型，节点相关属性信息 reset 布尔类型，重置节点的状态，默认为False注册成功，返回结果为字典类型，包括下面的键值 resource id 节点ID region 节点区域 nodeconn heartbeat上报节点心跳，参数有 node id 字符串类型，节点ID status 字符串类型，当前节点状态，有 idle busy rebooting restarting update props 字典类型，节点相关更新属性信息，默认为None返回指令字典，包括下面的键值 action 指令操作，有 start task cancel task sleep update params 指令参数字典，例如sleep指令的参数，休眠间隔2秒 period 2 nodeconn put task提交一个任务，参数有 node id 字符串类型，节点Id task ctrl url 字符串类型，任务控制接口URL，如果为None，节点默认使用nodeconn任务接 notify rpc url 字符串类型，节点事件通知接口URL dmemsvc rpc url 字符串类型，dmem接口URL，默认为None task dict 字典类型，任务字典，默认为 返回task id，字符串类型 nodeconn batch put task批量提交任务，参数有 node ids 数组类型，节点Id列表 task ctrl url 字符串类型，任务控制接口URL，如果为None，节点默认使用nodeconn任务接 notify rpc url 字符串类型，节点事件通知接口URL dmemsvc rpc url 字符串类型，dmem接口URL，默认为None task dict 字典类型，任务字典，默认为 返回task ids，数组类型一个task dict设置的例子 json jobid TaskDemo , dmemsvc rpc url , log level 20, task id t0 NodeTask , name TaskDemo , workspace , resource , env virtual , steps id downloadxxx.py , idx 0, type copy , name downloadxxx.py , src http file.sng.com browse qta script xxx.py , dst . , ignore error False, , id runcmd , idx 1, type cmd , name runcmd , args pythonxxx.py , ignore error False, , , nodeconn cancel task取消一个任务的执行，参数有 node id 字符串类型，节点Id task id 字符串类型，put task时返回的task id nodeconn batch cancel task取消一个任务的执行，参数有 task id 数组类型，task id列表 nodeconn get node查询节点信息，参数有 node id 字符串类型，节点Id返回节点字典，例如 u status u ok ,u last heartbeat time u 2019 08 1516 56 45 ,u pending commands ,u running command id u 5d551db61608934174a85ea9 ,u pool owner u job 59658918 ,u region u oa ,u res group u docker new ,u pool id u 5d551db61608930285f9ae73 ,u session id None,u properties u name u qtke 97 ,u platform u linux2 ,u python u 2.7.16 ,u ip u 10.101.103.104 ,u region u oa ,u hostname u qtke 97 ,u machine u x86 64 ,u os version u centos7.2Final ,u mac u qtke 97 ,u version u 5.2.31 ,u owner u root ,u os type u Linux ,u processor u x86 64 ,u api version u 1.1.0 ,u browser u ,u prop count 15,u last used time u 2019 08 1516 54 14 ,u res type u node ,u running command u action u start task ,u params u dmemsvc rpc url u http dmem2.qta.oa.com dmemsvc json ,u task control url u http drun.qta.oa.com drun task 59658918 task t0 QTATest ,u id u 26260 nodeconn task start任务开始执行，参数有 node id 字符串类型，节点Id nodeconn task finished任务结束执行，参数有 node id 字符串类型，节点Id nodeconn task failed任务开始执行，参数有 node id 字符串类型，节点Id message 字符串类型，失败信息 nodeconn task waiting节点等待中，参数有 node id 字符串类型，节点Id message 字符串类型，相关信息 nodeconn task running节点重新开始执行，参数有 node id 字符串类型，节点Id message 字符串类型，相关信息 nodeconn log打印日志，参数有 node id 字符串类型，节点Id level 整型，日志级别，例如 ERROR 40，WARNING 30，INFO 20，DEBUG 10 tag 字符串类型，标签，例如 TASK STEP 等 message 字符串类型，相关信息 节点任务控制JSON RPC的接口如下 接口 说明 get task 获取一个任务 task start 任务开始执行 task finished 任务结束执行 task failed 任务执行失败 task waiting 节点等待中 task running 节点重新开始执行 log 打印日志 taskcontrol get task节点获取一个任务，参数有 node id 字符串类型，节点Id返回任务字典，包括下面的键值 task 字典类型，任务详情， jobid 字符串类型，任务ID dmemsvc rpc url 字符串类型，dmem接口URL log level 整型，日志级别，例如 ERROR 40，WARNING 30，INFO 20，DEBUG 10 secrets 字典类型，密钥字典，用于解密加密的环境变量 taskcontrol task start节点任务开始执行，参数有 node id 字符串类型，节点Id taskcontrol task finished节点任务结束执行，参数有 node id 字符串类型，节点Id taskcontrol task failed节点任务开始执行，参数有 node id 字符串类型，节点Id message 字符串类型，失败信息 taskcontrol task waiting节点等待中，参数有 node id 字符串类型，节点Id message 字符串类型，相关信息 taskcontrol task running节点重新开始执行，参数有 node id 字符串类型，节点Id message 字符串类型，相关信息 taskcontrol log节点打印日志，参数有 node id 字符串类型，节点Id level 整型，日志级别，例如 ERROR 40，WARNING 30，INFO 20，DEBUG 10 tag 字符串类型，标签，例如 TASK STEP 等 message 字符串类型，相关信息 接口使用示例Python脚本推荐使用jsonrpclib，安装方式如下 pipinstalljsonrpclib 示例代码如下 启动及中止一个drun任务job xml的写法可以参考 自定义测试类型 。 importjsonrpclibURL http drun.qta.oa.com drun job xml xmlversion 1.0 encoding utf 8 jobname xxxx version 1 exec timeout 1h wait timeout 1h priority 10 log level INFO resourcename 执行机 type node maxcnt 2 mincnt 1 group NodePool condition taskname QTATest resource 执行机 workspace envname XXX value AAA task job drun jsonrpclib.Server URL 启动drun任务jobid drun.start job by xml job flow job xml,job data None,notify rpc url 中止drun任务drun.stop job job id jobid while1 查询drun任务状态result drun.get job status job id jobid ifresult status in done , error , cancelled breaktime.sleep 5 接入一个drun节点 importsysimportplatformimportsystemimportsocketimportjsonrpclibURL http drun.qta.oa.com node conn nodeconn jsonrpclib.Server URL properties mac xxxxxxxxxx , os type platform.system , os version system.osext.version , hostname platform.node , 等同于socket.gethostname browser system.osext.default browser , python platform.python version , ip socket.gethostbyname socket.gethostname , 获取的是内网IPv4 processor platform.processor , machine platform.machine , platform sys.platform, version 5.2.0, api version 1.1.0 , owner root , name MyNode , node id nodeconn.hello properties result nodeconn.get node node id printresult ","categorie":"自动化测试-使用 API-DRUN API"},{"route":"/docs/qta/apis/META.html","content":" 元数据API 目录 测试工具 报告类型 测试类型 运行环境 插件 测试工具 接口 HTTP方法 HTTPURI 说明 testtool get GET meta testtool tool id 查询测试工具详情 testtool list GET meta testtool 查询测试工具列表 testtool get GET meta testtool testtool id 查询返回对应的工具详情，包括以下字段 id 工具ID name 工具名 description 描述信息 test drivers 使用的测试驱动器列表，比如qt4a qt4i test framework 使用的测试框架，比如qtaf user interface 提供给用户的使用接口类型，比如Python target application types 目标测试应用类型列表，比如android ios等 target interface 目标测试接口，比如ui api等 testcase specs 测试用例属性描述信息列表 arg specs 测试工具使用参数 即使用此测试工具的测试工程的属性 testcase runner 测试工具命令行，用于执行测试用例 testcase loader 测试工具命令行，用于加载测试用例 testcase analyzer 测试工具命令行，用于分析测试用例 scaffolding tool 测试工具命令行，用于创建脚手架工程 node setup 测试工具命令行，用于执行任务的节点初始化 node cleanup 测试工具命令行，用于执行任务的节点清理 doc url 文档URL logo img url Logo图片URL res pkg url 资源包路径，测试工具命令行执行时需要将此资源包下载解压缩，并设置环境变量QTAP PLUGIN RES指向解压后的目录测试用例属性描述信息是一个字典结构，包括以下字段 name 属性变量名 display name 属性展示名 enable filter 此属性是否支持过滤查询，默认为true filter widget 属性作为查询过滤字段时的输入控件描述类型，仅enable filter为true时才有意义 default 属性默认值，没有默认值的属性都是必要属性 description 属性描述信息根据不同的类型，还可能会有提供额为的属性描述信息字段 lang 代码框使用，表示对应代码框的语言类型 choices 单选框和复选框使用，表示选择项，为字典结构，key为选择项的展示名，Value为选择项的取值 separator 标签字段使用，表示多个标签的间隔复，默认为逗号filter widget字段可能是以下的类型 text 单行文本输入框 text area 多行文件输入框 code 代码输入框，可以通过额为的属性描述信息字段 lang 指定代码语言 choices 单选框，通过额为的属性描述字段 choices 字典指定选择项 multi choices 复选框，通过额为的属性描述字段 choices 字典指定选择项 user 用户选择器，仅支持一个用户 multi user 用户选择器，支持多个用户 tags 标签，支持匹配和排除两种命中规则，可以通过额为的属性描述字段 separator 指定多个标签的间隔符，默认为逗号测试工具使用参数是一个字典结构，包括以下字段 name 属性变量名 display name 属性展示名 input widget 属性输入控件描述类型，可选类型同 filter widget description 属性描述信息测试工具命令行 比如testcase runner，testcase laoder等 都是一个JSON对象，包括以下字段 cli 工具的命令行 arg specs 工具命令行参数，同以上等测试工具参数中的 arg specs supported runtimes 表示支持运行此命令行的环境名列表 testtool list GET meta testtool query condition 查询测试工具列表，支持以下查询条件 name 测试工具名，支持模糊查询 test framework 测试框架类型 test drivers 测试驱动器 user interface 用户接口类型 target interface 目标接口类型 报告类型 接口 HTTP方法 HTTPURI 说明 reporttype get GET meta reporttype reporttype id 查询测试报告类型 reporttype list GET meta reporttype 查询测试报告类型列表 reporttype get GET meta reporttype reporttype id 查询返回对应的测试类型详情，包括以下字段 id 类型ID name 名称 category 报告类别，比如junit qta等 conf 类型相关配置信息 reporttype list GET meta reporttype 测试类型 接口 HTTP方法 HTTPURI 说明 testtype get GET meta testtype tool id 查询测试类型详情 testtype list GET meta testtype 查询测试类型列表 testtype get GET meta testtype testtype id 查询返回对应的测试类型详情，包括以下字段 id 测试类型ID test tool 使用的测试工具ID name 名称 description 描述信息 resource types 需要的资源类型列表，比如node android resource default configs 资源默认配置列表 job template xml DRunJob的XML模版，请勿使用，后续将废弃 property specs 对应测试任务的属性描述信息列表property specs介绍，每个测试任务属性描述信息是一个字典结构，包括以下字段 name 属性变量名 display name 属性展示名 widget 属性作为输入字段时的输入控件描述类型 default 属性默认值，没有默认值的属性都是必要属性 description 属性描述信息 widget 的取值和 testtool get 的 filter widget 的取值一样resource default configs介绍，每个资源默认配置是一个字典结构，包括以下字段 name 选填，资源名称，默认node类型为执行机，android类型为Android手机，ios类型为iOS手机，必须跟测试类型中定义保持一致。 type 必填，资源类型，支持的资源类型有node android ios group 必填，资源分组名称 max cnt 必填，所需的最大资源数目，不能为0 min cnt 必填，所需的最小资源数目，不能大于min cnt，且不能为0 condition 选填，筛选条件，支持申请指定条件的平台资源，具体写法 参考文档 remark 选填，资源别名，区别于name字段，只用于Web前端展示一个资源配置的例子 json resource default configs name 执行机 , type node , group docker new , max cnt 1, min cnt 1, condition , remark 执行节点 , , name Android手机 , type android , group QT4A , max cnt 1, min cnt 1, condition , remark Android , , testtype list GET meta testtype query condition 查询测试类型列表，支持以下查询条件 name 测试工具名，支持模糊查询 test tool 测试工具 test framework 测试框架类型 test drivers 测试驱动器 user interface 用户接口类型 target interface 目标接口类型 运行环境 接口 HTTP方法 HTTPURI 说明 runtime get GET meta runtime runtime idorruntime name 查询运行环境详情 runtime list GET meta runtime 查询运行环境列表 runtime get GET meta runtime runtime idorruntime name 查询返回对应的测试类型详情，包括以下字段 id 运行环境ID name 运行环境名，全局唯一 type 类型，目前有两种 docker和node，表示使用容器和执行节点 image 容器镜像，类型为docker有效 os 操作系统类型，类型为node有效 tag 节点标签，类型为node有效 runtime list GET meta runtime 查询运行环境类型列表 插件 接口 HTTP方法 HTTPURI 说明 plugin list GET meta plugin 查询全部插件 plugin get GET meta plugin plugin id 查询一个插件 plugin publish POST meta plugin 注册一个插件 plugin list GET meta plugin 支持的查询参数有 owner 插件所属人ID plugin get GET meta plugin plugin id plugin publish POST meta plugin version 1.0.0 , file form data ","categorie":"自动化测试-使用 API-元数据 API"},{"route":"/docs/qta/apis/PROJECT.html","content":" 项目API 目录 项目 成员 项目 接口 HTTP方法 HTTPURI 说明 project create POST project project 创建一个测试项目 project update PATCH project project project id 更新项目部分属性 project list GET project project 查询测试项目列表 project get GET project project project id 查询一个测试项目详情 project create POST project project .... 创建测试报告需要提供以下必要参数 description 描述信息此外还有以下可选参数 name 项目唯一标识，可以是任意字符串，如果不指定则为自动生成的uuid product 关联产品名创建成功会返回的信息有 id 测试报告ID create time 创建时间创建项目时，请求所属的负责人会自动分配为该项目的管理员 project update PATCH project project project id .... 除了以下字段外的其他字段都可更新 create time 创建时间 id 项目ID name 项目名称 project list GET project project query condition 查询测试报告列表，URL支持以下查询条件 offset 分页查询偏移 limit 分页查询每页返回上限 name 项目名 member 查找包括特定成员的全部项目，member值为对应的用户ID project get GET project project report id 返回测试项目详情信息 成员 接口 HTTP方法 HTTPURI 说明 member list GET project project project id member 查询项目成员 member add POST project project project id member 添加项目成员 member remove DELETE project project project id member member id 删除项目成员 member update PATCH project project project id member member id 更新项目成员角色 member list GET project project project id member 查询特定项目的成员列表，返回的数据包括以下字段 user 用户名 ID role 用户角色，目前有admin member guest三种角色 id 成员ID member add POST project project project id member ... 添加项目成员，包括一下必要字段 user 用户名 ID role 用户角色 注意 仅项目的管理员有权限调用此接口 member remove DELETE project project project id member member id 删除成员 注意 仅项目的管理员有权限调用此接口 member update PATCH project project project id member member id ... 修改用户角色，目前有一个必要参数 role 用户角色 注意 仅项目的管理员有权限调用此接口","categorie":"自动化测试-使用 API-测试项目 API"},{"route":"/docs/qta/apis/REPORT.html","content":" 测试报告API 目录 测试报告 测试附件 测试结果 相关测试结果 测试报告 接口 HTTP方法 HTTPURI 说明 report create POST report report 创建一个测试报告 report update PATCH report report report id 更新测试报告部分属性 report finish POST report report report id finish 标志测试报告对应测试完成 report list GET report report 查询测试报告列表 report get GET report report report id 查询一个测试报告详情 report create POST report report .... 创建测试报告需要提供以下必要参数 name 测试报告名称 project id 测试项目ID此外还有以下可选参数 result format 测试结果类型，可选值为 qta 和 junit ，目前默认为 qta task id 对应测试任务ID artifact id 对应制品ID test type id 测试类型ID expected test count 预期的测试结果数目，主要用户统计测试报告的完成进度 start time 测试报告对应的测试开始时间，时间格式类似“2019 11 1113 11 01” task status 任务执行状态，可选值包括 running done error cancelled product version 产品版本号 repo url 代码仓库地址，url地址以 http 或 https 开头，以 .git 结尾 branch 分支名创建成功会返回的信息有 id 测试报告ID creator 创建者 create time 创建时间 report update PATCH report report report id .... 除了以下字段外的其他字段都可更新 create time 创建时间 creator 创建者 end time 测试报告结束时间 report finish POST report report report id finish .... 标记测试报告完成，无必要参数，但可以提供以下可选参数 end time 测试报告结束时间 notifications 测试报告通知设置 列表 每个通知设设置按照以下格式 channels 必要参数，列表类型，指定使用通知的方式，详情参考以下“通知方式设置”说明 channel configs 可选参数，字典类型，用于部分通知方式可能需要设定对于的配置信息，字典Key为通知方式名，字典Value为设置信息，详情参考以下“通知方式设置”说明。 receivers 通知接收人，可选参数，列表类型，使用用户名 cc receviers 抄送接收人，可选参数，列表类型，使用用户名，此字段仅对部分支持抄送的通知方式有效 conditionals 通知触发条件，可选参数，字典类型，测试报告满足此条件才能会发送通知，详情参考以下“条件通知设置”说明通知方式说明 channel 说明 需要的channel config参数 sms 短信 email 邮件 qq group QQ群 qqgroup 指定目前群号 wechat oa 微信公众号 wechat work tips 企业微信TIPS wechat work group 企业微信群 group 指定群ID wechat work robot 企业微信机器人 robot url 机器人URL 条件通知 conditionals 设置是一个字典结构，按照以下格式设置 json conditionals 变量名 操作符 操作数 , 操作符 操作数 ,... 从以上格式可以看出，条件设置支持设置多个变量和多个操作符的条件，多个条件的关系是“与”逻辑。目前的支持的变量有 变量名 类型 说明 succeed test rate float 测试通过率 目前的支持的操作符有 操作符 说明 大于或等于 小于或等于 大于 小于 等于 一个条件通知方式设置的例子 json notifications channels sms , qq group , email , receivers foo , jss , cc receivers boss , channel configs qq group qqgroup 100000000 , conditionals succeed test rate 0.9 report list GET report report query condition 查询测试报告列表，URL支持以下查询条件 offset 分页查询偏移 limit 分页查询每页返回上限 project id 测试项目ID name 模糊匹配测试报告名称 start time 返回测试报告开始时间大于此条件值的测试报告 end time 返回测试报告结束时间小于此条件值的测试报告 report get GET report report report id 返回测试报告详情信息，相比于report list返回的测试报告的信息，增加以下字段 crash test count 发生Crash的测试结果数 succeed test count 成功的测试结果数 total test count 总测试结果数 filtered test count 被过滤不执行的测试结果数 succeed test rate 测试通过率 resources 基于资源维度的测试统计情况，格式为如下 json resource type resource id resource id , total test count number , succeed test count nummber , ... 比如 json android resource id 12212313454531 , total test count 12, succeed test count 5, , resource id 893231313323 , total test count 11, succeed test count 9, , , node resource id 192.189.12.11 , total test count 23, succeed test count 14, , 测试附件 接口 HTTP方法 HTTPURI 说明 attachment create POST report report report id attachment 上报报告的测试附件 attachment create POST report report report id attachment .... 测试结果创建要提供以下必要参数 name 名称，会作为报告中与报告结论同级别的tab的名称，如命名为 用户附件 ，报告首页将会有用户附件一栏 type 目前支持的值只有 url url 希望报告中以iframe形式内嵌进去展示内容的url链接创建成功会返回以下字段 id 测试附件ID 测试结果 接口 HTTP方法 HTTPURI 说明 result create POST report report report id result 上报一个测试结果 results create POST report report report id results 上传一个junit测试结果xml result list GET report report report id result 查询测试报告的全部测试结果 result get GET report report report id result result id 查询一个测试结果详情 result create POST report report report id result .... 测试结果创建要提供以下必要参数 testcase id 测试用例ID result type 测试结果类型，可选包括 succeed ， failed ， filtered 和 loaderr log content 测试日志结果信息，需要符合对应测试报告的 result format 定义的格式的要求此外还有以下可选参数 properties 其他自定义属性dict description 测试结果描述 start time 用例开始时间 end time 用例接受时间 resources 资源使用情况，主要用于生成基于资源维度的测试结果统计数据，请按照以下格式 json resource type resource id 1 , resource id 2 ,... 比如 json android 1231312323231 , 12323i9343 , node 12433232 创建成功会返回以下字段 id 测试结果ID results create POST report report report id results .... 目前只支持junit格式的xml测试结果上传，会自动将上传的xml中的多个用例进行解析存储 log contents 要上传的xml文件的文件内容， 注意，和其他请求包不同，上传文件的请求需要使用form data的格式 result list GET report report report id result query condition 查询测试结果列表，URL支持以下查询条件 offset 分页查询偏移 limit 分页查询每页返回上限 result type 测试结果类型，支持多个组合查询 unfold 只支持设置为1，如果传递这个参数，则不隐藏被重跑覆盖的测试结果 resource type resource id 这两个参数必须同时存在，用于查询使用了指定的资源的全部测试结果 prop name name为测试结果属性名，支持同时指定多个属性值组合查询 ordering 排序支持的字段包括testcase id，start time和prop name result get GET report report report id result result id 相关测试结果 接口 HTTP方法 HTTPURI 说明 related result list GET report report report id result result id related 查询测试结果的关联测试结果列表 related result get GET report report report id result result id related result id 查询测试结果的一个关联测试结果详情 related result list GET report report report id result result id related related result get GET report report report id result result id related result id ","categorie":"自动化测试-使用 API-测试报告 API"},{"route":"/docs/qta/apis/RESOURCE.html","content":" 测试资源API 目录 资源类型 资源 资源分组 资源属性 使用回话 使用请求 使用日志 资源类型 接口 HTTP方法 HTTPURI 说明 restype list GET resource res type 查询资源类型列表 restype get GET resource res type rtes type id 查询资源类型详情 restype create POST resource res type 创建资源类型 restype update PATCH resource res type 更新资源类型 restype project add POST resource resource res type id project 添加资源类型到一个项目中 restype project remove DELETE resource resource res type id project project name 移除项目中的资源类型 restype list GET resource res type query condition 查询资源类型列表，URL支持以下查询条件 offset 分页查询偏移 limit 分页查询每页返回上限 project id 查询当前测试项目关联的资源类型 owners 根据负责人查询资源类型 restype get GET resource res type res type id 查询资源类型详情 restype create POST resource res type 创建新的资源类型，有以下必要的参数 name 资源类型标识符，创建后不可变更此外还有以下可选参数 project id 项目ID，如果不指定，则为注册内置资源类型，所有项目都会自动关联此测试类型 display name 展示名 owners 负责人，默认创建者会自动作为负责人 restype update PATCH resource res type 更新资源类型，支持以下参数 project id 项目ID display name 展示名 owners 负责人 resgroup project add POST resource resource res type id project 添加分组到一个项目中，有以下必要参数 name 项目名 resgroup project remove DELETE resource resource res type id project project name 将分组移除出对应的项目 资源 接口 HTTP方法 HTTPURI 说明 resource list GET resource resource res type id 查询资源列表 resource get GET resource resource res type id resource id 查询资源详情 resource create POST resource resource res type id 创建资源 resource update PATCH resource resource res type id resource id 更新资源 resource delete DELETE resource resource res type id resource id 删除资源 resource create POST resource resource res type id 创建资源URL中的 res type id 对应为测试资源类型创建时返回的ID。需要以下必要参数 res group 资源分组，使用分组名 properties 资源属性字典还有以下可选参数 status 资源状态，可选值有 ok broken resource list GET resource resource res type id query condition 查询特定类型的资源的列表URL中的 res type id 对应为测试资源类型创建时返回的ID。支持以下查询条件 offset 分页查询偏移 limit 分页查询每页返回上限 res group 按资源分组查询，使用分组名 session id 查询被特定资源使用会话占用的资源 pool id 查询特定资源池中的资源 pooled 资源是否存在于资源池中，取值为true false sessioned 资源是否被任何会话占用中，取值为true false status 按资源状态查询，取值为 ok 或 broken properties 匹配资源的属性条件，格式为json project id 查询特定项目所属的分组的全部资源 property query 通过 属性查询语句 查询资源 属性查询语句语法属性查询语句是一种简单的语言，相比使用属性字典匹配资源的方式更加灵活和强大。 严格匹配资源属性 os version 8.1 os type android 等价的属性字典匹配为 python os version 8.1 , os type android 支持大于小于操作符 os version 8.1 api version 12 目前支持包括 不等于 支持字符串正则匹配 os name Windows. 支持范围查询 os versionin 8.1 , 9.2 也有对应的逆操作 os versionnotin 8.1 , 9.2 对于dict和list类型的属性，还支持部分匹配 os info creator foo book list 1 KM resource get GET resource resource res type id resource id 查询资源详情URL中的 res type id 对应为测试资源类型创建时返回的ID。 resource update PATCH resource resource res type id resource id 更新资源，支持以下字段的更新 res group 资源分组，使用分组名 properties 资源属性字典 resource delete DELETE resource resource res type id resource id 删除一个资源 资源分组 接口 HTTP方法 HTTPURI 说明 resgroup list GET resource resource res type id res group 查询资源分组列表 resgroup get GET resource resource res type id res group res group id 查询资源分组详情 resgroup create POST resource resource res type id res group 创建资源分组 resgroup update PATCH resource resource res type id res group res group id 更新资源分组 resgroup delete DELETE resource resource res type id res group res group id 删除资源分组 resgroup project add POST resource resource res type id res group res group id project 添加分组到一个项目中 resgroup project remove DELETE resource resource res type id res group res group id project project name 移除项目中的分组 resgroup list GET resource resource res type id res group query condition 查询特定资源的分组列表支持以下查询条件 offset 分页查询偏移 limit 分页查询每页返回上限 project id 查询特定项目所属的分组 search 模糊搜索分组名 resgroup get GET resource resource res type id res group res group id 查询分组详情 resgroup create POST resource resource res type id res group 创建分组，有以下必要字段 name 分组名，全局唯一 description 分组描述 resgroup update PATCH resource resource res type id res group res group id 更新分组，有以下可更新的字段 description 分组描述 resgroup delete DELETE resource resource res type id res group res group id 删除一个资源分组，如果分组下有资源，则删除会失败 resgroup project add POST resource resource res type id res group res group id project 添加分组到一个项目中，有以下必要参数 name 项目名 resgroup project remove DELETE resource resource res type id res group res group id project project name 将分组移除出对应的项目 资源属性 接口 HTTP方法 HTTPURI 说明 property list GET resource resource res type id property 查询资源属性列表 property get GET resource resource res type id property property id 查询资源属性详情 property create POST resource resource res type id property 创建资源属性 property update PATCH resource resource res type id property property id 更新资源属性 property delete DELETE resource resource res type id property property id 删除资源属性 property list GET resource resource res type id property query condition 查询资源属性列表，支持以下查询条件 offset 分页查询偏移 limit 分页查询每页返回上限 search 模糊搜索属性名 name 批量查询属性名，例如 name AAA name BBB name CCC property get GET resource resource res type id property property id 查询一个属性详情 property create POST resource resource res type id property 创建一个属性，有以下必要字段 name 属性名，全局唯一 val type 属性值类型，支持 str int bool float list 和 dict val options 取值范围列表 optional 是否为可选值 description 描述 remark 备注 property update PATCH resource resource res type id property property id 更新一个属性，有以下可更新字段 val options 取值范围列表 optional 是否为可选值 description 描述 remark 备注 property delete DELETE resource resource res type id property property id 删除一个属性，资源对应的该属性也会被一同删除 使用会话 接口 HTTP方法 HTTPURI 说明 session create POST resource session 创建资源使用会话 session delete DELETE resource session session id 删除资源使用会话 session hold POST resource session session id hold 资源使用会话保持和续期 session batch delete POST resource session batch destroy 资源使用会话批量删除 session create POST resource session 创建会话，有以下必要参数 user 使用用户信息，仅用于标示和控制批量销毁 domain 使用应用信息，仅用于标示和控制批量销毁 timeout 会话超时时间，单位为秒，超时后会话会自动销毁，会话占用的全部资源也会自动释放 session delete DELETE resource session session id 删除会话，会话占用的全部资源也会自动释放 session hold POST resource session session id hold 会话续期保持，有以下必要参数 timeout 会话超时时间，单位为秒，超时后会话会自动销毁，会话占用的全部资源也会自动释放 session batch delete POST resource session session id batch destroy 批量销毁会话，有以下必要参数 domain 同创建时的 domain 参数，指定 domain 的会话会全部删除还有以下可选参数 user 同创建时的 user 参数，指定 user 的会话会全部删除 使用请求 接口 HTTP方法 HTTPURI 说明 request acquire POST resource request acquire 申请使用资源 request release POST resource request release 释放资源 request acquire POST resource request acquire 申请使用资源，有以下必要参数 session id 回话ID res type 指定申请的资源类型ID还可以有以下可选参数 res group 指定申请资源的分组 condition 指定资源的属性条件 pool id 制定在资源池中申请资源 property query 通过 属性查询语句 匹配资源可能会返回以下错误 申请的资源目前没有空闲的 HTTP状态码为400，包体code为10001 申请的资源不存在 HTTP状态码为400，包体code为10002 request release POST resource request release 释放资源，有以下必要参数 session id 回话ID res type 指定申请的资源类型ID resource id 要释放资源ID还可以有以下可选参数 pool id 资源释放后放回对应的资源池 使用日志 接口 HTTP方法 HTTPURI 说明 log usage list GET resource log usage 查询资源使用日志 log usage list GET resource log usage query condition 查询使用日志，支持一下查询参数 offset 分页查询偏移 limit 分页查询每页返回上限 res type 只查询特定测试资源类型的日志ID resource id 只查询特定测试资源的日志 session id 查询特定会话的使用日志 pool id 查询特定资源池的使用日志 time before 查询特定时间之前的日志 time after 查询特定时间之后的日志 状态变更日志 接口 HTTP方法 HTTPURI 说明 log status list GET resource log usage 查询资源状态变更日志 log status list GET resource log status query condition 查询状态变更日志，支持一下查询参数 offset 分页查询偏移 limit 分页查询每页返回上限 res type 只查询特定测试资源类型的日志ID resource id 只查询特定测试资源的日志 time before 查询特定时间之前的日志 time after 查询特定时间之后的日志","categorie":"自动化测试-使用 API-测试资源 API"},{"route":"/docs/qta/apis/TASK.html","content":" 测试任务API 目录 测试任务 执行记录 触发器 测试任务 接口 HTTP方法 HTTPURI 说明 plan create POST task plan 创建一个测试任务 plan update PUT task plan plan id 更新测试任务 plan get GET task plan plan id 查询一个测试任务详情 plan list GET task plan 查询测试任务列表 plan create POST task plan .... 创建测试任务需要提供以下必要参数 name 测试任务名称，最大长度不能超过100 project id 测试项目ID testtype id 测试类型ID，测试任务的测试类型不允许修改 resources 列表类型，列表中的元素为资源配置，资源配置详情参见resource介绍，所需的资源配置可以从测试类型的resource字段得到 properties 列表类型，列表中的元素为属性配置，属性配置详情参见property介绍，所需的属性配置可以从测试类型的property字段得到 notifications 列表类型，测试报告通知设置 列表 ，详情参见notifications介绍 owner 负责人，多个负责人以分号间隔其他可选参数有 monitor 布尔类型，是否监控，默认为False priority 整型数字，任务优先级，默认为10，取值范围 10 Low，20 Middle，30 High max waiting num 整型数字，最大任务等待数，默认为10 max running num 整型数字，最大任务执行数，默认为0 exec timeout 字符串类型，任务执行超时时间，默认24h wait timeout 字符串类型，任务等待超时时间，默认24h environ 任务环境变量，Dict类型 artifact id 对应制品ID，Integer类型 repo branch id 用例库分支ID，Integer类型或nullresource介绍，字典类型，参数如下 name 选填，资源名称，默认node类型为执行机，android类型为Android手机，ios类型为iOS手机，必须跟测试类型中定义保持一致。 type 必填，资源类型，支持的资源类型有node android ios group 必填，资源分组名称 max cnt 必填，所需的最大资源数目，不能为0 min cnt 必填，所需的最小资源数目，不能大于min cnt，且不能为0 condition 选填，筛选条件，支持申请指定条件的平台资源，具体写法 参考文档 remark 选填，资源别名，区别于name字段，只用于Web前端展示一个资源配置的例子 json resources name 执行机 , type node , group docker new , max cnt 1, min cnt 1, condition ip 127.0.0.1 , remark 执行节点 , , name Android手机 , type android , group QT4A , max cnt 1, min cnt 1, condition dev mb imei aaa dev mb imei bbb , remark Android , , property介绍，字典类型，参数如下 name 属性名称 value 属性值notifications介绍，列表类型，参数如下 channels 必要参数，列表类型，指定使用通知的方式，详情参考以下“通知方式设置”说明 channel configs 可选参数，字典类型，用于部分通知方式可能需要设定对于的配置信息，字典Key为通知方式名，字典Value为设置信息，详情参考以下“通知方式设置”说明。 receivers 通知接收人，可选参数，列表类型，使用用户名 cc receviers 抄送接收人，可选参数，列表类型，使用用户名，此字段仅对部分支持抄送的通知方式有效 conditionals 通知触发条件，可选参数，字典类型，测试报告满足此条件才能会发送通知，详情参考以下“条件通知设置”说明通知方式说明 channel 说明 需要的channel config参数 sms 短信 email 邮件 qq group QQ群 qqgroup 指定目前群号 wechat oa 微信公众号 wechat work tips 企业微信TIPS wechat work group 企业微信群 group 指定群ID wechat work robot 企业微信机器人 robot url 机器人URL 条件通知 conditionals 设置是一个字典结构，按照以下格式设置 json conditionals 变量名 操作符 操作数 , 操作符 操作数 ,... 从以上格式可以看出，条件设置支持设置多个变量和多个操作符的条件，多个条件的关系是“与”逻辑。目前的支持的变量有 变量名 类型 说明 succeed test rate float 测试通过率 目前的支持的操作符有 操作符 说明 大于或等于 小于或等于 大于 小于 等于 一个条件通知方式设置的例子 json notifications channels sms , qq group , email , receivers foo , jss , cc receivers boss , channel configs qq group qqgroup 100000000 , conditionals succeed test rate 0.9 创建成功会返回 id 任务ID plan update PATCH task plan plan id .... 可以更新以下字段 name 测试任务名称 project id 测试项目ID resources 列表类型，列表中的元素为资源配置，资源配置详情参见resource介绍，所需的资源配置可以从测试类型的resource字段得到 properties 列表类型，列表中的元素为属性配置，属性配置详情参见property介绍，所需的属性配置可以从测试类型的property字段得到 notifications 列表类型，通知方式配置，详情参见notifications介绍 owner 负责人，多个负责人以分号间隔 monitor 布尔类型，是否监控，默认为False priority 整型数字，任务优先级，默认为10，取值范围 10 Low，20 Middle，30 High max waiting num 整型数字，最大任务等待数，默认为10 max running num 整型数字，最大任务执行数，默认为0 exec timeout 字符串类型，任务执行超时时间，默认24h wait timeout 字符串类型，任务等待超时时间，默认24h environ 任务环境变量，Dict类型 artifact id 对应制品ID，Integer类型 repo branch id 用例库分支ID，Integer类型 plan get GET task plan plan id 查询任务详情信息，返回结果 id 任务ID name 任务名称 owner 负责人 project id 项目ID testtype id 测试类型ID receiver 测试任务的通知人 notifications 测试任务的通知方式，列表类型 resources 测试任务的资源配置，列表类型 properties 测试任务的属性配置，列表类型 depressed testtype id 将被废弃的测试类型ID monitor 监控标志，默认为False priority 任务优先级，取值范围 10 Low，20 Middle，30 High max waiting num 最大任务等待数，默认为10 max running num 最大任务执行数，默认为0 exec timeout 任务执行超时时间，为None时默认24h wait timeout 任务等待超时时间，为None时默认24h environ 任务环境变量，Dict类型 artifact id 对应制品ID，Integer类型或null repo branch id 用例库分支ID，Integer类型或null project display 项目名称展示 plan list GET task plan query condition 查询测试任务列表，URL支持以下查询条件 offset 分页查询偏移 limit 分页查询每页返回上限 orderby 只支持按照id排序，升序 id ，降序 id name 模糊匹配测试任务名称 project id 测试项目ID owner 任务负责人，支持模糊匹配 repo branch id 用例库分支ID，支持批量查询，例如 repo branch id 1 repo branch id 2 testtype id 测试类型ID，支持批量查询，例如 testtype id 1 testtype id 2 search 模糊搜索任务名称 负责人 创建人 修改人 任务ID 通知信息 通知人 执行记录 接口 HTTP方法 HTTPURI 说明 task create POST task task 启动一个测试任务并创建一次执行记录 task update PUT task task task id 更新测试报告id task cancel POST task task task id cancel 取消测试任务 task get GET task task task id 查询一次执行记录详情 task list GET task task 查询执行记录列表 task status GET task task task id status 任务状态回调 task create POST task task .... 启动测试任务需要提供以下可选参数 plan id 测试任务ID，默认必填，获取方式 QTA平台任务页面 ，任务表格第一列 在有report id的情况下可以不传 应用于报告批量重跑 name 测试报告名称 properties 测试任务的属性配置，列表类型，如 name , value ，属性名称参考测试任务属性配置的名称，如果不填，则会复用测试任务的配置。参考properties参数 properties name QTAF SETTINGS , value pythoncode report id 测试报告ID，包批量重跑时，传入已运行结束的报告id，可以重新运行报告对应的任务 environ 任务环境变量，Dict类型，如果测试任务原本设置有环境变量，则会合并，变量名相同的变量则会覆盖 notifications 列表类型，测试报告通知设置 列表 ，可参见 plan create 的notifications介绍 artifact id 对应制品ID，Integer类型 repo branch id 用例库分支ID，Integer类型或null，同时传用例库URL，优先使用repo branch id创建成功会返回的信息有 id 任务ID name 任务名称 status 任务状态，任务状态有 init , delivering , waiting , running , done , error , cancelling , cancelled init 初始化 delivering 下发中 waiting 等待中 running 执行中 done 已完成 error 异常 cancelling 取消中 cancelled 已取消 report id 报告ID，报告ID可能一开始是不存在的 run log url 任务运行日志 start time 任务的开始时间 start run time 任务的开始运行时间 end time 任务的结束时间 project display 项目名称展示 repo branch id 用例库分支ID，Integer类型或null task update PATCH task task task id .... 只能更新以下字段 report id 报告id ref report id 参考报告id task cancel POST task task task id cancel .... 取消测试任务无需提供参数返回结果 如果任务正在运行，则取消成功，无任何返回 否则返回任务已执行完的错误。 task get GET task task task id 查询执行记录详情，返回结果 id 任务ID name 任务名称 status 任务状态，任务状态有 init , waiting , running , done , error , cancelling , cancelled report id 报告ID，报告ID可能一开始是不存在的 run log url 任务运行日志 start time 任务的开始时间 start run time 任务的开始运行时间 end time 任务的结束时间 receiver 测试任务的通知人 channel 测试任务的通知方式 start people 任务启动人 resources 测试任务的资源配置，列表类型 properties 测试任务的属性配置，列表类型 trigger id 触发器id，非触发器方式启动，该字段为null artifact id 对应制品ID，Integer类型或null project display 项目名称展示 repo branch id 用例库分支ID，Integer类型或null task list GET task task query condition 查询执行记录列表，URL支持以下查询条件 offset 分页查询偏移 limit 分页查询每页返回上限 orderby 只支持按照id排序，升序 id ，降序 id name 模糊匹配测试任务名称 plan id 测试任务ID，获取方式 QTA平台任务页面 ，任务表格第一列 project id 测试项目ID testtype id 测试类型ID，支持批量查询 status 测试任务状态，支持批量查询，例如 status running status delivering run id drun任务id start people 启动人，支持模糊匹配 trigger id 触发器ID trigger type 触发器类型，支持批量查询，例如 trigger type crontab trigger type periodic triggered 是否触发器触发，例如 triggered false或triggered true start time 启动时间，例如 start time after 2019 12 1608 27 18 start time before 2019 12 1610 27 18 end time 结束时间，例如 end time after 2019 12 1608 27 18 end time before 2019 12 1610 27 18 search 模糊搜索任务名称 启动人 任务ID task status POST task task task id status 提供给第三方执行系统，用于切换任务状态，需要提供以下必要参数 prev status 前一个任务状态 next status 下一个任务状态任务状态有， init , delivering , waiting , running , done , error , cancelling , cancelled ，其含义为 init 初始化 delivering 下发中 waiting 等待中 running 执行中 done 已完成 error 异常 cancelling 取消中 cancelled 已取消 触发器 接口 HTTP方法 HTTPURI 说明 trigger create POST task trigger 创建一个触发器 trigger update PUT task trigger trigger id 更新触发器 trigger get GET task trigger trigger id 查询一个触发器详情 trigger list GET task trigger 查询触发器列表 trigger create POST task trigger .... 创建触发器需要提供以下必要参数 name 触发器名称 enabled 触发器是否可用 plan id 绑定的测试任务ID，获取方式 QTA平台任务页面 ，任务表格第一列 trigger type 触发器类型，有 datetime periodic crontab wxworkbot qci api config 触发器配置，字典类型，根据触发器类型区分，配置详情参见触发器类型及配置介绍触发器类型及配置介绍 datetime 定时触发，指定某个时间执行，该时间不能小于当前时间，配置设置为config time 2019 06 3012 00 ，其中时间格式为 Y m d H M periodic 周期触发，指定间隔时间执行，间隔单位为 天 时 分 秒，配置设置为config type minute , interval 20 ，即每间隔20分钟执行一次 crontab crontab触发，指定cron表达式，配置设置为config cron 0 ，参考linux的crontab创建成功返回 id 触发器ID trigger update PATCH task trigger trigger id .... 可以更新以下字段 name 触发器名称 enabled 触发器是否可用 plan id 绑定的测试任务ID，获取方式 QTA平台任务页面 ，任务表格第一列 config 触发器配置，字典类型，根据触发器类型区分，配置详情参见触发器类型及配置介绍 trigger get GET task trigger trigger id 查询触发器详情信息，返回结果 id triggerID name trigger名称 enabled 触发器是否可用，布尔类型 plan id 绑定测试任务ID trigger type 触发器类型 config 触发器配置，字典类型 create time 创建时间 modify time 修改时间 project display 项目名称展示 trigger list GET task trigger query condition 查询触发器列表，URL支持以下查询条件 offset 分页查询偏移 limit 分页查询每页返回上限 orderby 只支持按照id排序，升序 id ，降序 id name 模糊匹配测试任务名称 plan id 测试任务ID trigger type 触发器类型 project id 测试项目ID testtype id 测试类型ID enabled 触发器状态 search 模糊搜索触发器名称和创建人 config 模糊搜索配置信息，例如 config k8s probe，可搜索出kubernetesProbe触发器","categorie":"自动化测试-使用 API-测试任务 API"},{"route":"/docs/qta/apis/TESTCASE.html","content":" 测试用例API 目录 测试用例库 测试用例库分支 测试用例 用例加载错误 测试用例配置集 测试用例库 接口 HTTP方法 HTTPURI 说明 testcaserepo create POST tescase testcaserepo 创建一个测试用例库 testcaserepo update PUT tescase testcaserepo repo id 更新测试用例库 testcaserepo get GET tescase testcaserepo repo id 查询测试用例库数据 testcaserepo list GET tescase testcaserepo 查询测试用例库列表 testcaserepo create POST testcase testcaserepo .... 必要参数列表 name 字符串类型，用例库名称，长度不能超过128字节 url 字符串类型，SVN GIT仓库的URL地址 project id 字符串类型，项目ID creator 字符串类型，创建者英文名 testtool 字符串类型，测试工具ID，如 qt4a jest 等可选参数列表 params 列表类型，用例库参数列表，列表中每个元素格式为 name param name , value param value configmap bindings 关联绑定的配置集，列表类型，每个元素按照格式 binding type 绑定类型，目前支持两种环境变量 environ 和文件映射 file mapped configmap 配置集ID file relative path 仅文件映射 file mapped 类型的绑定有效，指定映射到代码库中的相对路径创建成功会返回 id 用例库ID testcaserepo update PUT testcase testcaserepo repo id ... 可以更新的字段有 name 字符串类型，用例库名称，长度不能超过128字节 testtool 字符串类型，测试工具ID，如 qt4a jest 等 params 列表类型，用例库参数列表，格式与创建时的格式一致 configmap bindings 关联绑定的配置集 testcaserepo get GET testcase testcaserepo repo id 查询用例库信息，返回结果如下 id 用例库ID name 用例库名称 url SVN GIT仓库的URL地址 project id 项目ID creator 创建者英文名 testtool 测试工具ID，如 qt4a jest 等 branches 用例库分支列表 params 用例库参数列表 configmap bindings 关联绑定的配置集 testcaserepo list GET testcase testcaserepo query condition 查询用例库列表，可以使用的过滤条件有 project id 项目ID url 代码仓库的URL 测试用例库分支 接口 HTTP方法 HTTPURI 说明 testcasebranch create POST tescase testcasebranch 创建一个用例库分支 testcasebranch update PUT tescase testcasebranch branch id 更新用例库分支 testcasebranch get GET tescase testcasebranch branch id 查询用例库分支数据 testcasebranch list GET tescase testcasebranch 查询用例库分支列表 testcasebranch create POST testcase testcasebranch .... 必要参数列表 repo id 整型，用例库ID branch name 字符串类型，分支名创建成功会返回 id 用例库分支ID testcasebranch update PUT testcase testcasebranch branch id ... 可以更新的字段有 status 字符串类型，用例库分支状态，取值范围为 ok error init updating testcasebranch get GET testcase testcasebranch branch id 查询用例库分支信息，返回结果如下 id 用例库分支ID repo id 对应的用例库ID repo url 对应的用例库URL branch name 分支名 status 用例库分支状态 qci task id QCI任务ID last update time 上次更新时间 testcasebranch list GET testcase testcasebranch 查询用例库分支列表，可以使用的过滤条件有 repo id 用例库ID repo url 用例库URL branch name 分支名 project id 项目ID 测试用例 接口 HTTP方法 HTTPURI 说明 testcase create POST tescase testcasebranch branch id testcase 创建一个用例 testcase update PUT tescase testcasebranch branch id testcase case id 更新用例数据 testcase get GET tescase testcasebranch branch id testcase case id 查询用例数据 testcase list GET tescase testcasebranch branch id testcase 查询用例列表 testcase create POST testcase testcasebranch branch id testcase ... 必要参数列表 name 用例名称，需要在当前用例库分支保证唯一性，相同的名称的用例会被认为是同一个用例可选字段列表 可以使用任意字段所有可选字段都会被认为是该用例的属性，例如QTA用例一般会包含 owner priority status description 等属性 testcase update PUT testcase testcasebranch branch id testcase case id ... 可以更新的字段 除 name 以外的其它字段都可以更新 testcase get GET testcase testcasebranch branch id testcase case id 查询用例信息，返回结果如下 id 用例ID name 用例名称 其它属性字段 testcase list GET testcase testcasebranch branch id testcase 查询用例列表，可以使用的过滤条件有 name 用例名中包含的字符串 用例加载错误 接口 HTTP方法 HTTPURI 说明 loaderror create POST tescase testcasebranch branch id loaderror 创建一个用例加载错误 loaderror update PUT tescase testcasebranch branch id loaderror err id 更新用例错误数据 loaderror get GET tescase testcasebranch branch id loaderror err id 查询用例错误信息 loaderror list GET tescase testcasebranch branch id loaderror 查询用例加载错误列表 loaderror create POST testcase testcasebranch branch id loaderror ... 必要参数列表 module path 字符串类型，加载失败的模块路径 description 字符串类型，错误描述 stack 字符串类型，错误堆栈 loaderror update PUT testcase testcasebranch branch id loaderror err id ... 可以更新的字段 description 错误描述 stack 错误堆栈 loaderror get GET testcase testcasebranch branch id loaderror err id 查询用例加载错误，返回结果如下 id 错误ID module path 模块路径 description 错误描述 stack 错误堆栈 loaderror list GET testcase testcasebranch branch id loaderror 查询用例错误列表，可以使用的过滤条件有 path 用例错误的模块路径 用例包路径 接口 HTTP方法 HTTPURI 说明 package get GET tescase testcasebranch branch id package package id 查询用例包路径 package list GET tescase testcasebranch branch id package 查询用例包列表 package get GET testcase testcasebranch branch id package package id 查询指定版本的包路径，返回结果如下 version 版本 url 用例包的下载地址如果 package id 使用 HEAD ，则返回当前最新包 如果打包服务还在执行，则返回 404 。 package list GET testcase testcasebranch branch id package 查询所有的包路径列表。 测试用例配置集 接口 HTTP方法 HTTPURI 说明 configmap create POST testcase configmap 创建测试用例配置集 configmap get GET testcase configmap configmap id 查询测试用例配置集详情 configmap list GET testcase configmap 查询测试用例配置集列表 configmap update PUT PATCH testcase configmap configmap id 更新测试用例集配置 configmap delete DELETE testcase configmap configmap id 删除测试用例配置集 configmap lock POST testcase configmap configmap id lock 锁定一个测试用例配置集 写入锁 configmap clean POST testcase configmap configmap id clean 释放或强制清理一个测试用例配置集锁 configmap configs list GET testcase configmap configmap id configs 查询测试用例配置集的全部配置项列表 configmap configs create POST testcase configmap configmap id configs 为测试用例配置集新增创建一个配置项 configmap configs update PUT testcase configmap configmap id configs config id 修改一个配置项 configmap configs delete DELETE testcase configmap configmap id configs config id 删除一个配置项 configmap create创建一个测试用例库配置集 POST testcase configmap ... 必要参数列表 project id 项目ID name 测试用例配置名，在一个项目下唯一 configs 配置项列表，每个配置需要按照以下格式 name 配置项名，集合内唯一 value 配置项值 encrypted 是否加密存储，bool类型创建成功会返回配置ID configmap get查询一个测试用例配置集详情 GET testcase configmap configmap id 查询返回以下字段 project id 项目ID name 测试用例配置名，在一个项目下唯一 create time 创建时间 creator 创建者这个接口不会返回配置项列表，请使用 configmap configs list 接口查询一个测试用例配置集的配置项列表 configmap get查询测试用例配置集列表 GET testcase configmap 返回字段同 configmap get configmap update更新测试用例配置集详情 PUT testcase configmap configmap id 如果只需要更新部分字段，可以使用PATCH命令 PATCH testcase configmap configmap id PUT和PATCH都支持以下字段的更新 project id 项目ID name 测试用例配置名，在一个项目下唯一可以通过PATCH命令，批量更新测试用例配置项 configs 的内容，需要有以下必要参数 transaction id 写入事务ID，通过 configmap lock 接口获取 configs 要增量写入或变更的配置项列表，每个配置需要按照以下格式 name 配置项名，集合内唯一 value 配置项值 encrypted 是否加密存储，bool类型主要写入更新完成后，需要调用 configmap clean 接口释放锁 configmap delete删除测试用例配置集详情 DELETE testcase configmap configmap id configmap lock锁定一个测试用例配置集 POST testcase configmap configmap id lock 调用成功会返回 transaction id 事物ID，可以用于批量写入更新测试用例配置项 configmap clean释放或强制清理一个测试用例配置集锁 POST testcase configmap configmap id clean 如果要释放一个测试用例配置集锁，则需要提供一个必要参数 transaction id 事物ID，需要和锁定时调用的 configmap lock 接口返回的transaction id一致释放测试用例配置集锁后，写入事物完成，系统会自动清理删除不必要的配置项。如果是强制清理锁，可以不提供任何参数，但强制清理锁可能会破话写入事物的隔离性，造成数据不一致的问题，请慎用。 configmap configs list查询测试用例配置集的全部配置项列表 GET testcase configmap configmap id configs configmap configs create为测试用例配置集新增创建一个配置项 POST testcase configmap configmap id configs 包括以下必要参数 name 配置项名，集合内唯一 value 配置项值 encrypted 是否加密存储，bool类型 configmap configs update修改一个配置项 PUT PATCH testcase configmap configmap id configs config id 支持修改以下字段 name 配置项名，集合内唯一 value 配置项值 encrypted 是否加密存储，bool类型 configmap configs delete删除一个配置项 DELETE testcase configmap configmap id configs ","categorie":"自动化测试-使用 API-测试用例 API"},{"route":"/docs/qta/app/INDEX.html","content":" 自动化测试应用","categorie":"自动化测试-自动化测试应用"},{"route":"/docs/qta/autotest/INTRO.html","content":" 自动化测试服务 自动化用例管理QTA自动化测试用例管理让你更加了解你的自动化测试用例 提供可视化用例管理界面 提供测试用例相关数据报表 结合 ATT用例管理 实现自动化用例和手工用例的关联，提供用例增长趋势 自动化程度覆盖率等统计表盘 结合 Codedog 提供的静态代码扫描服务帮助用户优化和提升测试用例的代码质量 提供自动化测试工程脚手架，快速上手入门自动化测试用例构建 自动化测试执行QTA提供测试执行服务，让自动化测试更快更全面的执行，充分扩大自动化测试的效益 提供分布式执行，让测试执行更快，结果更快触达 丰富的任务触发方式，让自动化测试更多更紧密地和研发过程结合 自动化测试资源QTA提供测试自动化常见的测试资源服务和资源托管服务 提供Android iOS Windows Mac Linux和Docker容器等多种执行环境资源 提供被测对象数据配置管理数据服务，解决测试资源构造和使用互斥问题 提供多维度测试资源使用和监控数据 自动化测试报告QTA测试报告让你快速地定位和分析问题 提供多纬度分析的测试结果报告 测试问题自动聚类和提单 提供代码覆盖率 开发中 提供监控数据和性能数据的存储 逻辑判断分析等 开发中 ","categorie":"自动化测试-自动化测试服务"},{"route":"/docs/qta/autotest/PROJECT.html","content":" 测试项目 创建或加入已有项目Coding平台和QTA平台的测试项目入口不同。Coding平台创建项目，请参考 这里 操作，无需往下阅读。QTA平台创建或加入已有项目请到 这里 操作，具体步骤如下 创建项目 QTA项目页面 点击创建新项目,填写信息提交即可 创建项目 加入已有项目 加入项目页面 找到对应项目 点击加入 加入项目 然后弹出谁是管理员的提示，找对应管理员添加即可 管理员添加成员提示 获取项目ID项目ID可以从你的coding qtaurl中读取到，如我的一个coding链接是 http tencent.coding.oa.com p qtap docs demos qta testcase ，项目ID则是 qtap docs demos ， 在Coding平台找到你的项目id，选择项目 左侧侧边栏 点击自动化测试。项目id如下 管理员添加成员提示 在QTA平台找到你的项目id 如果未有项目请先在 QTA平台创建项目 ，项目id如下 管理员添加成员提示 该项目ID在后续的ci插件中可能会用到。","categorie":"自动化测试-自动化测试服务-测试项目"},{"route":"/docs/qta/autotest/REPORT.html","content":" 测试报告QTA平台测试报告提供线上的测试自动化报告存储 展示和数据分析等服务，让你快速地定位和分析问题。 目录 查看测试报告 测试报告格式 自助上传报告 ","categorie":"自动化测试-自动化测试服务-测试报告"},{"route":"/docs/qta/autotest/RESOURCE.html","content":" 资源管理资源管理是用于托管自动化测试需要使用到的被测资源对象的数据系统。对于自动化测试来说，资源管理解决几个主要的问题 实现并行测试执行 让自动化测试能并行得执行且不互相干扰 降低测试环境或被测对象构造负担 让自动测试用例能在保证不互相依赖 原子性 的前提下，共享使用同一被测对象资源，同时降低在测试过程中构造测试环境或对象构造的负担此外，通过资源管理可以 记录维度测试资源使用日志，并获取统计数据 实现测试资源使用隔离和权限控制 通过自定义监控检查，实现资源可用性状态更新和记录目前，除了测试执行所需要的设备和环境的资源类型外 包括执行节点 Android iOS设备 ，主要内置了 测试账号 的资源类型，用户可以根据自己的业务需要，自定义新的资源类型，详情请参考 自定义资源类型 ","categorie":"自动化测试-自动化测试服务-资源管理"},{"route":"/docs/qta/autotest/TASK.html","content":" 测试执行QTA提供测试执行服务，让自动化测试更快更全面的执行，充分扩大自动化测试的效益。托管在QTA的测试用例可以有多种不同的执行方式 通过 测试任务 执行，支持分布式执行加速，QTA提供通用的基础执行环境和设备资源，也支持用户使用自己搭建的环境或设备资源 本地执行测试 通过QTA提供的命令行工具，在自己指定的环境下执行 离线执行测试 通过部署QTA独立版服务，在离线环境或私有化网络环境下执行测试此外，即使测试用例不托管在QTA，且在自己的环境下执行，也能将测试报告的数据上报给QTA并使用测试报告的全部功能，详情请参考 自助上传报告 。","categorie":"自动化测试-自动化测试服务-测试执行"},{"route":"/docs/qta/autotest/TESTCASE.html","content":" 测试用例QTA自动化测试用例管理让你更加了解你的自动化测试用例。目前主要提供 测试用例库托管和可视化数据 测试用例配置中心 ","categorie":"自动化测试-自动化测试服务-测试用例"},{"route":"/docs/qta/change/20190613.html","content":" 20190613本期更新解决了这些 issues 。本期更新概览如下 自助上传报告 用户可实现上传其第三方报告进行展示。 报告中用例批量重跑 用户可在QTA平台选择用例重跑。 测试任务资源编辑 用户可在QTA平台编辑测试任务的资源配置。 支持微信小程序测试 创建用例库时可以选择微信小程序测试。 自助上传报告 功能 用户自行上传报告到QTA平台进行展示，包括第三方框架的报告，均可上传QTA平台进行展示 使用方法 Coding平台 个人项目下 左侧侧边栏 自动化测试 用例 QTA平台 个人项目下 左侧侧边栏 报告 自助上传报告，即可根据文档进行操作 入口 报告中用例批量重跑 功能 当有部分用例不通过想要重跑时使用 报告名称命名规则 当多次批量重跑时，报告名称只出现一次批量重跑字样，命名为xx运行报告 批量重跑by rtx 使用方法 Coding平台 个人项目下 左侧侧边栏 自动化测试 报告 勾选要重跑的用例 批量重跑 QTA平台 个人项目下 左侧侧边栏 报告 勾选要重跑的用例 批量重跑 入口 测试任务资源编辑 功能 编辑测试任务的资源配置 使用方法 Coding平台 自动化测试 任务 新增任务 某个任务 QTA平台 任务 新增任务 某个任务，即可根据文档进行操作 入口 支持创建微信小程序测试项目 功能 创建用例库时可以选择 QTA微信小程序自动化测试 类型，会自动生成微信小程序测试框架代码 使用方法 Coding平台 自动化测试 用例 新建用例库 QTA平台 用例库 新建用例库 入口 ","categorie":"自动化测试-Changelog-2019.06.13"},{"route":"/docs/qta/change/20190627.html","content":" 20190627本期更新解决了这些 issues 。本期更新概览如下 资源分组操作 用户可以自主关联 取消关联 新建 删除资源分组。 支持使用Windows执行机加载QT4C用例 QT4C项目使用Windows执行机加载用例 支持展示Jest测试用例 支持展示Jest测试用例 FixBug 解决报告列表加载数据慢问题 资源分组操作 功能 用户自主操作资源分组 关联 取消关联 新建 删除资源 使用方法 Coding平台 自动化测试 资源 某种资源 分组管理 QTA平台 资源 某种资源 分组管理 入口 .png 支持使用Windows执行机加载QT4C用例 功能 对于 QT4C 项目，自动使用 Windows 执行机创建用例解析任务，不会再因为win32库导致用例加载失败了 使用方法 Coding平台 自动化测试 用例库 打开QT4C项目 测试用例 QTA平台 用例库 打开QT4C项目 测试用例 入口 支持展示Jest测试用例 功能 可以展示Jest项目的测试用例，并且支持使用用例 负责人 和 优先级 过滤用例 使用方法 Coding平台 自动化测试 用例库 打开Jest项目 测试用例 QTA平台 用例库 打开Jest项目 测试用例 入口 解决报告列表加载数据慢问题 FixBug 原先加载每个报告通过率一列速度过慢，已修复 使用方法 Coding平台 自动化测试 报告 QTA平台 报告 入口 ","categorie":"自动化测试-Changelog-2019.06.27"},{"route":"/docs/qta/change/20190711.html","content":" 20190711本期更新解决了这些 issues 。本期特性更新概览如下 按分组查看资源 用户可以按资源分组查看资源 复制测试计划 支持测试计划的复制 测试计划超时控制 支持新测试类型的测试计划的超时控制 报告展示丰富功能 优化QTA类型的新报告页面前端展示，丰富系列功能点 新增个人中心 可以通过个人中心管理项目和Token本期缺陷修复概览如下 FixBug 个别测试报告进度显示不正确 FixBug report 用例详情特殊字符过滤及字段为None的情况处理 FixBug 测试报告任务ID为空，不应该有重跑的入口 FixBug 报告的druniframe日志无法滑动查看，导致日志不全 按分组查看资源 功能 用户可以按资源分组查看资源 使用方法 Coding平台 自动化测试 资源 某种资源 点击分组名 QTA平台 资源 某种资源 点击分组名 入口 复制测试计划 功能 支持测试计划的复制 使用方法 Coding平台 自动化测试 任务列表 某个任务 复制 QTA平台 任务 某个任务 复制 入口 测试计划超时控制 功能 支持新测试类型的测试计划的超时控制 使用方法 Coding平台 自动化测试 任务列表 某个任务 下拉高级配置 QTA平台 任务 某个任务 下拉高级配置 入口 报告展示丰富功能优化的点如下 报告首页用例错误日志支持排序 加载失败用例点击错误日志可以看到详细的加载堆栈错误日志 其他展示优化的点详细见 issue 新增个人中心通过个人中心可以管理个人参与的项目和Token，请 点击 访问使用。Coding平台尚未支持。 ","categorie":"自动化测试-Changelog-2019.07.11"},{"route":"/docs/qta/change/20190725.html","content":" 20190725本期更新解决了这些 issues 。本期特性更新概览如下 触发器优化周期配置 用户可以方便地设置每天定时跑任务。 创建和关联用例库支持参数 创建 关联用例库可以设置测试工具中设置的参数。 创建打包任务自动设为public 创建qci打包任务时自动设为public。本期缺陷修复概览如下 FixBug 腾讯云性能自动化性能tab在部分报告未展示 触发器优化周期配置 功能 用户可以方便地设置每天定时跑任务 使用方法 Coding平台 自动化测试 触发器 新增触发器 选择周期触发 QTA平台 执行 触发器 新增触发器 选择周期触发 入口 创建和关联用例库支持参数 功能 创建 关联用例库可以设置测试工具中设置的参数，如 Python版本等 使用方法 Coding平台 自动化测试 用例库 用例库详情页 详情页首页 QTA平台 用例库 用例库详情页 详情页首页 入口 创建打包任务自动设为public 功能 创建qci打包任务时自动设为public，用例库信息页将任务id改为qci徽章，所有人都有权限查看qci任务 使用方法 Coding平台 自动化测试 用例库 用例库详情页 详情页首页 QTA平台 用例库 用例库详情页 详情页首页 入口 ","categorie":"自动化测试-Changelog-2019.07.25"},{"route":"/docs/qta/change/20190808.html","content":" 20190808本期更新解决了这些 issues 。本期特性更新概览如下 新增KubenetersProbe触发器 新增KubenetersProbe触发器对新部署的Pod进行验证 支持任务环境变量 支持配置任务环境变量，在用例中可以读取 自助部署执行节点 用户可将自己的PC或服务器或容器接入QTA平台作为执行节点，本功能提供自助部署执行节点的方式 用例详情增加执行机 测试报告中每个用例的详情页增加执行机名称及执行机IP本期缺陷修复概览如下 FixBug 报告批量重跑跳转问题修复 新增KubenetersProbe触发器 功能 通过KubenetersProbe触发器，可以实现在KubenetersPod扩容时，对新部署的Pod使用QTA自动化测试进行验证，且只有验证通过的Pod才会上线服务。 文档 参考文档 KubenetersProbe触发器 使用方法 QTA平台 自动化测试 执行 触发器 新增触发器 选择kubernetesProbe触发 支持任务环境变量 功能 支持配置任务环境变量，在用例中可以读取。需要在任务中传递给用例的参数，可用该方法实现。Coding平台尚未支持。 使用方法 QTA平台 自动化测试 任务 某个任务 高级配置 环境变量 入口 自助部署执行节点 功能 用户可将自己的PC或服务器或容器接入QTA平台作为执行节点，本功能提供自助部署执行节点的方式。Coding平台尚未支持。 文档 参考文档 部署执行节点 使用方法 参照文档进行，最后在 QTA平台 个人中心 我的节点可看到部署成功的节点。 用例详情增加执行机 功能 测试报告中每个用例的详情页增加执行机名称及执行机IP，供用例失败时辅助定位原因用 入口 ","categorie":"自动化测试-Changelog-2019.08.08"},{"route":"/docs/qta/change/20190822.html","content":" 20190822本期更新解决了这些 issues 。本期特性更新概览如下 测试任务创建支持条件通知 测试任务创建已支持条件通知 支持触发器的修改 触发器创建后，可支持修改 提供视频介绍 提供视频介绍，供用户快速了解QTA的功能 测试报告支持配置数据报表 自助上传的测试报告支持配置grafana数据报表 测试任务创建支持条件通知 功能 支持创建测试任务时，根据不同条件指定不同的通知方式 使用方法 Coding平台 自动化测试 任务列表 新增任务 新增通知设置 QTA平台 执行 任务 新增任务 新增通知设置 入口 支持触发器的修改 功能 触发器创建后，可进行修改 使用方法 Coding平台 自动化测试 触发器 选择某个触发器 编辑 QTA平台 自动化测试 执行 触发器 选择某个触发器 编辑 入口 提供视频介绍 功能 提供视频介绍，供用户快速了解QTA的功能 下载地址 QTA介绍 测试报告支持配置数据报表 功能 自助上传的测试报告，需要统计历史执行情况，可联系 QTA管理员 为你配置grafana数据报表 示例 ","categorie":"自动化测试-Changelog-2019.08.22"},{"route":"/docs/qta/change/20190905.html","content":" 20190905本期更新解决了这些 issues 。本期特性更新概览如下 触发器添加搜索功能 支持按照触发器名称 创建人进行模糊搜索 资源管理 支持资源的查看 编辑,资源分组的资源查看本期修复的缺陷如下 FixBug 触发器编辑后未提交展示的内容发生变化 FixBug junit报告用例详情package没展示 FixBug 上传用例报http400 触发器添加搜索功能 功能 支持按照触发器名称 创建人进行模糊搜索 使用方法 Coding平台 自动化测试 触发器 搜索框搜索 QTA平台 自动化测试 执行 触发器 搜索框搜索 入口 资源管理 功能 支持资源的查看 编辑,资源分组的资源查看 使用方法 Coding平台 自动化测试 资源 QTA平台 资源 入口 ","categorie":"自动化测试-Changelog-2019.09.05"},{"route":"/docs/qta/change/20190926.html","content":" 20190926本期更新解决了这些 issues 。本期特性更新概览如下 新资源 制品库 支持新资源 制品库 支持上传安装包 支持上传多个安装依赖包，支持关联已有的制品库 任务批量操作 支持多个任务的批量修改 制品库 功能 管理 查看托管在QTA平台的制品库，Coding平台尚未支持 使用方法 QTA平台 资源 制品库 入口 支持上传安装包 功能 支持上传多个安装依赖包，支持关联已有的制品库 使用方法 Coding平台 自动化测试 任务列表 创建任务 编辑任务 QTA平台 执行 任务 创建任务 编辑任务 入口 任务批量操作 功能 一次性修改多个任务的信息 用例库,负责人等,一次性启动 删除多个任务 使用方法 Coding平台 自动化测试 任务列表 批量操作 QTA平台 任务 批量操作 入口 ","categorie":"自动化测试-Changelog-2019.09.26"},{"route":"/docs/qta/change/20191017.html","content":" 20191017本期更新解决了这些 issues 。本期特性更新概览如下 增加码客圈子入口 QTA平台增加码客QTA自动化测试圈子入口 优化资源分组入口 QTA平台优化资源在找不到需要的分组时的指引 触发器 企业微信机器人回调接口页面 展示设置企业微信机器人的说明文档 增加资源使用历史 QTA平台资源管理页面添加使用历史本期修复的缺陷如下 FixBug 部分老任务有webhook参数导致报告通知异常 FixBug 修复任务与项目不匹配时的用例库不存在误报 FixBug 修复可能误删除正在使用的用例库 FixBug 修复兼容性报告链接的兼容 FixBug QCI任务没有自动启动时调用接口启动 增加码客圈子入口 功能 在QTA平台增加码客QTA自动化测试圈子的两个入口，欢迎用户通过 码客的QTA自动化测试圈子 提问 使用方法一 QTA平台 开始 Q A 入口一 使用方法二 QTA平台 帮助中心 交流 码客Q A 入口二 触发器 企业微信机器人回调接口页面 功能 展示设置企业微信机器人的说明文档 使用方法 Coding平台 自动化测试 触发器 配置 点击访问 QTA平台 执行 触发器 配置 点击访问 入口 优化资源分组入口 功能 在QTA平台编辑任务 资源时,用户找不到需要的分组时,给出更明确的指引 使用方法一 QTA平台 任务 某个任务 编辑 资源模块 使用方法二 QTA平台 资源 某个资源 编辑 分组信息 使用方法三 QTA平台 资源 选择多个某个资源 更改分组 入口一 入口二 入口三 增加资源使用历史 功能 在QTA查看某个资源时使用历史,方便回顾资源问题 使用方法 Coding平台 自动化测试 资源 某个资源 使用记录 QTA平台 资源 某个资源 使用记录 入口 ","categorie":"自动化测试-Changelog-2019.10.17"},{"route":"/docs/qta/change/20191031.html","content":" 20191031本期更新解决了这些 issues 。本期特性更新概览如下 ConfigMap QTA平台增加ConfigMap配置功能 优化任务修改检测 QTA任务有修改时,提醒用户启动前保存任务 优化用例库创建 展示设置企业微信机器人的说明文档本期修复的缺陷如下 FixBug 创建测试计划接口，owner字段设置无效，只能设置为本人 ConfigMap 功能 QTA平台增加ConfigMap配置功能 使用方法 Coding平台 自动化测试 用例库 某一用例 关联配置 详细文档 QTA平台 用例 配置 详细文档 入口 优化任务修改检测 功能 任务有修改时,提醒用户启动前保存任务 使用方法 Coding平台 自动化测试 任务 任务 编辑 启动 QTA平台 执行 任务 编辑 启动 入口 优化用例库创建 功能 引导用户新建用例库 使用方法 Coding平台 自动化测试 用例库 新建 QTA平台 用例 用例库 新建 入口 ","categorie":"自动化测试-Changelog-2019.10.31"},{"route":"/docs/qta/change/20191114.html","content":" 20191114本期更新解决了这些 issues 。本期特性更新概览如下 报告支持上报链接展示内容 报告支持上传url并展示本期修复的缺陷如下 FixBug QTA任务结束后，报告未正常结束 FixBug 修复偶现的任务一直保持为下发中状态 报告支持上报链接展示内容 功能 报告支持上传url，在报告首页会增加一个tab，与报告结论同级，将url内容以iframe展示 使用方法 安装qtap cli并调用其上传报告,详细qtap cli工具见 链接 使用qtap cli登录并创建完报告后，假设报告id为12401847，即可开始调用命令上传url qtapreportupload attachment n 性能分析 t url u http adsfs sda 后，即可在报告中看到多出一些tab以iframe形式展示你的url内容。 报告中展示入口 ","categorie":"自动化测试-Changelog-2019.11.14"},{"route":"/docs/qta/change/20191128.html","content":" 20191128本期更新解决了这些 issues 。本期特性更新概览如下 丰富资源使用的库 新增Java语言版的资源使用相关的SDK库。 报告支持上报用例文件 测试报告API支持将整个用例结果文件上传，目前只支持junit格式用例 报告接口文档更新 报告支持上传url的API文档已更新 丰富资源使用的库 功能 新增Java语言版的资源使用相关的SDK库，如果你习惯用Java开发，可调用该SDK进行QTA平台的测试资源的使用，该库目前仅支持账号资源申请和释放。 使用方法 SDK调用，详细接口文档见 链接 报告支持上报用例文件 功能 测试报告API支持将整个用例结果文件上传，目前只支持junit格式用例，上传其用例xml文件，报告后台会自动解析里面所有用例分别存储。 使用方法 RestAPI调用，详细接口文档见 链接 中的qtap java sdk库介绍。 报告接口文档更新 功能 报告支持上传url，并在报告中将url的内容内嵌展示出来的API文档已更新 使用方法 RestAPI调用，详细接口文档见 链接 ","categorie":"自动化测试-Changelog-2019.11.28"},{"route":"/docs/qta/change/20191212.html","content":" 20191212本期更新解决了这些 issues 。本期特性更新概览如下 测试报告支持附件上传 测试报告支持附件上传，并在报告中直接展示内容，或点击下载按钮下载 用例库列表添加搜索功能 支持按照用例库名称进行模糊搜索 任务模块用例选择树支持加载失败用例的展示 新建任务页面 任务信息页面的用例选择树支持加载失败用例的展示及选择 线上支持python3运行QTA任务 支持用例库设置为python3，并且使用python3运行该用例库的所有任务 测试报告支持附件上传 功能 测试报告支持附件上传，并在报告中直接展示内容，或点击下载按钮下载 使用方法 RestfulAPI调用，详细接口文档见 链接 中的API设计 可下载的附件结果样式 可直接展示的附件结果样式 用例库列表添加搜索功能 功能 支持按照用例库名称进行模糊搜索 使用方法 Coding平台 自动化测试 用例库 搜索框搜索 QTA平台 用例 用例库 搜索框搜索 入口 任务模块用例选择树支持加载失败用例的展示 功能 新建任务页面 任务信息页面的用例选择树支持加载失败用例的展示及选择 入口一 QTA平台 自动化测试 执行 任务 任务信息 用例选择树 入口二 QTA平台 自动化测试 执行 任务 新增任务 用例选择树 加载失败用例展示效果 选择加载失败的用例 点击 查看详情 按钮将跳转到 QTA平台 自动化测试 用例 用例库 对应用例库 加载错误 线上支持python3运行QTA任务 功能 支持用例库设置为python3，并且使用python3运行该用例库的所有任务 使用方法 在用例库页面，新建用例库或关联已有用例库，选择QTA的测试工具后，可以设置该用例库的python版本，目前docker new分组只有部分机器支持python3环境，所以任务创建页面，资源分组需要选择docker new分组，并指定筛选条件 name stke 。 入口 ","categorie":"自动化测试-Changelog-2019.12.12"},{"route":"/docs/qta/change/20191226.html","content":" 20191226本期更新解决了这些 issues 。本期特性更新概览如下 测试报告用例详情输出优化 junit格式的测试报告中用例详情支持输出system out system err 侧边导航栏支持收缩展开 侧边导航栏支持收缩展开 优化部署外网执行节点 不需要提前在机器上安装qtaf ext tencent等依赖包，执行任务过程会自动安装并更新 测试报告用例详情输出优化 功能 junit格式的测试报告中用例详情支持展示system out system err 使用方法 junit格式的用例， 上报用例结果时 ,上报的sytem out标签或system err标签的日志都能在用例详情中展示 结果样式 侧边导航栏支持收缩展开 功能 侧边导航栏支持通过点击按钮进行收缩展开 使用方法 通过点击侧边导航栏底部的按钮进行收缩展开，收缩后保留功能模块图标展示，可通过图标进入对应功能 导航栏收缩效果展示 优化部署外网执行节点 功能 不需要提前在机器上安装qtaf ext tencent等依赖包，执行任务过程会自动安装并更新 使用方法 部署执行节点文档 ","categorie":"自动化测试-Changelog-2019.12.26"},{"route":"/docs/qta/change/20200109.html","content":" 20200109本期更新解决了这些 issues 。本期特性更新概览如下 任务的资源配置支持检查 任务配置中的资源配置支持检查 任务页面性能优化 减少50 以上加载时间,相关 issue 任务的资源配置支持检查 功能 任务配置中,用户可以自助检查目标资源有没有 使用方法 任务配置 资源配置 检查 导航栏收缩效果展示 ","categorie":"自动化测试-Changelog-2020.01.09"},{"route":"/docs/qta/cloudroid/DEPLOY_DEVICE.html","content":" 接入Android设备","categorie":"自动化测试-接入 Android 设备"},{"route":"/docs/qta/drun/DEPLOY_NODE.html","content":" 部署执行节点如果对测试执行的环境有特殊的要求，比如网络环境和软件配置等，用户可以自己部署执行节点的方式，为自己的自动化测试构造一个私有的执行环境。 部署前准备1.在QTA平台上 个人中心 获取一个凭证 Token 2.根据不同的网络区域选择对应的节点接入机 网络 节点接入机URL OA http devnet.api.qta.oa.com drun node conn jsonrpc DevNet http devnet.api.qta.oa.com drun node conn jsonrpc 自研机房 IDC http api.qta.oa.com drun node conn jsonrpc 云机房 CDC http api.qta oa.tencentyun.com drun ncproxy cloud 外网 https api.qta.tencent.com drun ncproxy wan gz hintstyletipend重要提醒 外网节点接入需要先联系QTA管理员开通白名单，申请时请提供以下信息 部署节点使用的Token和对应用户名 需要在外网执行测试的测试用例库URLendhinthintstyledangerend重要提醒 申请外网节点部署，并在外网使用时，申请者需要承担不当使用带来的安全风险，要注意对执行节点进行安全加固，并保护好开通外网使用白名单内的Token信息endhint Docker方式部署 公司网络基础镜像为 tlinux2 ,在STKE部署时,支持铁将军登陆在命令行执行 获取镜像 dockerpullcsighub.tencentyun.com qta nodemgr latest 启动容器 dockerrun d name name hostname name entrypoint usr local bin docker entrypoint.sh envQTAP TOKEN token envNODE CONN conn url csighub.tencentyun.com qta nodemgr latest 查看日志 dockerlogsnodemgr 注意 name 要替换为节点名称， token 要替换为申请到的凭证， conn url 要替换为指定网络下的节点接入机URL devcloud部署经验http km.oa.com articles show 422739 devcloud常用 网络策略申请 欢迎补充 端口 80 443 8080IP 10.242.128.2710.241.104.8210.242.138.144 10.213.173.93 10.101.97.2469.72.2.152 9.72.2.137100.116.24.65 100.116.34.8710.101.112.5 公网基础镜像为 centos 7 获取镜像 dockerpullqtacore nodemgr latest 启动容器 dockerrun d name name hostname name envQTAP TOKEN token envNODE CONN conn url qtacore nodemgr latest 查看日志 dockerlogsnodemgr 一般方式部署首先要确保部署的设备有安装以下软件 Python2.7 Pip 9.0.1 外网节点部署由于外网节点无法访问内部的 pypi镜像 ，需要先下载最新的 drun nodemgr安装包 ，将tar.gz文件拷贝到外网节点上，再在CMD中执行安装命令 pipinstalldrun nodemgr 5.3.7.tar.gz 以下是不同操作性系统的具体安装及启动方式说明。 Windows由于很多自动化测试工具要求有 管理员 权限，因此建议使用管理员账号登录部署，并关闭UAC。安装节点可以在CMD中执行命令 pipinstall ihttp pypi.dq.oa.com simple trusted hostpypi.dq.oa.comdrun nodemgr nodemgrstart token token conn conn url 注意 token 要替换为申请到的凭证， conn url 要替换为指定网络下的节点接入机URL，不要带大括号为避免报错，建议将 C Python27 Lib site packages pywin32 system32 目录加入到 系统 的 PATH 环境变量中 注意 不是用户的环境变量 。 常见错误 Errorstartingservice ,解决方法可参考http km.oa.com group 35617 articles show 414981 MacOS在命令行执行 pipinstall user ihttp pypi.dq.oa.com simple trusted hostpypi.dq.oa.comdrun nodemgr python mnodemgr. main start token token conn conn url 注意 token 要替换为申请到的凭证， conn url 要替换为指定网络下的节点接入机URL，不要带大括号成功安装后可以在托盘区看到节点的状态 Linux在命令行执行 pipinstall ihttp pypi.dq.oa.com simple trusted hostpypi.dq.oa.comdrun nodemgr nodemgrstart token token conn conn url 注意 token 要替换为申请到的凭证， conn url 要替换为指定网络下的节点接入机URL，不要带大括号 投放节点Coding平台尚未上线该功能，使用Coding平台的用户可以忽略。QTA平台入口 访问QTA平台“ 个人节点 ”控制台。如果刚刚成功部署上线的节点，可以在列表中看到，直接点击 投放到项目 投放项目成功，即可在进入对应测试项目中使用此资源。投放时，如果选择 默认分组 ，则会生成或选择和项目ID一样的分组名。 更多节点操作可以参考 https git.code.oa.com DRun nodemgr ","categorie":"自动化测试-部署执行节点"},{"route":"/docs/qta/ioscloud/DEPLOY_DEVICE.html","content":" 接入iOS设备","categorie":"自动化测试-接入 iOS 设备"},{"route":"/docs/qta/tools/ENV.html","content":" 工具运行环境QTA测试平台提供公共的测试工具环境满足大部分用户的环境需求，也提供自定义环境的方式满足特殊场景的需求。 公共环境QTA在测试任务执行 用例分析等提供了公共的测试工具执行环境，目前主要有三种类型的公共环境，包括 标准Linux环境 linux common 标准Windows环境 windows common 标准MacOSX环境 macosx common 标准Linux环境标准Linux环境基于Docker提供，包括以下运行环境和软件 Python2.7.1X Python3.6.X GoLang1.12.X GCC4.8.5 CMake2.8.12 Java1.8.0 Node8.1X 标准Windows环境待补充 标准MacOS环境待补充 自定义环境待补充","categorie":"自动化测试-自动化测试工具-测试工具运行环境"},{"route":"/docs/qta/tools/INDEX.html","content":" 自动化测试工具测试工具，是提供构建测试自动化测试的能力框架或库，一般至少包括以下功能 定义测试用例结构，支持用例的管理和查询 测试用例执行和调试 输出多种形式的测试报告 驱动被测对象或系统的能力，比如UI操作 接口调用等比如包括QT4A QT4i QT4S Appium XCTest JMeter这些都是测试工具。 测试工具和QTA平台的关系简单的理解，QTA平台是支撑测试工具应用和落地的系统，包括 测试用例管理 支持对应测试工具定义的测试用例的管理 数据统计报表等 测试执行 支持对应测试工具定义的测试用例的执行 测试报告 支持对应测试工具执行结果的上报和数据展示等","categorie":"自动化测试-自动化测试工具"},{"route":"/docs/qta/tools/LIST.html","content":" 已集成的测试自动化工具 QTA自研 QT4A QTAAndroid自动化测试 QT4i QTAiOS自动化测试 QT4C QTAWin32自动化测试 QT4Mac QTAMacOS自动化测试 QT4W QTAWeb自动化测试 QT4S QTA后台自动化测试 第三方除了QTA自研的测试工具外，也已接入一些常见的测试工具，详情请查询 测试工具列表 接入新工具未找到合适的自动化测试工具，或者有合适的自动化测试工具需要接入，请点击 这里 按指引接入 ","categorie":"自动化测试-自动化测试工具-已集成的测试工具"},{"route":"/docs/qta/tools/PLUGIN.html","content":" 接入一般测试工具 安装QTAP Cli pipinstallqtap cli 更多详情请参考 安装说明文档 开发插件首先创建插件脚手架工程 qtapplugininit namepytest 执行成功后可以看到生成以下文件 pytest res img logo.svg src scaffolding tool.py testloader.py testdiscovery.py node setup.py node cleanup.py testrunner.py README.html qtap plugin.yml qtap plugin.yml 是描述整个插件的最重要的文件，其内容如下 yamlversion 1.0id pytesttest frameworks id pytestdescription pytesttestframeworktestcase specs name descriptiondisplay name 描述信息enable filter truefilter widget textdescription 测试用例的描述信息test tools id pytestname pytest测试工具description pytest测试工具target interface unit orui,server api,lib apiuser interface pythondoc url http qta.oa.comlogo img forexample. QTAP PLUGIN RES img logo.svgtest framework pytestargs specs name py versiondisplay name Python版本input widget choiceschoices Python2 2 Python3 3test types unittestreport type junitscaffolding tool cli python QTAP PLUGIN RES scaffolding tool.pyarg specs supported runtimes linux commontestcase discovery cli python QTAP PLUGIN RES testdiscovery.py path QTAP PLUGIN ARG TARGET PATH pyversion QTAP PLUGIN ARG X PY VERSIONarg specs supported runtimes linux commontestcase loader cli python QTAP PLUGIN RES testloader.py path QTAP PLUGIN ARG TARGET PATH pyversion QTAP PLUGIN ARG X PY VERSION name QTAP PLUGIN ARG TESTCASE NAME filter QTAP PLUGIN ARG X EXPRsupported runtimes linux commonarg specs name exprdisplay name 用例过滤表达式input widget texttestcase runner cli python QTAP PLUGIN RES testrunner.py path QTAP PLUGIN ARG TARGET PATH pyversion QTAP PLUGIN ARG X PY VERSION test QTAP PLUGIN ARG TESTCASEsupported runtimes linux commonnode setup cli python QTAP PLUGIN RES node setup.py path QTAP PLUGIN ARG TARGET PATH pyversion QTAP PLUGIN ARG X PY VERSIONsupported runtimes linux commonnode cleanup cli python QTAP PLUGIN RES node cleanup.py path QTAP PLUGIN ARG TARGET PATH pyversion QTAP PLUGIN ARG X PY VERSIONsupported runtimes linux common 我们结合测试工具接入所需要的配置分析说明如下 声明插件的基本信息，主要包括 id 工具唯一标识符，注册后不可变更，不能和其他工具冲突 name 工具名称，展示使用 description 工具介绍，展示使用 target interface 测试目标类型，目前可选的值有 ui , server api , lib api , unit ，分别表示 UI自动化测试 后台接口测试 LIB SDK 接口测试和单元测试 doc url 文档URL logo img Logo图片 test framework 工具对应的测试框架ID target application types 可选，表示被测应用类型，一般非单元测试使用，支持多个，可选的配置有 android ios windows macosx web 和 server test drivers 可选，表示使用测试驱动器，比如QT4A WebDriver，一般非单元测试使用，支持多个 定义测试工具对应的测试自动化工程的属性配置，即上面例子中的 test tools args specs ，这个配置会影响到测试自动化工程创建和导入时的参数配置选项 指定测试工具执行的方式，即上面例子中的 test tools test types ，支持多选，目前包括的类型有 unittest 一般单元测试执行方式 lib api test 一般Lib SDK 接口测试执行方式 server api test 一般后台接口测试执行方式 android test 一般Android自动化测试执行方式 ios test 一般iOS自动化测试执行方式 windows test 一般Windows自动化测试执行方式 macosx test 一般MacOSX自动化测试执行方式 指定测试工具使用的报告类型，即上面例子中的 test tools report type ，支持的类型包括 junit qta等，全部支持的类型请参考 测试报告格式 定义测试工具对应的测试框架的用例属性字段，即上面例子中的 test frameworks testcase specs ，这个配置也影响到QTA平台测试用例的数据展示，测试用例的分析工具生成 提供相关的工具，目前包括 测试用例分析工具 必要，提供分析发现特定路径的全部测试用例的命令行工具，即上面例子中的 test tools testcase discovery 测试用例加载工具 必要，提供加载指定范围的测试用例的命令行工具，即上面例子中的 test tools testcase loader 测试执行工具 必要，提供执行一个指定测试用例的命令行工具，并上报测试结果，即上面例子中的 test tools testcase runner 测试工程脚手架工具 可选，通过命令行创建脚手架工程，即上面例子中的 test tools scaffolding tool 任务执行节点初始化工具 可选，负责测试执行节点的初始化，即是上面例子中的 test tools node setup 任务执行节点清理工具 可选，负责测试执行节点的清理，即是上面例子中的 test tools node cleanup 工具参数用例分析 加载和执行等工具都是命令行的工具，而且支持通过 arg specs 定义参数，这些参数定义都遵循以下的范式 yamlname 名称display name 展示名description 描述信息input widget .. 其中 name 表示变量名，这些定义的变量会映射为环境变量给命令行工具使用，配置参数映射为环境变量会统一加上前缀 QTAP PLUGIN ARG X 比如用户指定变量名为 aa ，对应的环境变量名为 QTAP PLUGIN ARG X AA 除了用户自定义的参数，平台也会有预定义的环境变量 统一前缀为 QTAP PLUGIN QTAP PLUGIN ARG TESTCASE NAME 仅用例加载工具可使用，表示要加载的测试用例集 QTAP PLUGIN ARG TESTCASE 仅测试执行工具可使用，表示要执行的测试用例名 QTAP PLUGIN ARG TARGET PATH 表示测试工程的根路径 QTAP PLUGIN RES 表示插件包的资源目录，默认为 . res QTAP PLUGIN REPO URL 表示当前用例库的URL QTAP PLUGIN REPO BRANCH 表示当前用例库的分支名 QTAP PLUGIN REPO VERSION 表示当前用例库的版本号 QTAP PLUGIN REPO TYPE 表示当前用例库类型，可选的取值为 git svn local widget 包括input widget和filter widget 用于控制QTA平台上用户输入控件的方式，目前的支持的控件有 widget 相关参数 说明 text 单行文本输入框 text area 多行文件输入框 code lang 指定代码语言 代码输入框 choices choices 指定可选值范围 单选框 multi choices choices 指定可选值范围 复选框 user 用户选择器，仅支持一个用户 multi user 用户选择器，支持多个用户 tags separator 多个标签的间隔符，默认为逗号 标签，支持匹配和排除两种命中规则 number 数字输入 工具运行环境用例分析 加载和执行等工具都是命令行的工具，统一使用 supported runtimes 字段控制指定的环境，目前QTA平台预先定义的环境有 linux common 标准Linux环境，使用Docker方式，详情请参考 工具运行环境 windows common 标准Windows环境，详情请参考 工具运行环境 macosx common 标准MacOSX环境，详情请参考 工具运行环境 用户也可以自己指定环境，需要在yaml配置文件中增加声明以下字段，比如通过Docker镜像指定环境 yamlruntimes id xxx specicaltype dockerimage dockerimage.isd.com xxx xxxx latest 用户也可以通过节点标签指定环境 yamlruntimes id xxx specialtype nodeos windows macosx linuxtag eee 插件脚本开发qtap cli会在执行命令时调用相应的插件脚本。 scaffolding tool该脚本主要是在用户创建用例库时，由 testcase 服务调起，并创建好项目的初始化代码。 node setupqtap cli会在 qtaptestcasesetup 命令中调用该脚本，并且传入用例库中配置的测试工具参数。测试插件可以根据这些参数创建测试工具依赖的环境。 testcase discoveryqtap cli会在 qtaptestcaseparse 命令中调用该脚本，该脚本主要是在CI打包服务中被执行，用于获取用例列表和加载失败信息，数据以 json 格式保存在当前目录的 testcase.json 文件中。数据格式如下 json testcases , loaderrors testcases 字段是用例列表，列表中的每一个成员是一个字典，字典中必须包含 name 键，值为 用例名 ，如 mqtest.bvt.login.LoginTest ，其它键值对均为该用例的属性，不同测试框架使用的属性不完全相同。 loaderrors 字段是用例加载失败信息， key 为加载失败的模块名， value 为失败堆栈。以下是一个完整的例子 json testcases name sampletest.datatest.DataTest , data name TEST1 , data value null , owner pillarzou , priority Normal , status Ready , description u6570 u636e u9a71 u52a8 u6d4b u8bd5 u7528 u4f8b , name sampletest.datatest.DataTest , data name TEST2 , data value null , owner pillarzou , priority Normal , status Ready , description u6570 u636e u9a71 u52a8 u6d4b u8bd5 u7528 u4f8b , loaderrors iqqlib.loginwin Traceback mostrecentcalllast nFile D code git QTA QTAP Cli .env3 lib site packages testbase loader.py ,line185,in load from package n import modulename nFile D code git QTA AndroidFooTest1 iqqlib loginwin.py ,line6,in module nfromqt4i.icontrolsimportWindow nModuleNotFoundError Nomodulenamed qt4i n testcase loaderqtap cli会在 qtaptestcaseload 命令中调用该脚本，用于根据用例集获取完整的用例列表。该脚本只需要将用例列表按行输出到 stdout 中即可。 注意 不要将非用例名信息打印出来如果任务中配置了多个用例集，qtap cli会解析成用例集列表，并将每个用例集传递给 testcase loader 脚本。因此，脚本中不需要再处理多用例集的情况。 testcase runnerqtap cli会在 qtaptestcaserun 命令中调用该脚本，用于执行测试用例。传入的用例名参数即为 testcase loader 中输出的其中一条用例。生成的测试结果文件名必须为 junit.xml ，qtap cli会读取该文件并上报给测试报告服务。 node cleanupqtap cli会在 qtaptestcasecleanup 命令中调用该脚本，用于清理执行环境。 发布插件 qtappluginpublish. version1.0.0 ","categorie":"自动化测试-自动化测试工具-接入一般测试工具"},{"route":"/docs/qta/tools/PLUGIN_LOAD.html","content":" 接入压力测试工具由于压力测试工具在形式上差异，接入方式略有不同。 开发插件插件开发的准备 模版初始化可以参考 一般测试工具 的方式，但对于插件的定义的YAML，我们需要做简单的调整，比如下面的例子 yamlversion 1.0id jmetertest tools id jmetername JMeter压力测试工具description JMeter压力测试工具type load testtarget interface server apiuser interface uidoc url http qta.oa.comlogo img forexample. QTAP PLUGIN RES img logo.svgtest types loadtestload types tcp udpload result type conclusionload support time control trueload support amount control trueload support multiple target falseload dashboard model file res dashboard.jsonload concurrency per node 100scaffolding tool cli python QTAP PLUGIN RES scaffolding tool.pyarg specs supported runtimes linux commontestcase discovery cli python QTAP PLUGIN RES testdiscovery.py path QTAP PLUGIN ARG TARGET PATH pyversion QTAP PLUGIN ARG X PY VERSIONarg specs supported runtimes linux commontestcase loader cli python QTAP PLUGIN RES testloader.py path QTAP PLUGIN ARG TARGET PATH pyversion QTAP PLUGIN ARG X PY VERSION name QTAP PLUGIN ARG TESTCASE NAME filter QTAP PLUGIN ARG X EXPRsupported runtimes linux commonarg specs name exprdisplay name 用例过滤表达式input widget texttestcase runner cli python QTAP PLUGIN RES testrunner.py path QTAP PLUGIN ARG TARGET PATH pyversion QTAP PLUGIN ARG X PY VERSION test QTAP PLUGIN ARG TESTCASEsupported runtimes linux commonnode setup cli python QTAP PLUGIN RES node setup.py path QTAP PLUGIN ARG TARGET PATH pyversion QTAP PLUGIN ARG X PY VERSIONsupported runtimes linux commonnode cleanup cli python QTAP PLUGIN RES node cleanup.py path QTAP PLUGIN ARG TARGET PATH pyversion QTAP PLUGIN ARG X PY VERSIONsupported runtimes linux common 主要的差异是，新增以下字段 type 测试工具类型，对于压测工具必须为 load test ，默认如果不写则为 auto test ，也就是一般测试工具 load types 压测类型，一般包括以下取值 tcp TCP协议压测工具 udp UDP协议压测工具 http HTTP协议压测工具 https HTTPS协议压测工具 usercode 用户自定义脚本压测 load result type 压测结果类型，有两种 conclusion 只输出结论性汇总的测试结果统计数据 time sequence 输出分时统计的测试结果数据 load support time control 是否支持控制执行时间 load support amount control 是否支持控制压测请求量 load support multiple target 是否支持同时压测多个目标 load concurrency per node 在1核1G的设备上的最大并发数 load dashboard model file 测试结果数据报表GrafanaModel文件相对路径，这个文件中定义的Grafana报表一般要包含模版变量，QTA会通过模版变量的方式将可能需要要到的信息传递给Grafana报表，包括 datasource 数据源名 taskid 任务ID除了新增的字段，还有一些变化 test types 一般默认都必须为 loadtest ，除非测试工具如果有自定义的执行方式，详情请参考 自定义测试类型 对于压测工具，以下字段可以忽略不提供 report types test drivers test framework testcase specs","categorie":"自动化测试-自动化测试工具-接入压力测试工具"},{"route":"/docs/qta/tools/TESTTYPE.html","content":" 自定义测试类型测试类型用于定义测试工具使用和执行的方式，对于一些测试工具，如需要自定义执行调度的方式，则可以通过新增测试类型的方式实现。 创建测试类型已创建插件工程，更多插件详情请参考 接入测试工具 ，新增 job flow 目录 pytest res img logo.svg src bootstrap.py scaffolding tool.py testloader.py testdiscovery.py node setup.py node cleanup.py testrunner.py job flow demo.xml README.html qtap plugin.yml qtap plugin.yml 描述文件中指定测试类型为demo yaml...test types id demoname 样例测试description 样例测试类型job flow file job flow demo.xmltest tools id pytestname pytest测试工具description pytest测试工具target interface unit orui,server api,lib apiuser interface pythondoc url http qta.oa.comlogo img forexample. QTAP PLUGIN RES img logo.svgtest framework pytestargs specs name py versiondisplay name Python版本input widget choiceschoices Python2 2 Python3 3test types demo... 我们结合测试工具接入所需要的配置分析说明如下 定义测试工具执行的方式，即上面例子中的 test types ，主要包括 id 测试类型唯一标识符，注册后不可变更，不能和其他测试类型冲突 name 测试类型名称，展示使用 description 测试类型介绍，展示使用 job flow file 指定测试类型详细描述文件 demo.xml 的相对路径 指定测试工具执行的方式，即上面例子中的 test tools test types ，支持多选，指定已定义的类型id demo demo.xml 是描述整个过程，其内容如下 xml xmlversion 1.0 encoding utf 8 jobname testtype plan name version 1 exec timeout exec timeout wait timeout wait timeout priority 10 log level INFO defineproperty propertyname PLAN ID value plan id hidden True propertyname PROJECT ID value project name hidden True propertyname REPORT ID value report id hidden True propertyname REPO BRANCH ID value repo branch id hidden True propertyname TEST REPO URL name zh 测试项目URL value description 测试项目URL class caserepo url propertyname TESTCASENAME name zh 测试用例集 value description 测试用例集 class testcase propertyname REPORTNAME name zh 报告名称 value plan name description 报告名称 default plan name propertyname TESTTYPE name zh 报告类型 value 冒烟测试 description 报告类型 default 冒烟测试 propertyname PYTHON ENV name zh Python环境 value virtual default virtual class choice property optionname 虚拟 value virtual property optionname 全局 value global property propertyname PARALLEL name zh 单节点并发执行数 value description 单节点并发执行数 default 1 class number propertyname QTAF SETTINGS name zh QTA测试项目配置 value description QTA测试项目配置 default class code doc url http file.sng.com browse qta htdocs testbase lastest settings.html propertyname TESTTOOL name zh 测试工具 value description 测试工具 class text propertyname LOAD TOOL ARGS name zh 用例加载工具参数 value load tool args description 用例加载工具参数 class text defineresource resourcename 执行机 type node maxcnt 1 mincnt 1 group docker new condition definetask taskname QTATest resource 执行机 workspace env PYTHON ENV copyname 下载bootstrap src res src bootstrap.py dst bootstrap.py format datauri envname QTA NODEID value DRUN NODEID envname QTA JOBID value DRUN JOBID envname QTA PLAN ID value PLAN ID cmdname 安装qtap cli，下载并解压代码包 args pythonbootstrap.py TEST REPO URL timeout 1200s outputname TEST REPO LOCAL PATH value stdout local True cmd envname TEST REPO LOCAL PATH value TEST REPO LOCAL PATH cmdname 初始化 args qtaptestcasesetup type TESTTOOL path TEST REPO LOCAL PATH timeout 600s oncename 加载测试用例 cmdname 加载测试用例 args qtaptestcaseload type TESTTOOL path TEST REPO LOCAL PATH name TESTCASENAME report REPORT ID tool args LOAD TOOL ARGS timeout 600s outputname TESTCASES value stdout separator n cmd once forname 执行测试用例 in TESTCASES iter TESTCASE parallel PARALLEL cmdname 执行测试用例 args qtaptestcaserun type TESTTOOL path TEST REPO LOCAL PATH testTESTCASE report REPORT ID for cmdname 反初始化 args qtaptestcasecleanup type TESTTOOL path TEST REPO LOCAL PATH timeout 300s task job 测试类型详解分析 demo.xml 如下 声明 job 的基本信息，主要包括 name 文字描述任务名称 version 版本号，默认填1 exec timeout 任务执行超时时间，单位可以是s m h wait timeout 任务等待超时时间，单位可以是s m h priority 任务优先级，10的倍数，例如10 20 30 log level 日志等级，可以为debug info warn error critical，大小写无关，如果不设置，默认为warn job 包含三种字标签 property 标签 resource 标签 task 。 标签 property ，用于定义一个全局变量，即整个job共享的变量，具有以下属性，其中name和value为必要属性，不可缺省 name 变量名称 value 变量值 class 变量类型，可以不填，默认为text text 字符串类型 number 数字类型 choice 单选类型， property option 字标签指定选项 multi choice 多选类型， property option 字标签指定选项 code 代码类型，前端会展示成代码框 description 变量描述，可以不填 name zh 变量展示的名称，可以不填 default 变量默认值 hidden 是否隐藏，当设置该值为True时，前端不会显示该变量，默认为False 标签 resource ，用于指定需要的资源，根据这个描述为任务分配一定的资源，具有以下属性 name 资源标识符 group 资源分组 type 资源类型，如node android ios maxcnt 执行任务需要的资源数目上限 mincnt 执行任务需要的最少资源数目，maxcnt mincnt condition 表示设备申请条件，默认为空，使用字符串表示，例如 os window browser IE7 标签 task ，用于定义一组节点需要执行的任务，具有以下属性 name 任务名称 resource 指定执行task所需节点的资源标识符，即resource标签定义的资源名称 workspace 任务执行进程的路径，可以是绝对路径，即” ... ...” 也可以是相对路径，即相对DRun节点工作路径的路径 还也可以为空，默认为DRun节点的工作路径 每个 task 标签可以包含多个子标签，结构如下 task... copy.. env.. cmd.. python.. reboot barrier once.. cmd.. once for.. cmd.. for task copy 操作，拷贝文件，包括以下必要属性 src 表示源文件或者文件夹路径 可以是http服务器 Samba路径等，也可以是直接嵌入的datauri dst 表示目标路径，可以是绝对路径，也可以是相对路径 当src是文件或者文件夹时，dst必须是本地文件夹路径 当src是datauri时，dst必须是一个本地文件的路径 format 表示拷贝的数据类型，可以不填，默认是文件，当指定为datauri时，会将src指定的文件内容直接作为datauri嵌入示例 copysrc http qta.oa.com xx.apk dst d tmp copysrc tencent.com tfs ... xx.apk dst . copysrc res tmp.txt dst tmp.txt format datauri env 操作，配置环境变量，包括以下必要属性 name 表示环境变量名称 value 表示环境变量值，可以是字符串，也可以是以 符号开头的指定变量示例 envname HELLO value hello envname PYTHONPATH value TEST PATH cmd 操作，命令行执行程序，执行进程的返回值不为0，则表示执行失败，包括以下必要属性和子标签 属性args 表示调用的程序路径和参数，与命令行写法相同，以空格间隔 程序路径使用相对路径，即相对DRun节点工作路径的路径 参数可以是以 符号开头的变量名，多个参数以空格间隔 子标签input 表示子节点用于表示标准输入流，必须有value属性或者file属性 属性value 表示输入流的内容 属性file 表示以文件作为输入流，指定此文件的路径 子标签output 表示输出，属性如下 属性name 定义变量名称 属性value 表示output的来源，目前支持 stdout, stderr 属性separator 指定分隔符符，输出值按照分隔符切分为数组，默认为空 属性local 表示变量是否为本地变量，默认为False 子标签assert 表示对结果的检查，属性如下 属性actual 表示真实值，可以是以 符号开头的变量名 属性expect 表示期望值，如果真实值与期望值不相等，则检查失败，认为此步骤失败示例 cmdargs pythonhello.py inputvalue XXXXXXXXX 或是 inputfile file path outputname hello output value stdout outputname hello err value stderr separator , assertactual hello output expect XXXXXXXXX cmd python 操作，调用python方法，如果执行出现异常，则表示执行函数过程中raise异常或者python进程返回值不为0，包括以下必要属性和子标签 属性target 表示调用的目标函数，以或的形式表示 属性varg 表示函数参数，必须是已定义的变量名称 可以是自定义变量，也可以是DRun隐式变量 变量作用域可以是本地的，也可以是全局的 变量类型可以是list,dict,string 多个变量间用逗号间隔 子标签output 表示输出，属性如下 属性name 定义变量名称 属性value 表示output的来源，目前支持 return, stdout, stderr 属性separator 指定分隔符符，输出值按照分隔符切分为数组，默认为空 属性local 表示变量是否为本地变量，默认为False 子标签assert 表示对结果的检查，属性如下 属性actual 表示真实值，可以是以 符号开头的变量名 属性expect 表示期望值，如果真实值与期望值不相等，则检查失败，认为此步骤失败示例 pythontarget pprint.pprint varg dict outputname sleep return value return outputname sleep output value stdout outputname sleep err value stderr assertactual sleep return expect True python reboot 操作，重启节点所在的机器，当节点设置了虚拟节点，节点无法重启，当task未执行完毕，节点重启后会继续执行后续操作。无特殊属性和子标签。 barrier 操作，全部节点必须要执行到这一步才能继续执行后续step，否则等待，主要用于for操作统一结束。无特殊属性和子标签。 标签 once 内的操作只允许被一个节点执行，如果执行失败了，根据retry定义的数目选取另一个节点进行重试，如果N次重试都失败，则认为整个step失败。once没有特殊的属性。示例 oncename xxx retry 3 cmd... once 标签 for 内的操作在各个节点上遍历执行in属性指定的列表，iter属性代表列表中的每一项。如果有节点执行失败了，根据retry定义的数目，选取另一个节点进行重试，如果N次重试都失败，则认为操作失败。包括以下属性 in 变量名，指定一个全局list变量，全部节点均可访问 iter 指定一个变量名称，变量值代表list中的迭代项，可以作为python cmd操作的参数等 parallel 单节点并发执行数，非必要属性，默认为1示例 forin varname iter it retry 2 pythontarget test.test print varg it assertactual return expect True python for 渲染项支持渲染的项 testtype 测试类型名称 plan id 测试任务ID plan name 测试任务名称 monitor 是否监控，默认为False project name 项目ID exec timeout 任务执行超时时间，默认为24h，单位可以是h m s wait timeout 任务等待超时时间，默认为24h，单位可以是h m s report id 报告ID artifact id 制品库ID repo branch id 用例分支ID testtool 测试工具名称，例如jmeter使用方式 jobname testtype plan name version 1 exec timeout exec timeout wait timeout wait timeout priority 10 log level INFO propertyname PLAN ID value plan id hidden True propertyname PROJECT ID value project name hidden True propertyname REPORT ID value report id hidden True propertyname REPO BRANCH ID value repo branch id hidden True propertyname TESTTOOL value testtool hidden True 发布插件新增或修改测试类型后，使用以下命令发布插件 qtappluginpublish. version1.0.0 ","categorie":"自动化测试-自动化测试工具-自定义测试类型"},{"route":"/docs/test/intro/advantages.html","content":" title 产品优势 CODINGDevOpsOA帮助中心pageTitle 产品优势pagePrevTitle pagePrev pageNextTitle pageNext CODING测试管理为您提供井然有序的测试协同管理工具服务，其产品具有以下优势 多角色实时协同在CODING测试管理中，团队内的测试 产品 研发上下游均能协同参与测试计划，保持测试需求 测试任务 缺陷任务的实时同步，记录测试过程，便于产品和研发复现问题，快速定位需求和缺陷，实现各部门之间的无缝协作。 测试用例关联缺陷与CODING缺陷管理功能深度关联，测试过程中发现功能未符合预期即马上关联缺陷，开发者可根据缺陷快速定位测试用例，测试结果更新也可同步到对应缺陷。 测试用例可复用测试用例库支持新增 导入 编辑用例，且树形结构的用例库便于灵活组织测试计划，使得用例能重复使用于不同的测试计划中，避免重复编辑相同的用例，大大提升测试工作效率。 批量导入测试用例支持批量导入Excel或CSV格式的测试用例到指定的项目中，不需重新编辑用例，帮助您快速脱离低效的表格管理，开启高效的测试协同管理方式。 可视化测试进度提供可视化工作视图纵览项目测试概况，测试进展一目了然。直观看到每一个人的工作进度和任务量，准确把握团队工作量峰 谷值，轻松改善团队工作规划。 多维度数据报告测试迭代结束后，可以创建定期数据报告模板，系统会在设定的时间自动生成测试结论 图表 工作分布 测试耗时等维度的测试报告，并定期发送给相应关注者。","categorie":"测试管理-产品简介-产品优势"},{"route":"/docs/test/intro/overview.html","content":" title 产品概述 CODINGDevOpsOA帮助中心pageTitle 产品概述pagePrevTitle pagePrev pageNextTitle pageNext 什么是CODING测试管理CODING测试管理是CODINGDevOps的子产品，为您提供井然有序的测试协同管理工具服务，从测试用例库管理 制定测试计划，到协作完成测试任务，为测试团队提供敏捷测试工作方式，提高测试与研发团队的协同效率。提供可视化的工作视图以及数据报告，随时把控测试进度和规划。 应用场景 测试协作CODING测试管理帮助测试团队建立井然有序的测试协作流程，包含编写测试用例 规划测试计划 分发测试任务 记录测试结果，还可与研发人员协同，同步测试过程和结果。 测试用例管理用于建立团队的测试用例库，并管理每个功能或页面的用例，每个用例包括了本次测试的描述 步骤 预期结果。用例库的管理有利于实现用例复用，避免重复编写用例，提高工作效率。支持Excel CSV格式导入用例，将测试人员从繁杂的表格编辑中解脱出来。 测试计划制定帮助测试团队管理者按不同阶段的测试目标制定测试计划，测试结束后自动生成对应的测试报告，分析测试成果情况，为下一次测试计划提供数据支持。 ","categorie":"测试管理-产品简介-产品概述"},{"route":"/docs/test/intro/scenes.html","content":" title 应用场景 CODINGDevOpsOA帮助中心pageTitle 应用场景pagePrevTitle pagePrev pageNextTitle 快速入门pageNext test quick start.html 测试协作CODING测试管理帮助测试团队建立井然有序的测试协作流程，包含编写测试用例 规划测试计划 测试任务分发 记录测试结果完整过程，还可与研发人员协同，同步测试过程和结果。 测试用例管理用于建立团队的测试用例库，并管理每个功能或页面的用例，每个用例包括了本次测试的描述 步骤 预期结果。用例库的管理有利于实现用例复用，避免重复编写用例，提高工作效率。支持excel CSV格式导入用例，将测试人员从繁杂的表格编辑中解脱出来。 制定测试计划帮助测试团队管理者按不同阶段的测试目标制定测试计划，测试结束后自动生成对应的测试报告，分析测试成果情况，为下一次测试计划提供数据支持。","categorie":"测试管理-产品简介-应用场景"},{"route":"/docs/test/manual/plans.html","content":" title 管理测试计划 CODINGDevOpsOA帮助中心pageTitle 管理测试计划pagePrevTitle 团队成员使用pagePrev test manual team usage.htmlpageNextTitle 使用测试报告pageNext test manual reports.html 测试计划是若干个测试任务的集合，它描述了每项测试活动的对象 范围 方法 进度和预期结果。下面从4个方面介绍测试计划 创建测试计划 复制测试计划 编辑测试计划 归档测试计划 创建测试计划 测试管理提供了从测试计划主页创建 从用例库中组建测试计划两种方式。 从测试计划页创建 1.单击左侧菜单栏中的 测试计划 ，进入测试计划主页。2.单击左侧列表栏上方的 imgsrc https main.qcloudimg.com raw 395acddf1b1058ea0267965a5461c026.png style margin 0 。3.在弹出框中，填写测试标题 选择所属迭代 分配测试计划和选择测试用例。 测试计划标题 测试计划标题尽量简洁明了，突出此次计划的目的。 选择所属迭代 可选项，通过所属迭代可以检验测试计划达成的情况。 分配测试计划 选择一位成员作为默认执行人，分配后这个计划就是该执行人的测试任务。若后续该测试计划新增测试任务，也会把测试任务默认分配给该执行人 在执行测试计划的过程中可把相关的测试任务分配给其他成员 。 选择测试用例 可以一键选择用例库中全部的测试用例，也可以手动从用例库选择需要执行的测试用例。需要说明的是，如果选择“包含全部用例”，用例库有新增的用例，会自动加入到本计划中。4.单击 创建计划 ，完成创建测试计划。 从用例库中创建 1.单击左侧菜单栏中的 用例管理 ，进入用例库。2.在用例库中勾选想要组成测试计划的用例。3.单击顶栏 组成测试计划 创建计划。 4.填写测试标题 选择所属迭代 分配测试计划和选择测试用例。 测试计划标题 测试计划标题尽量简洁明了，突出此次计划的目的。 选择所属迭代 可选项，通过所属迭代可以检验测试计划达成的情况。 分配测试计划 选择一位成员作为默认执行人，分配后这个计划就是该执行人的测试任务。若后续该测试计划新增测试任务，也会把测试任务默认分配给该执行人 在执行测试计划的过程中可把相关的测试任务分配给其他成员 。 选择测试用例 可以一键选择用例库中全部的测试用例，也可以手动从用例库选择需要执行的测试用例。需要说明的是，如果选择“包含全部用例”，用例库有新增的用例，会自动加入到本计划中。5.单击 创建计划 ，完成创建测试计划。 管理测试计划管理员有权限对测试计划进行管理操作。1.单击左侧菜单栏中的 测试计划 ，进入测试计划主页。2.选中一个测试计划，单击右上角的操作栏，便可对测试计划进行管理。下面分别介绍复制测试计划 编辑测试计划 归档测试计划 删除测试计划。 复制测试计划 如果想对测试计划进行重测，或创建类似的 包含原测试计划中的某些内容 新测试内容，可以复制测试计划。操作步骤如下 1.单击测试计划右上角操作栏中的 复制此计划 。2.在弹出框中，选择需要复制哪种结果的测试任务，共有通过 受阻 未测 重测 失败等5种结果的测试任务。选择完成后，单击 确定 ，进入复制测试计划页。3.在复制测试计划页，测试用例可在本步骤修改，测试计划标题 所属迭代 分配给的测试者都是从原测试计划中复制过来的。4.单击 复制计划 ，即可完成复制。 编辑测试计划 正在进行中的测试计划可以进行编辑。1.单击测试计划右上角操作栏中的 编辑 ，进入测试计划编辑页。2.测试计划标题 归属所属迭代 分配给的测试者 包含测试用例都可以重新编辑。3.编辑完成后，单击 修改计划 完成测计划的编辑。 归档测试计划 如果测试计划已经完成，后续不会再操作此测试计划，可把此测试计划归档。1.单击测试计划右上角操作栏中 归档 。2.在弹出框中，单击 确定 ，完成测试计划的归档。 归档后的测试计划将放入已归档的分类中。 归档后的测试计划将无法继续测试，也无法继续编辑，并且不可撤销，请谨慎操作。 如果您改变了与已归档的测试计划关联的测试用例的内容 标题 预期结果等 ，这个改变将不会应用到已归档测试计划。 删除测试计划 如果误创建测试计划，或者测试计划已无用处，可以对此测试计划进行删除操作。1.单击测试计划右上角中的 删除 。2.在弹出框中，单击 确定 ，完成测试计划的删除。 删除测试计划会将测试计划下所有的测试与测试结果等信息删除掉，并且不可撤销，在删除测试计划时应谨慎操作。","categorie":"测试管理-操作指南-管理测试计划"},{"route":"/docs/test/manual/reports.html","content":" title 使用测试报告 CODINGDevOpsOA帮助中心pageTitle 使用测试报告pagePrevTitle 管理测试计划pagePrev test manual plans.htmlpageNextTitle 演示测试流程示例pageNext test manual show case.html 针对每个项目，CODING测试管理提供了测试报告功能。测试报告对测试结果和测试过程进行统计。 进入项目1.单击页面右上角的 imgsrc https main.qcloudimg.com raw d94a8e60dd3a41d0af07d72ae0e9d70e.png style margin 0 ，进入项目列表页面，单击项目图标进入目标项目。2.选择左侧菜单栏中的 测试管理 测试报告 ，进入测试报告页面。 测试报告管理 创建测试报告1.在测试报告首页，单击右上角 创建报告 。2.在弹出框中，选择报告涉及的迭代和测试计划，填写报告名称。3.单击 创建 即创建成功。 生成报告需要一定时间，而且数据量的多少将会影响生成时间的长短。因此，创建报告后的状态为“生成中”，当系统成功生成报告后其状态将转变为“已生成”。 查看测试报告单击 查看报告 ，查看对应的测试报告。 测试报告内容包括三部分 1.报告基本信息涵盖标题，涉及里程碑 涉及测试计划和报告总结等。2.测试结果统计 测试用例结果分布 当前报告涉及的里程碑或测试计划内的用例不同状态 通过，重测，失败，阻塞，未测 数量的总和和占比。 缺陷分布 当前报告涉及的迭代或测试计划内关联的缺陷，统计每个缺陷的处理人收到的缺陷总和 包括缺陷关闭和打开的缺陷总和 。 用例测试次数排名 当前报告涉及的里程碑或测试计划内每个用例被反复测试的次数。 用例测试失败次数排名 当前报告涉及的里程碑或测试计划内每个用例被标记为失败的次数。3.测试过程统计 每日测试结果分布 每天记录的测试结果，各个状态 通过，重测，失败，阻塞 的个数。 每日测试时长分布 每天团队所有人测试测时间总时长。 每日测试计数分布 每天团队所有人测试的总次数。 成员测试次数统计 每个成员在统计时间区间内测试的总次数。测试报告中的每一个统计图表都可切换为统计图或列表形式查看。 修改测试报告1.在测试报告列表页，报告创建人单击对应报告右侧的 查看报告 ，进入报告详情页。2.可单击“报告标题”右侧的 imgsrc https main.qcloudimg.com raw 714efe3d369f3e00596f62f54380ee07.png style margin 0 ，修改报告标题。3.可单击“报告总结”右侧的 编辑 修改报告总结。 定期报告模板在测试报告首页单击右上角 设置定期模板 ，可进入定期报告模板首页。定期报告模板用于在规定时间段，周期性生成和发送报告。例如，针对所属迭代Sprint 1，每周一生成并发送上周的测试报告。由定期报告模板生成的报告可在报告首页查看。 spanid create span 创建定期报告模板创建定期报告模板步骤如下 1.在定期报告模板首页单击 新建报告 。2.在弹出框中，选择报告涉及的迭代和测试计划。若选择 全部迭代 ，则生成的报告中不含有测试结果相关统计。3.选择统计区间和发送周期。统计区间是用于规定统计 测试过程 相关统计的时间范围，其统计时间不包含生成报告当天。发送周期是指每X个周期生成并发送报告。4.选择关注人，报告生成后将自动通知到关注人。5.单击 创建 即可。在单击 创建 按钮前选择 保存后立即生成并发送一次报告 ，若开启此功能，则在模板创建成功后，将立即按照模板配置生成并发送一次报告，其中， 测试过程 的统计数据截止时间为昨日。自动生成的报告名称为 定期报告 时间 ，例如 定期报告 20180901。 统计区间和发送周期举例说明 例1 统计区间为上周，发送周期为每周一，则报告将在每周一生成并发送，统计的时间范围是上周一至上周日。 例2 统计区间当周，发送周期为每周六，则报告将会在每周六生成并发送，统计的时间范围是当周周一到周五。 例3 统计区间为14天前，发送周期为每月1日，则报告将会在每月15日生成并发送，假定现在是5月15日，则统计的时间范围是5月1日到5月14日。 编辑报告模板在定期报告模板首页，选择指定的报告模板，单击右侧的 编辑模板 ，则进入报告模板编辑页，操作方式与 创建定期报告模板 相似，这里不做赘述。 暂停和删除模板 暂停模板 可在定期报告模板首页，选择指定的报告模板，右侧选择 更多 暂停 ，可停止定期报告模板自动生成报告。若希望再次启动自动生成报告，则可单击 启用 按钮。 删除模板 可在定期报告模板首页，选择指定的报告模板，右侧选择 更多 删除 ，可将模板删除，被删除模板的不会影响该模板历史生成的报告。 若定期报告模板中选定的迭代或测试计划被删除，则模板将会被置为 暂停 状态，停止自动生成报告。此后，只可删除该模板不能再次启用。","categorie":"测试管理-操作指南-使用测试报告"},{"route":"/docs/test/manual/show-case.html","content":" title 演示测试流程示例 CODINGDevOpsOA帮助中心pageTitle 演示测试流程示例pagePrevTitle 使用测试报告pagePrev test manual reports.htmlpageNextTitle pageNext 操作场景本文将通过“用户登录和邀请新用户”，“个人账户返现”两个测试场景演示CODING测试管理的测试流程。我们将具体测试以下场景 正确的用户名和正确的密码登录。 正确的用户名和错误的密码登录。 不存在的用户名和错误的密码登录。 个人登录之后，邀请新的用户加入，查看个人账户是否返现。 操作步骤 准备步骤在测试之前，我们需要建立一批测试用例，并组成测试计划，才能开始测试。1.建立两个模块 个人登录 和 邀新返现 。然后开始创建测试用例。 2.创建第一个测试用例。 用例的标题 正确的用户名和正确的密码登录。 模块选择 个人登录。 前置条件可不填。 用例的类型为“文本描述”。 用例描述 使用正确的用户名和密码登录。 预期结果 登录成功。 3.创建第二个用例。 用例标题为 正确的用户名和错误的密码登录。 模块选择 个人登录。 前置条件可不填。 用例的类型为“文本描述”。 用例描述 使用正确的用户名和错误的密码登录。 预期结果 登录失败，提示密码错误。4.按照上面的步骤新建第三个文本用例，用于测试“不存在的用户名和密码错误的登录”。 5.新建完成上面三个文本用例后，需要新建一个步骤用例，如下图 6.测试用例建立完成后，需要管理员将这些测试用例组成测试计划。假设现在已经将这些测试用例组成了一个叫“CODING测试管理快速进阶”的测试计划，并且将默认分配人指派给了“我”。下面我们将开始测试。 开始测试 1.选择左侧菜单栏中的 测试管理 测试计划 ，进入测试计划列表页。2.单击上文中组成的测试计划，进入测试计划详情页。3.单击右上角的 开始测试 。 添加测试结果 添加测试结状态 备注 附件和关联第三方缺陷。 文本用例测试1.进入测试之后，默认选择的是第一个测试任务 “正确的用户名和正确的密码登录”。假设测试结果是测试通过，单击右下角的 通过并下一条 。2.系统将会自动跳转到第二个测试任务 “正确的用户名和错误的密码登录”，假设测试结果与预期不符，则选择右下角的 记录结果 失败 ，填写备注 “错误的密码竟然也登录成功了”。3.同时可以关联缺陷。选择右侧 关联缺陷 快捷创建新缺陷 ，创建一个“错误的密码竟然也登录成功了”的缺陷，并把缺陷与该测试任务关联，单击 添加结果并下一条 。 4.系统将跳转到第三个测试任务 “不存在的用户名和错误的密码登录”，假设输入了用户名和密码进行测试，返回了一个空白页，经过排查发现是服务器的临时故障，影响了测试，所以将这个测试任务标记为“重测”，并且添加备注 “服务器临时故障，需要重新测试”，同时可以单击右侧 添加附件 上传测试截图到附件。 步骤用例测试步骤用例的测试任务需要针对每一步添加测试结果，根据每一步的测试结果，确定该测试任务的最终结果。下面我们开始第四个测试任务的测试 1.单击 记录结果 ，开始录入测试结果，根据步骤登录个人账户，使用了正确的用户名和密码，实际登录成功，实际结果填写 登录成功，并且状态勾选 通过 。2.根据步骤发送一份邮件到好友邮箱，实际结果发送成功，在这一步的实际结果填写 邮件发送成功，并且状态勾选 通过 。3.好友登录自己的邮箱，通过邀请链接进入系统注册页面，实际结果注册成功了，在这一步的实际结果填写 通过邮箱里面的邀请链接成功注册，并且状态勾选 通过 。4.登录自己账户，查看是否返现，实际结果是账号金额变多了，且金额正确，在这一步的实际结果填写 好友注册之后成功返现到我的账户，并且状态勾选 通过 。 5.完成了上述步骤的测试之后，将整个测试任务的结果标记为“通过”，单击 添加结果 。完成整个测试计划的测试工作，回到测试计划的详情页面，您会发现已测用例达到了100 。","categorie":"测试管理-操作指南-演示测试流程示例"},{"route":"/docs/test/manual/team-usage.html","content":" title 团队成员使用 CODINGDevOpsOA帮助中心pageTitle 团队成员使用pagePrevTitle 执行测试用例pagePrev test manual cases usage.htmlpageNextTitle 管理测试计划pageNext test manual plans.html 在本章您会了解到作为一个团队成员 非管理员 如何快速使用CODING测试管理，具体包括 编写各种类型的测试用例。 查询系统分配给我的测试任务。 针对这些测试任务开始测试。 登录登录CODING，单击页面右上角的 imgsrc https main.qcloudimg.com raw 7531b01c25014beb2754277107fc4ab1.png style margin 0 ，进入项目列表页面，单击项目图标进入目标项目。 添加用例1.选择左侧菜单栏的 测试管理 用例管理 ，进入用例管理页面。 2.单击 imgsrc https main.qcloudimg.com raw 0680d1e4f6dd9930ddd50b701f243377.png style margin 0 ，输入名称后按回车键创建分组。 3.单击 创建用例 ，开始测试用例创建。4.每个用例包括了本次测试的标题 前置条件 描述 步骤 预期结果等等。 标题 必填项，您应该起一个辨识度高的标题。 前置条件 可选项，您可以用来描述在本次测试所依赖的条件 用例类型 根据不同的场景，您可以选择 文本用例 或 步骤用例 的其中一种。 用例内容 最重要的部分，在这里您可以描述此次测试的具体内容以及期望得到的结果。 除了基本的字段外您还可以根据需要添加您认为对本次测试有帮助的附件。5.单击 保存 按钮后即可完成测试用例创建。 文本用例适用于大部分简单 没有明确步骤的测试。添加界面如下图“文本描述”。 步骤用例步骤用例的添加方式与文本用例的区别是步骤用例允许您具体的定义该测试每一步的测试内容以及期望的测试结果。例如如您有一个“邀请好友 本人返现”的测试场景，您应该选择使用 步骤用例 创建该用例，添加界面如下图“步骤描述”。 我的任务有了测试用例之后管理员可以将这些用例组成 测试计划 。 测试计划 包含多个 测试任务 ， 测试任务 您可以理解为 测试用例 在 测试计划 里面另外一种存在状态。 测试任务 可以具体设置优先级 具体分配到某一个人。下面介绍如何在系统中找到分配给我的测试任务以及如何完整的完成一项测试。 1.开始测试1.选择左侧菜单栏的 测试管理 测试计划 ，进入测试计划页面。2.在测试计划页面，左侧测试计划列表中选择一个测试计划后，右侧展示了该测试计划中包含的所有测试用例。3.如果您想测试整个测试计划，则直接单击右上角的 开始测试 ，但是如果您只想测试分配给自己的测试任务，则单击开始测试右侧的更多选项，勾线 只测我的 ，然后在单击 开始测试 ，则系统会过滤掉不是分配给我的测试任务，并且进入测试中的界面。 2.添加测试结果1.在测试中的页面，单击最下面的 记录结果 ，将弹出记录测试结果弹窗页。 2.在记录测试结果弹窗页中，您可以选择您实际测试过程中得到的结果 通过 失败 ，某些情况可能由于其他的原因本次测试没有顺利完成，您也可以添加测试结果为 受阻 或者 重测 。3.当然在添加结果的同时您也可以顺便添加 备注 。4.单击 添加结果 您便完成了一次测试。5.除了在添加结果的时候添加备注之外，CODING也提供了单独的添加备注界面，单击 发表注释 即可发表一个不包含测试结果的单纯备注。6.有时候您可能需要提供部分证据，来告诉开发人员这个测试的确没有通过，那么推荐您使用 添加附件 功能，CODING测试管理允许在添加结果和添加注释的时候都同时上传附件。 3.添加步骤用例测试结果上面介绍了如何完成一个简答测试任务的测试，包括添加结果 添加注释 上传附件等等，但是很多情况下测试任务要比上面的复杂的多，例如基于 步骤用例 的测试任务，因为 步骤用例 描述内容不是一段纯文本而是明确的步骤，所以自然针对此类的测试任务也要稍微复杂些。下面介绍如何测试基于步骤用例的测试任务。 1.首先入口和普通测试任务相同，单击 记录结果 按钮同样进入记录测试结果弹窗页。2.上面四个状态表示您对整个任务的测试结果 而不是每一个步骤的测试结果，通常情况下每个步骤都通过该任务才算通过 ，下面罗列了该任务的每一个步骤的预期，您要做的是在每个步骤下面填写您的“实际测试结果”，并标示该步骤为 通过 或者 失败 。3.最后再添加整个测试任务的结果 通过 受阻 重测 失败 ，填写完上面的必要内容之后您就可以单击 添加结果 完成这次看似复杂点的测试。和简单的测试任务一样，您也可以添加注释 上传附件。以上就完成了一个完整的测试流程。","categorie":""},{"route":"/docs/cd/docs/FAQ/FAQ.html","content":" FAQ 如何配置发布通知部署 流程配置 发布流程 编辑发布流程 进入发布通知Tab。特别注意 已有群需要将 Coding助手 公共账号拉进群才能发送消息 发布通知 策略器问题Q 发布节点上配置了灰度策略 50 ，100 ，按标签编排时，一个节点上发布的集群由之前的“一个”变成了“多个”，此时灰度策略是按多个集群一起计算，还是一个个集群算？A 已灰度策略 50 ，100 举例，依旧保持2个阶段，第一阶段就是各个集群的取50 的实例","categorie":"持续部署-FAQ"},{"route":"/docs/cd/docs/bestpractice/multi-region-deploy.html","content":" 腾讯云多地域发布腾讯云业务存在多地域的集群，每个地域的制品或配置可能存在不同，为了解决这个问题，CD提供了按“标签”发布的能力。 0.总体步骤1.在“应用管理 应用详情”页面，对有地域属性的Artifact或Cluster增加地域标签。2.在“流程配置 发布流程”页面，创建类型为“标签编排”的发布流程，完成编排。3.在“发布单”页面，选中上述发布流程，选择流程关联的标签，会展示应用下标签关联的制品列表，勾选需要发布的制品即可。4.创建好发布单后，会根据发布流程为每个标签将会生成一个发布任务，某标签对应的发布任务下发布的制品和集群均和标签存在关联。特别的，应用下满足标签关联的所有集群都将默认发布 1.Artifact Cluster绑定标签在“应用管理 应用详情”页面，对有地域属性的Artifact或Cluster增加地域标签 绑定标签 2.创建发布流程在“流程配置 发布流程”页面，创建类型为“标签编排”的发布流程，完成编排 绑定标签 3.创建发布单在“发布单”页面，选中上述发布流程，选择流程关联的标签，会展示应用下标签关联的制品列表，勾选需要发布的制品即可。 绑定标签 4.操作发布单创建好发布单后，会根据发布流程为每个标签将会生成一个发布任务，某标签对应的发布任务下发布的制品和集群均和标签存在关联。特别的，应用下满足标签关联的所有集群都将默认发布。 审批 发布 ","categorie":"持续部署-最佳实践-腾讯云多地域发布"},{"route":"/docs/cd/docs/quickstart/README.html","content":" 快速开始 1.模块介绍Coding CD位于Coding项目中的 部署 模块，包含下列三个子模块 应用管理 管理注册发布需要的Artifact Cluster LB 流程配置 配置审批流程 发布流程 发布策略 发布单 用于新建 查看 操作发布单 系统入口 2.概念解释 应用 见APP 制品 见Artifact 集群 见Cluster 负载均衡器 见LB 审批流程 见ApprovalFlow 发布流程 见ReleaseFlow 发布单 见Release 任务 见ReleaseTask 节点 见Node 批次 见Stage 轮次 见Round 关系图 3.快速接入见 接入流程 ","categorie":"持续部署-快速开始"},{"route":"/docs/cd/docs/quickstart/getting_started.html","content":" 接入流程 mermaidgraphLRsubgraph应用管理新建应用 关联制品关联制品 关联集群endsubgraph流程编排关联集群 创建审批流程创建审批流程 创建发布流程创建发布流程 绑定审批流程 可选endsubgraph发布绑定审批流程 可选 创建发布单创建发布单 启动发布end 上述是一个从接入到发布的建单流程，下面将结合交互展示具体操作。 1.新建应用进入任一Coding项目，点击左侧菜单栏 部署 按钮，进入 应用管理 模块，在页面右侧点击 添加应用 。 添加应用 2.关联制品进入第一步创建的应用详情页，可看到制品和集群两个Tab，切换制品Tab，在Tab右侧点击 添加制品 。制品类型以“织云PKG包“为例，点击 包名 后搜索指定包名，再选择完整PKG包名，并补充名称后点击 确定 完成关联制品操作。 添加制品 添加pkg制品 3.关联集群在应用详情页，将Tab切换到 集群 ，在页面右侧点击 添加集群 。集群类型以“填写IP”为例，填写集群名称及其他信息，注意仅有IP负责人才可以添加对应IP地址，点击 保存 完成集群关联操作。 添加集群 添加inputip集群 4.新建审批流程点击左侧菜单栏 部署 ，选中 流程配置 模块。在右侧页面点击 审批流程 ，选择 新建审批流程 ，并编辑审批流程，初始化会生成 开始 按钮，点击 开始 按钮添加 后续步骤 ，并依次在右侧输入步骤名以及审批人类型，完成编辑后点击右侧的 保存 即可，并输入版本描述信息。 新建审批流程 编辑审批流程 5.新建发布流程点击左侧菜单栏 流程配置 后在右侧页面点击 新建发布流程 ，填写“流程名称”并选择发布类型，其中选择按照标签分组编排需要设置标签，发布类型以“根据标签分组编排“为例，点击 确认 后编辑步骤编排，具体操作与第四步相似，完成编排后点击右侧的 确认 完成发布流程的新建过程。 新建发布流程 编辑发布流程 6.新建发布单点击左侧菜单栏 发布单 ，右侧页面点击 新建发布单 ，按照“基本信息”的表单要求填写内容，点击 下一步 配置制品，确定配置制品信息正确点击 下一步 ，进入提交审批点击 确认 。 新建发布单 配置制品 ","categorie":"持续部署-快速开始-接入流程"},{"route":"/docs/ci/使用手册/demo/demo.html","content":" CODING CI示例 Android项目构建案例 iOS项目构建案例 使用织云的案例 使用docker实现持续集成 使用distcc ccache的案例 ","categorie":"持续集成-使用手册-CODING-CI示例"},{"route":"/docs/ci/使用手册/docker/custom-image.html","content":" Docker镜像订制 hr 简介 hr 若默认Docker镜像不满足构建需求，则需要自己订制Docker镜像进行构建。镜像需要 包含CODING CI的Agent及执行环境 ，CODING CI会启动镜像，将其作为编译环境使用。 CODING CI编译镜像要点 hr 1.推荐基础源镜像为 csighub.tencentyun.com qcidocker qci base latest 2.CODING CI支持从公司内网 外网Docker仓库拉取镜像，Docker默认仓库为docker.io3.如需使用仓库非公开镜像，还需要配置登录认证信息，参见“自定义镜像使用配置示例2” 镜像编译步骤 hr 1.编写Dockerfile，增加自定义环境。可以参考 https yeasy.gitbooks.io docker practice content image build.html 2.使用 dockerbuild 命令进行编译3.使用 dockerpush 命令将编译好的镜像上传到指定仓库 自定义镜像使用配置示例1 hr version 2.0worker docker qcidocker qci base latest 如果是公开镜像，则只需要配置镜像地址即可。示例中使用的是docker.io镜像仓库。 自定义镜像使用配置示例2 hr version 2.0env DOCKER USER my user nameDOCKER PWD secret UrcN9ASQyY9nERXWJ19SF5ckAZKUTiMvkI5qT LLBvKXWJ19SF5ckAZKUTiMvkI5qT LLBvKKXworker docker registry csighub.tencentyun.comusername DOCKER USERpassword DOCKER PWDimage csighub.tencentyun.com my user name qci worker v3 在这份配置中，指定了代码仓库地址 镜像地址，以及认证信息。这些信息都可以放在环境变量中，然后用 环境变量名 的方式进行引用。环境变量中敏感信息可以加密后配置，加密相关请参考 环境变量 章节。 基础镜像Dockerfile hr 依赖文件 http qci.oa.com media install slave Python 3.6.4.tgz http qci.oa.com media install slave git 2.9.3.tar.gz http qci.oa.com media install slave pip.conf FROMcsighub.tencentyun.com admin tlinux2.2 bridge base tcloud latest installgitCOPYgit 2.9.3.tar.gz data RUNyum yinstallzlibzlib develcurlperl ExtUtils CBuilderperl ExtUtils MakeMakergcccurl develexpectmakewgetmsgfmtgettextgettext develzipunzipopenssl develperlperl develcpioexpat develgettext develRUNyum yremovegitRUNcd data tar zxvfgit 2.9.3.tar.gz cdgit 2.9.3 . configure make makeinstall cd data rm rf data git 2.9.3 rm f data git 2.9.3.tar.gz gitconfig globaluser.email anonymous gitconfig globaluser.name anonymous installsvnRUNyuminstall ysubversion installpython3COPYPython 3.6.4.tgz data RUNcd data tar zxvfPython 3.6.4.tgz cdPython 3.6.4 . configure make makeinstall cd data rm rf data Python 3.6.4 rm f data Python 3.6.4.tgzENVPATH usr local sbin usr local bin usr sbin usr bin sbin bin pipCOPYpip.conf etc CODING CIAgentRUNpip3install Uqci worker ihttp pypi.dq.oa.com simple trusted host pypi.dq.oa.com ","categorie":"持续集成-使用手册-Docker指引-Docker编译镜像订制"},{"route":"/docs/ci/使用手册/docker/docker-language.html","content":" 编译环境语言选择 说明CODING CI平台内置一系列Docker镜像，来满足不同语言 不同版本的构建环境。镜像选择可以通过 language 关键词进行指定。 实现方式CODING CI平台已经完成一系列的语言镜像，并在后台配置好镜像映射。用户在配置文件中指定 language 关键词，CODING CI在解析yml配置文件时会查找后台配置的映射，找到 language 对应的构建环境Docker镜像并添加到配置信息。Worker获取到下发任务时，读取配置信息，加载指定的Docker镜像启动任务。 使用方法language关键词可配置在qcifile stage或task的顶级。可选镜像 版本见“语言支持列表” yamllanguage language name version hr 使用示例 hr 仅指定 language ，使用默认版本 yamllanguage python 指定 language ，同时指定版本 yamllanguage python 3 完整示例 yamlversion 2.0language node jsstages stage Webpack打包cmds tnpminstall tnpmrunbuild 语言支持列表 table tr th language th th 版本 黑体为默认版本 th th 详情 th tr tr td python td td strong 3 strong td td python2.7.15 br pip18.0 br python3.7.4 使用python3命令启动 br pip 19.2.3 使用pip3命令启动 td tr tr tdrowspan 3 node js td td strong 8 strong td td node8.11.4 br npm6.4.1 br tnpm6.1.0 br Yarn1.9.4 td tr tr td 10 td td node10.9.0 br npm6.9.0 br tnpm6.1.0 br Yarn1.9.4 td tr tr td 12 td td node12.13.0 br npm6.12.0 br tnpm6.1.9 td tr tr tdrowspan 2 Java td td strong 8 strong td td Java8.0 br Ant1.9.9 br Maven3.3.9 td tr tr td 7 td td Java7.11 br Ant1.9.9 br Maven3.3.9 td tr tr tdrowspan 6 cpp td td strong 4 strong td td GCC4.8.5 br cmake2.8.12.2 td tr tr td 4.9.4 td td GCC4.9.4 td tr tr td 4.1.2 td td GCC4.1.2 td tr tr td 4.4.6 td td GCC4.4.6 td tr tr td 5.3.0 td td GCC5.3.0 td tr tr td 5.5.0 td td GCC5.5.0 td tr tr tdrowspan 4 go td td strong 11 strong td td go1.11 td tr tr td 12 td td go1.12 td tr tr td 13 td td go1.13 td tr tr td 14 td td go1.14 td tr tr tdrowspan 2 php td td 5 td td php5.6.40 br composer1.8.0 td tr tr td strong 7 strong td td php7.2.14 br composer1.8.0 td tr table 其他说明如果同时配置了 language 关键词和docker镜像，以docker镜像配置为准。 在worker中指定language也可以在worker中设置language关键字，表示在此worker中使用哪种环境的docker，当worker设置了language关键字，worker上一级的language将不再生效。例子如下 yamltasks task buildworker language go 12label PUBLICtools name gradleversion 5.1.1envs GRADLE HOME data qci apps gradle gradle 5.1.1 PATH GRADLE HOME bin PATHcmds echo PATH language对应的可使用的工具 版本和对应的环境变量可以在UI界面中获取。","categorie":"持续集成-使用手册-Docker指引-使用language指定编译环境"},{"route":"/docs/ci/使用手册/docker/public-image-des.html","content":" 公共编译机Docker使用说明 hr 简介 hr 公共编译机的Docker环境，及网络环境说明。Docker常用命令注意事项 Docker版本 hr Dockerversion18.09.8 dockerlogin hr dockerlogin 命令可以直接登录公司内网 外网Docker仓库。Docker默认仓库为docker.io使用 dockerlogout 命令可以删除登录态 dockerbuild hr 如需访问外网仓库，需增加代理 build arghttp proxy http devproxy.oa.com 8080 build arghttps proxy http devproxy.oa.com 8080 dockerrun hr 需指定 net host 参数 如需外网代理，需增加参数 envhttp proxy http devproxy.oa.com 8080 envhttps proxy http devproxy.oa.com 8080 envno proxy oa.com 如需使用 v 参数进行DockerVolume映射，需要使用 QCI PHYSICAL WORKSPACE 环境变量挂载目录，比如参数 v QCI PHYSICAL WORKSPACE dockerdata data 即将workspace中的dockerdata目录，挂在到docker容器中的 data目录。 使用示例 hr version 2.0env DOCKER USER my docker nameDOCKER PWD secret UrcN9ASQyY9nERXWJ19SF5ckAZKUTiMvkI5qT LLBvKKXXnN9pSlyTH7BNj2JIR4IMQ NRIdTeYUY07PsStDOCKER REMOTE PATH csighub.tencentyun.com workspace dockerimage lateststages stage logincmds dockerlogin u DOCKER USER p DOCKER PWDcsighub.tencentyun.com stage buildcmds dockerbuild t DOCKER REMOTE PATH network host build arghttp proxy http devproxy.oa.com 8080 build arghttps proxy http devproxy.oa.com 8080. stage pushcmds dockerpush DOCKER REMOTE PATH stage runcmds dockerrun net host envhttp proxy http devproxy.oa.com 8080 envhttps proxy http devproxy.oa.com 8080 envno proxy oa.com rm DOCKER REMOTE PATH usr bin mybuild stage logoutcmds dockerlogout ","categorie":"持续集成-使用手册-Docker指引-公共编译机Docker命令使用说明"},{"route":"/docs/ci/使用手册/docker/public-image.html","content":" Docker环境说明 hr 简介 hr Docker环境的使用，能够保证构建环境的隔离，而且更方便部署及迁移 CODING CI默认使用Docker环境进行构建 若需要使用实体机环境，请自行接入编译机 若需要订制Docker编译环境，参考 Docker编译镜像订制 网络环境 hr Docker内可以直接访问公司OA内网，及通过代理访问外网 默认Docker环境 hr 默认Docker为 csighub.tencentyun.com qcidocker qci latest ，其中包含 Python3.6.4 Python2.7.15 Python2.6.6 GCC4.8.5 Java1.7.0 11 Ant1.9.9 Maven3.3.9 cmake2.8.12.2 Node8.17.0 npm6.13.4 tnpm6.1.9 go1.11 自定义Docker编译环境 hr 若默认环境不满足编译要求，则需要自定义Docker镜像，参见 Docker编译镜像订制 ","categorie":"持续集成-使用手册-Docker指引-Docker编译环境说明"},{"route":"/docs/ci/使用手册/任务/advance_config.html","content":" CODING CI任务高级配置 hr 任务并发配置CODING CI允许任务并发和配置并发数量，可以在任务配置页面的第二个页签找到并发配置，如图所示 勾选后即可配置并发数，并发数为一个任务同时允许运行的构建数目。默认为不勾选，不勾选时任务同一时刻只能运行一次构建 注意 任务并发时会在编译机上同时生成多个Workspace。 CODING CI任务并发配置 hr ","categorie":"持续集成-使用手册-任务-任务的并发"},{"route":"/docs/ci/使用手册/任务/autocancel.html","content":" 自动取消 hr 当任务触发比较频繁时，可能会有多个任务在排队，如果只关心最新的构建结果，QCI提供 自动取消排队的任务 选项，可以无需等待旧的构建。 自动取消的设置在任务配置界面，选择 运行配置 其他配置 中的 允许自动取消排队中的任务 。 自动取消设置 勾选此选项后，有新的构建生成时，队列中排队的构建会自动变为 中止 状态 自动取消的规则对于git，只会取消相同分支的构建，对于svn或无代码库的情况，排队中的任务都会取消 自动取消的效果 自动取消的效果 为了标识本次运行是自动取消的，详情会标识 stopbyautocancel ","categorie":"持续集成-使用手册-任务-自动取消"},{"route":"/docs/ci/使用手册/任务/build_version.html","content":" 自定义版本号CODING CI支持用户自定义版本号，用户在任务配置 运行配置 其他配置中，选择 启用版本号 。 build version 可以设置 主版本号 脚本中请使用环境变量 QCI MAJOR VERSION 特性版本版本号 脚本中请使用环境变量 QCI FEATURE VERSION 修正版本 脚本中请使用环境变量 QCI FIX VERSION 构建号 脚本中请使用环境变量 QCI BUILD VERSION 对于构建号，用户需要设置起始值，可以选择三种计算策略 每次构建 1 表示每次构建都会递增1 成功构建 1 表示只有构建成功才会递增1 锁定不变 表示构建号会停在当前值上，启动构建不会改变 注意 为了防止保存时误更改构建号的起始值，您需要选中 修改构建号初始值 后才可以修改构建号的初始值。 当没有设置初始值时，其值与 QCI BUILD NUMBER 相同","categorie":"持续集成-使用手册-任务-自定义版本号"},{"route":"/docs/ci/使用手册/任务/git-commit-status.html","content":" 用户自定义上报Git内容指引 hr 介绍 CODING CI现已支持用以自定义QCI上报给Git的上报内容，上报内容可以通过命令或者脚本的方式，在任务执行过程中将内容上报给CODING CI，CODING CI会在当次任务执行结束后，上报用户提交的内容到代码库对应的提交版本上，用户可以在Git的Commits上直接看到对应的CODING CI任务的集成情况和用户上报的内容，例如可以上报测试通过率等内容。上报效果如图所示 CODING CI自定义上报图 1.qcifile中使用命令 qcitotalresultgitreport pid QCI BUILD ID pdescription test pblock 0 tYOUR TOKEN uUSERNAME 2.py脚本中使用 importqcicliimportos Initializeaclient loadtheschemadocumentclient qcicli.QCIClient qci build id os.getenv QCI BUILD ID ,None InteractwiththeAPIendpointheaders X DQAPI Authentication YOUR TOKEN, X DQAPI USERNAME USERNAME action totalresult , gitreport params id qci build id, description test , block 0, result client.request action,headers,params params 3.使用解释 依赖库 qcicli，qcicli的安装和使用可以参考 qcicli使用文档 命令中的参数解释 id 任务当次执行实例的id，可以使用环境变量QCI BUILD ID获取到description 需要上报的内容block 任务执行完是否block合流，0 False，1 TrueYOUR TOKEN 替换为用户的api网关tokenUSERNAME 替换为用户的企业微信名 api网关的个人token api网关个人token查看 qcifile中的使用示例 stage 测试及上报cmds echo helloCODING CI qcitotalresultgitreport pid QCI BUILD ID pdescription test by jerry 20181207测试通过率 80 pblock 0 t3Cxxxxxxxxxxxxxxxxxxxxxxxxxxxxx17 ujerryqzhang ","categorie":"持续集成-使用手册-任务-用户自定义上报Git内容"},{"route":"/docs/ci/使用手册/任务/job_notify_config.html","content":" CODING CI通知配置 hr 1.介绍CODING CI支持任务运行完成时向指定的人员发送任务结果通知。可以配置多种通知渠道 快速选择任务相关人员 追加自定义的通知内容 配置发送的条件 配置多条和自由组合不同的通知方式及通知人，这些功能可以轻松配置用户理想的通知场景。现已经支持的通知渠道 邮件 短信 微信 企业微信Tips 企业微信群 2.配置可以在任务配置页面的第三个页签配置任务通知 单条通知配置记录如下 CODING CI通知配置 一个任务可以同时配置多条通知记录，点击通知下方的添加按钮可以继续添加通知配置项，用于组合不同渠道 不同通知条件和不同的通知人 CODING CI配置多条通知 注意 勾选企业微信群，需要输入企业微信群号，会将通知内容发送至企业微信群，群号获取方法 已有群 PC端企业微信，同时按Ctrl Shift Alt D mac ctrl shift command D ，再右键选中企业微信左侧的群，选择 复制并显示roomid ，粘贴后取出数字部分，在前面加上 ww 即为群号，已有群需要将 qci admin 公共账号拉进群才能发送消息新拉群 群号可以不填，保存后接下来的任务第一次运行完成时，会根据勾选的发送人新拉一个群，并自动填入群号企业微信群号支持用分号 分隔多个企业微信群号 勾选指定人，可以配置额外的知会人的企业微信名 支持用分号分隔多个人 ，发送邮件时会抄送配置的知会人，其他通知方式正常通知 支持配置发送条件，可以分别成功 失败时的发送模式，可以选择总是发送 不发送或者结果发生变化时发送 同一个任务的多条通知记录的相同人员不去重，所以需要配置多条通知时，避免同一个渠道通知同样的人 可以填入自定义通知内容，通知内容会追加到CODING CI的内容模版上通知内容支持 格式的环境变量，如 QCI TRIGGER 发送邮件时支持自定义html样式，发送其他方式时会自动剔除html标签邮件内容和企业微信群支持markdown格式，对于企业微信群消息，只支持markdown的子集，详细结果请参考 企业微信消息类型及数据格式 例如 企业微信支持markdown 子集 格式 你好 世界 QCI TRIGGER fontcolor info 绿色 font 效果如下 CODING CI结果通知 邮件中可使用html格式或markdown格式 本次由 spanstyle color red QCI TRIGGER span 启动 foxmail支持 fontcolor info 标签，outlook中需要加上class fontcolor info class info ","categorie":"持续集成-使用手册-任务-任务通知配置"},{"route":"/docs/ci/使用手册/任务/multi-branch-task.html","content":" 多分支监控说明 hr CODING CI可以在任务上配置多个分支，当这些分支做CI MR等操作时都会触发任务的执行。 新建和编辑任务时选择多个分支 hr 在新建或编辑界面上，分支列表会从GIT库中获取所有分支供用户选择，用户也可以填写正则表达式进行匹配。 选择多分支 注意 写正则表达式请在开始和结尾处使用 ，例如 d 设置多分支后，CI MR等操作，只要是匹配到了设置的分支，均为触发任务 选择多分支 hr 定时触发支持多分支在新建或编辑界面上，定时触发可以设置多个触发条件 定时触发 注意 选择的分支上必须存在配置的qcifile 支持启动任务时指定分支启动任务时，可以从所有分支的下拉列表中，选择某一个分支进行启动为方便使用，CODING CI会将用户配置的多分支监控的第一个分支 正则匹配的表达式除外 做为默认值，同时，会把用户配置的分支 正则匹配的表达式除外 做为优先的分组放在前面，供用户快速选择 启动时选择分支 注意 选定的分支上也必须存在配置的qcifile ","categorie":"持续集成-使用手册-任务-多分支监控"},{"route":"/docs/ci/使用手册/任务/no-revert.html","content":" 不清理工作空间 hr CODING CI每次运行前会执行 gitclean 等操作还原工作空间，以确保每次运行前的工作空间是干净的。但某些情况下，如实现 增量编译 的效果，需要保留工作空间下的文件，可以通过 任务配置 运行配置 其他配置 不自动清理工作空间 来进行设置说明 选择 自动清理工作空间 后，QCI会自动下发 QCI NO REVERT 1 环境变量 若出现文件冲突，可能导致代码拉取失败。请确认工作空间的修改不会产生冲突。","categorie":"持续集成-使用手册-任务-不清理工作空间"},{"route":"/docs/ci/使用手册/任务/pipeline-badge.html","content":" 任务结果徽章展示 hr 1.内容通过在markdown文档中 比如代码库的readme.html 添加链接的方式，可以在文档中展示指定QCI任务的最近一次执行的序号和执行结果徽章，点击徽章可直接跳转QCI平台该任务的最新一次执行 2.示例 CODING CI项目徽章展示 3.快速使用通过在markdown文档中添加如下内容 CODING CI徽章 http qci.oa.com pipeline job id totalresult current 将其中的两处 job id 替换为CODING CI平台上指定任务的任务id即可 http qci.oa.com pipeline 400 totalresult current 任务id可以在CODING CI平台上获取，如上面的链接，任务id即为400完成后，markdown解析后的页面将展示任务id job id 的任务的最近一次执行的状态，点击徽章，链接会跳转到该次执行在CODING CI平台的页面 4.CODING CII平台上的项目徽章CODING CI的每个任务的详情页面都有项目徽章，点击这个徽章，可以直接看到项目的徽章的使用方法 CODING CI项目徽章展示 使用方法现已支持用户新增展示自定义字段，使用链接可以在界面的内容字段填入内容，按Enter即可预览，自定义字段的内容将会替换原来的当前最新构建号，可以在自定义的内容后加上 build 即可同时显示用户的自定义内容和当前最新构建号在链接上的体现是 在请求链接上添加参数subtitle，subtitle传空时默认展示当前最新构建号，subtitle传值时展示所传的值，所传的值包含 build 字符时，会同时显示值和当前最新构建号","categorie":"持续集成-使用手册-任务-项目徽章展示"},{"route":"/docs/ci/使用手册/任务/pipeline-display.html","content":" 流水线展示 hr 结论展示 结论展示位于流水线页面顶部，方便用户一目了然的知悉本次执行的状态或结果。 成功 br 运行成功实例 失败 br 运行失败实例 执行中 br 运行中实例 Stages展示 Stages展示位于结论性展示的下方，包括stage以及stage下task的总体执行概览。 执行概览 br Stages执行概览 Task详情 Task详情展示位于Stages展示下方，点击相应stage，可以切换task展示。 task列表 br task列表 task执行日志与config br 日志 ","categorie":"持续集成-使用手册-任务-任务展示"},{"route":"/docs/ci/使用手册/任务/pipeline-job-create.html","content":" 任务创建 hr 创建入口 侧边栏创建 br 填写任务名称 基础信息 填写任务名称 br 填写任务名称 代码库配置 Stages展示位于结论性展示的下方，包括stage以及stage下task的总体执行概览。 git svn br 添加代码 同时支持不使用代码库 br 不使用代码库 流水线配置 如果代码库配置步骤选择了git或svn，此时可选择通过代码库qcifile或者通过UI配置生成流水线 br 流水线配置 如果代码库配置步骤选择了不使用代码库，此步骤会知会提供UI配置的选项 br 流水线配置 选择执行环境 公共执行机 使用qci的编译机来进行构建任务 自定义执行机 使用用户自己的的编译机来进行构建任务 自定义Docker 使用公共编译机拉取用户自定义docker镜像进行构建任务 br 执行环境 ","categorie":"持续集成-使用手册-任务-任务创建"},{"route":"/docs/ci/使用手册/任务/pipeline-status.html","content":" 个性化任务结果展示 hr 一般情况下，CODING CI任务产出建议存为文件，通过CODING CI命令字artifacts落地 artifacts落地的文件，用户可在CODING CI前台下载查看 如下场景，可通过CODING CI支持的如status等命令字来进行个性化任务结果的展示 当数据量比较小，若希望用户在CODING CI前台直接查看产出，而不是下载文件时 CODING CI任务调用第三方工具，产出仅为一个报告的url或者一些总结描述信息时 status hr task可以使用status字段显式指定task的status status字段指向一个taskstatus的json文件，该文件包含下面四个字段 status 必选，可以是 success , failure , error success 对应CODING CI状态为 成功 task执行成功 failure 对应CODING CI状态为 失败 task执行失败 task的关键逻辑失败 例如codedog扫描，扫描发现代码问题 error 对应CODING CI状态为 命令异常 task执行异常 task中使用的工具异常 例如codedog扫描，扫描工具本身出错 description 可选，status的描述，支持markdown格式 url 可选，指向一个外部的url链接 title 可选，配合url在web端展示，尽量简明 report dir 可选，指向要上传到文件服务器的路径 report html 可选，指定report dir时，链接的首页文件 命令字status指定的json文件中的四个字段，在CODING CI前台展示位置如下图所示 task产出在CODING CI前台展示示意 status字段决定了对应task的状态，使用了status命令字时，cmd退出的值对task无意义 url和title展示入口在 报告链接 ,鼠标放在入口上时展示title，点击入口后，在新窗口中展示url指定的页面 report html和title展示入口在 报告链接 ,鼠标放在入口上时展示title，点击入口后，在新窗口中展示report html指定的页面 description展示入口在 报告描述 ，点击后打开的页面中显示description内容 QCIFile中配置使用status示例 yaml stage buildcmds echo buildhelloworld status . status.json status.json文件配置示例 json status success , title 点击查看报告链接 , url http qci.oa.com , 若用户配置了url，以url配置为准上报，不再上传用户报告，report dir report html配置无效。 report html . report index.html , 允许只配置report html而不配置report dir，只上传单个文件，并生成报告链接。 report dir . report 当用户有多个报告链接需要上报时，status也支持多个报告链接格式如下 json status success , title 点击查看报告链接 , url http qci.oa.com , report html . report index.html , report dir . report , status success , title 点击查看报告链接 , url http qci.oa.com , report html . report index.html , report dir . report 当有至少有一个status为error时，结果为error，否则，当有至少有一个status为failure时，结果为failure，当全部是success时，结果为success tips 如下情况，status命令字并不影响task的状态 用户显式指定task状态时，配置的json文件不存在 用户显式指定task状态时，配置的json文件没有表示状态的字段 用户显式指定task状态时，配置的json文件中表示状态的字段值不在CODING CI指定的范围内 task执行完毕后，status命令字指定的json文件将自动删除 用户配置了url，以url配置为准上报，不再上传用户报告，report dir report html配置无效。 允许只配置report html而不配置report dir，只上传单个文件，并生成报告链接。","categorie":"持续集成-使用手册-任务-个性化任务结果展示"},{"route":"/docs/ci/使用手册/任务/pipeline-ui-conf.html","content":" 流水线配置 hr 配置入口 任务当前分为ui配置类型，以及读取代码库qcifile生成类型 后者暂不支持界面配置 br ui配置入口 Stages 新增和删除 br Stages配置概览 任务添加和删除 br task概览 任务表单字段说明 任务名称 task名称，一般用来表明此task的功能和用途。例如 webpack打包 命令行 执行任务里的执行命令。在 nix下是shell命令，在windows下是dos命令。一个task可指定多行cmd，多行cmd顺序执行。cmd如果返回0表示成功，非0表示失败。所有cmd执行成功，整个task才执行成功。前一个cmd执行失败后不再继续后续cmd。所有cmd都执行成功时，task的返回成功，否则失败。 br task概览 执行条件 表示该task在满足条件的情况下才会执行。当选择自定义时，由用户来填写执行条件。具体可查看执行条件详细说明 条件执行 br task概览 产出列表 指定集成任务产出文件或目录 如构建产出 测试报告等 ，在web界面上提供下载 状态文件 指定集成任务产出status文件或目录 除依据cmds的返回值判断任务是否成功外，CODING CI还支持通过status字段显式指定task的结果，并提供展示更丰富的任务结果信息的能力， 查看status 超时 定义等待输出的超时时间 为防止运行命令卡住，CODING CI默认10分钟内task命令如果无任何输出，就会判断task运行结果为超时， 查看超时相关 prompt表单字段说明prompt关键字用来暂停当前任务的执行，用于人工确认是否需要继续执行或是中止执行 提示信息 暂停的原因 以及用户需确认的内容等信息，会显示在prompt的人工确认界面中 处理人 job需要确认的处理人,支持填写环境变量。多个值以分号分隔 finally表单字段说明可以根据前面任务结果来运行的stage 命令行 填写相关场景下所需要执行的命令 查看finally相关 br task概览 多行命令在 命令行 中，脚本内容默认是以行为单位进行单行命令执行的，如果需要增加多行命令，请在开始和结束用“ ” 多于2个 标识，例如 shtest.sh if command vunzip thenyuminstall yunzipfi shtest.sh 全局配置 此类配置不随某个stage或task，而是全局生效的 br 全局配置 缓存 指定集成任务缓存。cache的内容会在下次持续集成的时候利用，从而达到集成任务加速效果。可以用来缓存一些比较耗时的操作，例如依赖包的下载安装 依赖库的编译产出 执行环境 公共执行机 使用CODING CI的编译机来进行构建任务 自定义执行机 使用用户自己的的编译机来进行构建任务 自定义Docker 使用CODING CI的编译机拉取用户自定义docker进行构建任务 环境变量 添加 br 环境变量add 编辑和删除 br 环境变量edit 其他 保存 所有的修改只有点击此处保存，才会存入后台 br 保存 校验 当任务右侧出现红色小叹号，说明此任务配置不完整。此时将无法保存 br 校验 br 校验 ","categorie":"持续集成-使用手册-任务-流水线界面配置"},{"route":"/docs/ci/使用手册/任务/remote.html","content":" 登录调试CODING CI支持用户直接通过webconsole的方式，登录到执行环境中进行调试代码。在任务运行界面，task的结果中，点击 登录调试 ，如下图所示 remote 1 CODING CI会通过webconsole进入执行环境中， remote 2 可以在执行环境中执行shell命令，来运行脚本来调试。 remote 2 注意 只有机器的负责人才可以登录机器进行调试 如果控制台30分钟无输入，则会自动断开连接","categorie":"持续集成-使用手册-任务-登录调试"},{"route":"/docs/ci/使用手册/任务/rerun.html","content":" 任务的重新运行 hr CODING CI支持 重跑任务 重跑task 以及 忽略当前错误继续运行 三种方式的重新运行。 重启任务 hr 当需要按照原先参数重新运行一遍任务的话，可以选择任务详情界面的 重启 按钮，就会以原先的参数重新启动一次任务 重启任务 说明 点击 重启 后会新加一条运行记录 重启的任务代码版本 环境变量 启动方式等都会与原先的任务一致 重跑task如果只想运行失败的task，可以选择 重跑失败 ， 重跑失败 会在原来的执行的基础上重新运行失败的任务 重跑失败 说明 重跑失败 会重新运行原先执行失败的全部任务，本次执行的结果以最新运行结果为准 目前仅可以在任务完成后使用此功能 目前仅能重新运行 最新一次 且在 24小时内 运行的任务 失败继续task失败后，CODING CI的流水线会中止运行，如果希望task的失败并不影响后续的执行，可以选择 失败继续 , 失败继续 会忽略当前失败的任务继续执行下一个stage 失败继续 说明 失败继续 会忽略已失败的任务，按流水线继续运行没有执行的任务，本次执行的结果以最新运行结果为准 仅可以在任务完成后使用此功能 目前仅能重新运行 最新一次 且在 24小时内 运行的任务 选定任务进行重跑CODING CI可以选择运行过的task进行重跑，无论是原先结果是成功还是失败。点击 选择重跑 按钮，会弹出选择框 重启任务 选择要重跑的stage，就会自动列出该stage下的task，选择 支持多选 要重跑的task进行重跑说明 选择重跑 支持一次选择多个任务进行重跑 不支持直接重跑未执行过的任务 会重跑选择的任务以及后续stage的所有任务 仅可以在任务完成后使用此功能 目前仅能重新运行 最新一次 且在 24小时内 运行的任务","categorie":"持续集成-使用手册-任务-任务的重新运行"},{"route":"/docs/ci/使用手册/任务/trigger.html","content":" 任务触发方式说明 hr CODING CI支持自动创建GITWEBHOOK来支持PUSH TAG MR等操作触发任务的执行。 触发方式的设置在任务配置界面，选择“启动方式”，启动方式的配置可以选择触发方式，可以设置多种触发方式并存 触发方式设置 注意，SVN暂不支持打标签触发和合并请求触发 注意，使用webhook方式触发任务，在git上必须有master或owner的权限 在集成历史界面上可以查看触发类型 触发方式设置 触发规则 代码提交触发对于SVN和未创建webhook的GIT项目，采用轮询方式触发任务的运行，通常会有一定时间的延迟。对于代码提交触发的集成，启动人为代码的提交人。对于SVN，只有任务配置的代码库路径上的提交才会触发运行 对于GIT，只有任务配置上的分支上的提交才会触发运行。对于代码提交触发，执行脚本中可以通过 QCI REPO BRANCH 获取到运行分支， QCI REPO COMMIT 获取到当次执行的版本号。 打TAG触发只支持GITwebhook的方式触发，请保证认证方式有master或owner的权限，如果任务的认证方式没有权限创建webhook，可以自行将CODING CI的webhook http qci.oa.com rest api trigger event 添加到git的配置界面，并勾上对应的triggerevent，同时需要确保CODING CI上也配置了相对应的触发方式对于打TAG触发的集成，启动人为执行打TAG操作的人。打TAG会触发所有该代码库的集成任务。对于打TAG触发，执行脚本中可以通过 QCI REPO BRANCH 获取到任务配置分支， QCI REPO TAG 获取到当次执行的TAG名称。 QCI REPO TAG 当非打TAG触发时为空。 合并请求触发只支持GITwebhook的方式触发，请保证认证方式有master或owner的权限，如果任务的认证方式没有权限创建webhook，可以自行将CODING CI的webhook http qci.oa.com rest api trigger event 添加到git的配置界面，并勾上对应的triggerevent，同时需要确保CODING CI上也配置了相对应的触发方式对于合并请求触发的集成，启动人为发起合并请求的人。合并请求触发首先会触发源分支的集成任务，当无此源分支的集成任务时，会触发分支为目标分支的任务。所以当需要监控快速变化的分支MR时，监控分支设置为目标分支是一个好主意。为消除编辑MR也触发hook的影响，同一分支和commit号MR不会再次触发。MR触发支持在界面上设置是否block本次合并。对于合并请求触发，执行脚本中可以通过环境变量 QCI MR SOURCE BRANCH 获取到源分支， QCI MR TARGET BRANCH 获取到目标分支。当非合并请求触发时，这两个环境变量均为空。 模拟合并当选择 合并请求触发 时，可以选择 是否模拟合入 ，当选择此选项时，CODING CI会尝试在编译机的工作空间中进行 QCI MR SOURCE BRANCH 到 QCI MR TARGET BRANCH 上的模拟合入。本次运行的结果会是本次模拟合入后的结果。模拟合入不会提交和影响线上代码模拟合入成功，则会以合入后的代码继续执行任务的后续步骤 本地合入失败，则任务这次运行直接失败。 忽略触发对于代码提交触发和合并请求触发，在提交信息message中的任何位置标注 ciskip 或 skipci ，则本次提交或合并请求不会触发任务。当有多个commit触发时，CODING CI会以head的commit的message中是否有 ciskip 或 skipci 为准。 定时触发可以在 定时任务 中配置定时触发规则，可以针对分支设置多个触发规则。当选择 代码未变更时不触发 选项时，如果代码距离上次触发未更改，即使到达触发时间，任务也不会被触发。","categorie":"持续集成-使用手册-任务-触发方式"},{"route":"/docs/ci/使用手册/凭证/certificate.html","content":" Description InUserSettingsEdit Author yourname Date 2019 05 1316 18 11 LastEditTime 2019 08 2715 34 45 LastEditors PleasesetLastEditors 证书管理 hr 为什么需要证书管理证书管理是统一管理证书信息的模块。当编辑CODING CI任务时，可以直接选择对应的证书信息。当更新证书信息时，只需在一个地方修改。 如何进行证书管理选择右上角“我的CODING CI”菜单，在左边栏中选择“证书管理”，就进入到了证书管理列表，该列表按分类列出了用户所有添加的证书信息。 certificate list 点击“新增”按钮，可以添加新的证书信息。目前CODING CI支持的证书类型有 Android证书 certificate Android 添加Android证书时， 证书类型 选择Android证书 证书名称 证书文件 证书别名 证书密码 为必录项， 证书文件 请上传.jks或.keystore格式的证书文件 iOS证书 certificate iOS 添加iOS证书时， 证书类型 选择iOS证书 证书名称 证书文件 证书ID 证书密码 描述文件 为必录项 证书文件 请上传.p12格式的证书文件 描述文件 请上传.mobileprovision格式的描述文件 SSL TLS证书 certificate ssl tls 添加SSL TLS证书时， 证书类型 选择SSL TLS证书 证书名称 服务端证书文件 服务端秘钥文件 为必录项 如何使用证书管理在流水线中配置“安装证书”插件,详情参考 插件描述 。","categorie":"持续集成-使用手册-凭证管理-证书管理"},{"route":"/docs/ci/使用手册/凭证/credential.html","content":" 认证管理 hr 为什么需要认证管理认证管理是统一管理认证信息的模块。当编辑CODING CI任务时，可以直接选择对应的认证信息。当更新认证信息时，只需在一个地方修改。 如何进行认证管理选择右上角“我的CODING CI”菜单，在左边栏中选择“凭据管理”，就进入到了认证管理列表，该列表按分类列出了用户所有添加的认证信息。 credentail list 点击“新增”按钮，可以添加新的认证信息。目前CODING CI支持的认证类型有 帐号信息和密码 credentail list 基于域账户的账户名和密码进行验证，GIT和SVN项目均可用，用户填写的密码将会加密进行存储建议该认证方式使用公共域账户，否则需注意密码过期导致的认证失败 SSH GIT credentail list 因为CODING CIserver对于git信息的获取是基于http的接口，所以除了SSHkey信息外，用户需要填写私有token将生成好的私有SSHkey填入“私有SSHkey文本框”中 SSHkey生成方法请参看 SSHkey指南 ,请点击 这里 添加SSHKey 将GIT平台的私有token填入“私有token文本框”中 私有token的查看地址 查看私有token 如何使用认证管理在新建或编辑任务时，在“认证方式”选项中，可以选择用户在“认证管理”中添加的认证信息。 credentail list CODING CI根据用户代码库路径的类型会对适用的认证方式进行筛选。CODING CI针对HTTP和SSH两种协议做了兼容，代码库的路径可以任意填写HTTP和SSH两种形式的代码库地址。","categorie":"持续集成-使用手册-凭证管理-认证管理"},{"route":"/docs/ci/使用手册/流水线模板/pipeline-template.html","content":" 流水线模板 hr 流水线模板功能 各个项目根据业务的研发流程制定特定的模板流水线，创建流水线任务时只需要选择模板即可快速的创建对应的流水线任务。 如果流水线是通过流水线模板方式创建的，可以通过修改流水线模板来批量更新模板关联的流水线任务。 流水线模板管理登录CODING平台，选择左侧栏 构建与部署 模块的“构建”，在右边栏中选择“模板”，就进入到了模板列表，该列表列出了该项目下所有的模板。 template list 新建模板点击“新建模板”按钮，可以添加新的模板。创建模板权限 项目成员模板基本信息 template base 模板管理员可以修改模板配置 编辑和删除 模板实例化模板实例化即通过模板创建流水线任务 teplate instance1 选择对应的模板，然后点 提交 完成模板任务创建 template instance2 模板修改删除 template modify 模板管理员才能编辑和删除模板 模板实例 模板任务 管理在模板中可以查看关联的模板实例 模板任务 template instance list 点击对应的任务可以查看和编辑模板实例 模板任务 。通过模板创建的任务会继承模板的配置信息，且只能在任务中修改基本信息 环境变量和构建版本号信息。如果需要修改其它信息，需要在模板中修改 模板中修改后，模板关联的任务会同步更新 。 环境变量 1 通过流水线模板创建的任务，会继承模板的环境变量。 2 通过流水线模板创建的任务，可以新增和修改环境变量，且任务中的环境变量不会被模板环境变量覆盖。 3 流水线模板中新增环境变量会自动同步到关联的任务中，但是模板中对环境变量的修改不会覆盖模板关联的任务的环境变量。 模板实例中允许修改的信息 任务基本信息 template instance base 构建版本号 template instance version 环境变量 template instance env FAQ 流水线关联代码库如果流水线需要关联代码库，请在创建模板时，选择关联代码库，并配置流水线的触发方式 template code ","categorie":"持续集成-使用手册-流水线模板-流水线模板"},{"route":"/docs/ci/使用手册/环境变量/env-generic-variables.html","content":" CODING CI内置通用环境变量内置通用环境变量，各类型任务都可引用。除此之外，不同类型的公共编译机有部分平台相关的环境变量，具体请参考各平台环境变量说明。 CODING CI系统定义的内置变量，命名统一以QCI 开头 禁止修改内置环境变量的值，修改仅在当前cmd中生效，不会影响其他task或者下一次启动 CODING CI现有的内置环境变量为 与代码库相关的 QCI REPO 本次运行job的代码库路径 QCI REPO BRANCH 本次运行job的代码库分支名称 QCI REPO COMMIT 本次运行job的代码库版本号 GIT的commit，svn的revision QCI REPO REVISION 含义同 QCI REPO COMMIT QCI REPO TAG 如果本次运行是打标签触发，其值为TAG的名称，否则其值为空 QCI MR SOURCE BRANCH 如果本次运行是MR触发，其值为源分支的名称，否则其值为空 QCI MR TARGET BRANCH 如果本次运行是MR触发，其值为目标分支的名称，否则其值为空 QCI MR ID 如果本次运行是MR触发，其值为MR单的唯一ID QCI MR IID 如果本次运行是MR触发，其值为代码库中MR单的序号ID 与本次提交相关的 QCI COMMIT AUTHOR 本次运行代码库版本的提交人 QCI COMMIT DATE 本次运行代码库版本提交时间 QCI COMMIT MESSAGE 本次运行代码库版本提交信息 与任务相关的 QCI BUILD TIME 本次task运行开始时间的时间戳 单位为s QCI TRIGGER TYPE 本次运行job的触发类型，其值为 TRIGGER MANUAL 人工启动 TRIGGER TIMER 定时启动 TRIGGER TAG 打标签触发 TRIGGER CI CI触发 TRIGGER MR MR触发 QCI TRIGGER 本次运行job的用户名 当QCI TRIGGER TYPE为TRIGGER MANUAL时，其值为启动job的用户 当QCI TRIGGER TYPE为TRIGGER TIMER时，其值为qci timer 当QCI TRIGGER TYPE为TRIGGER TAG时，其值为打tag的用户 当QCI TRIGGER TYPE为TRIGGER CI时，其值为提交代码的用户 当QCI TRIGGER TYPE为TRIGGER MR时，其值为提交MR申请的用户 QCI JOB ID 本次运行JOB的ID QCI JOB NAME 本次运行JOB名称 QCI JOB CREATOR 本次运行JOB的创建者 QCI JOB ADMIN 本次运行JOB的管理员 QCI JOB MEMBER 本次运行JOB的成员 QCI JOB URL 本次运行JOB的链接 QCI JOB TIME 本次JOB的启动时间 QCI BUILD NUMBER 本次运行的序号，相同任务每次运行会增加1 QCI BUILD ID 本次运行的ID，供内部使用，全局唯一 QCI TASK ID 本次运行标识task的ID，供内部使用，全局唯一 QCI LAST BUILD ID 上次执行任务的BUILD ID QCI LAST BUILD COMMIT 相同branch下的上次执行的版本号，对于无代码库或SVN，即为上次执行的版本号 QCI LAST BUILD REVISION 含义同 QCI LAST BUILD COMMIT QCI LAST SUCCESS BUILD ID 上次执行成功任务的BUILD ID QCI LAST SUCCESS BUILD COMMIT 相同branch下的上次执行成功的版本号，对于无代码库或SVN，即为上次执行成功的版本号 QCI LAST SUCCESS BUILD REVISION 含义同 QCI LAST SUCCESS BUILD COMMIT QCI FAIL TASKS 获取失败任务的名称,多个任务名称用 分号 分隔 QCI TASK RESTART 本次运行的task是否为重跑，重跑时该值为1，否则为0 QCI TEMPLATE ID 任务的模版ID 与人工处理节点相关的 QCI PROMPT OPERATOR prompt后的步骤可以通过此环境变量获取prompt的处理人，当有多个处理人时，该变量的值为用分号分隔的多个人 QCI PROMPT MSG prompt后的步骤可以通过此环境变量获取prompt的处理信息，当有多个处理步骤时，该变量的值为用分号分隔的多个审批信息 与执行环境相关的 QCI LOCAL IP 本次运行的编译机IP QCI WORKSPACE 本次运行的工作空间路径，当在docker中运行时，是docker中的路径 QCI IN DOCKER 本次运行是否使用docker，1为在docker中运行，0为不在docker中运行，供内部使用 QCI PHYSICAL WORKSPACE 本次运行的实际物理路径，当QCI IN DOCKER为0时，QCI PHYSICAL WORKSPACE与QCI WORKSPACE相同 构建版本号 QCI MAJOR VERSION 主版本号，在任务配置界面进行配置 QCI FEATURE VERSION 特性版本号，在任务配置界面进行配置 QCI FIX VERSION 修正版本号，在任务配置界面进行配置 QCI BUILD VERSION 构建号，在任务配置界面进行配置，当没有设置初始值时，其值与 QCI BUILD NUMBER 相同","categorie":"持续集成-使用手册-环境变量-CODING-CI内置通用环境变量"},{"route":"/docs/ci/使用手册/环境变量/env-variables-usage.html","content":" CODING CI环境变量分类与使用 hr 环境变量定义和分类 hr 根据生效范围 赋值方式和时机的不同，分为如下几类 CODING CI内置通用环境变量 CODING CI系统定义的内置变量，命名统一以QCI 开头 禁止修改内置环境变量的值，修改仅在当前cmd中生效，不会影响其他task或者下一次启动 具体请参考 CODING CI内置通用环境变量 公共编译机平台相关的环境变量 不同平台的公共编译机有额外的环境变量 具体请参考相应平台的公共编译机环境变量 任务自定义环境变量 用户在qcifile.yml中定义的env变量 以及在CODING CI前台REPO上配置的自定义环境变量 命名规范 不能与CODING CI内置环境变量同名 建议大写，由用户自行保证在执行过程中唯一 优先级 用户在CODING CI前台REPO上配置的自定义环境变量，优先级高于yml文件中定义的环境变量 定义时值已确定，除非修改定义 若在执行过程中修改任务自定义环境变量的值，修改仅在当前cmd中生效，不会影响其他task或者下一次启动 运行时自定义环境变量 用户在执行过程中赋值，传递数据给当前task的后续cmd或者后续stage下的task使用的动态变量 命名规范 不能与CODING CI内置环境变量同名 不能与CODING CI任务自定义环境变量同名 建议大写，由用户自行保证在执行过程中唯一 优先级 运行时自定义环境变量优先级高于任务自定义环境变量和内置环境变量 执行过程中可以动态设置和修改值 注意不能像一般意义上的环境变量一样设置。使用和生效范围见下文 运行时自定义环境变量仅用于传递很小的数据， 当数据量很大时，建议以文件的方式传递 CODING CI的temps关键字 运行时自定义环境变量设置和使用方式 hr 设置运行时自定义环境变量 用户通过往运行时自定义环境变量文件里添加行的方式设置和修改运行时自定义环境变量 注意 对于执行设置操作的cmd脚本本身而言，CODING CI运行时自定义环境变量并不是真正的环境变量，不能在执行设置操作后立刻像普通环境变量一样使用 运行时自定义环境变量文件由环境变量QCI ENV FILE指定 多次设置同一环境变量，以最后一次设置的值为准 设置示例 shell脚本 echo ENV PLANID 123 QCI ENV FILE 注意是追加 py脚本 env path os.getenv QCI ENV FILE ,None ifenv path withopen env path, a asf 注意是追加f.write ENV PLANID 789 n 请勿修改QCI ENV FILE的值 ，否则运行时自定义环境变量不能正确往后传递 使用运行时自定义环境变量 像普通环境变量一样获取使用即可 使用示例 shell脚本 plan id ENV PLANID py脚本 plan id os.getenv ENV PLANID ,None 运行时自定义环境变量生效范围 生效范围 同一个task下的多个cmd执行时 由于task下的多个cmd串行执行，上一个cmd设置的运行时自定义环境变量，下一个cmd中会生效 同一个stage下的不同task执行时 由于stage下的多个task并发执行，当前stage下的task中设置的环境变量，不会在当前stage的其他task中生效,在后续stage中才会生效 同一个stage下的多个task中，若变更了同名环境变量的值，以执行时最后一次变更为准 示例 若QCIFile结构如下 stage buildtasks task synccmds cmd1 cmd2 task qtacmds cmd3 cmd4 stage testtasks task unittestcmds cmd5 cmd6 task qtacmds cmd7 cmd8 cmd1中设置的QCI运行时自定义环境变量，cmd2 cmd5 8中可用 cmd5中设置的QCI运行时自定义环境变量，cmd6中可用 cmd1 4中设置的QCI运行时自定义环境变量，cmd5 8中可用 sudo命令时使用环境变量sudo运行时，会默认重置环境变量，所以脚本中的CODING CI的环境变量传递不过去。但命令行中的环境变量会被shell替换，所以在命令行的参数会被正常解析。可以使用sudo E参数，保留环境变量执行。 环境变量加密 hr 使用场景如密码等敏感信息，不能直接写明文，需加密防止泄露。 加密算法CODING CI使用RSA算法加密。 如何使用 场景一 在QCIFile中配置环境变量1.首先登录CODING CI，使用QCI提供的加密服务将明文转为密文，入口在我的CODING CI 加密服务 encrypt.png 2.复制加密后的密文，写入qcifile.yml，格式示例 env PASSWD secret xxxxyyyzz thestringencryptedbyCODING CIpublickey secret 关键字标识当前字段值为加密后的密文，执行任务时将解密 场景二 在CODING CI前台配置环境变量1.CODING CI前台定义环境变量入口为修改集成任务 自定义环境变量2.自定义环境变量时，输入明文后，选中 加密 即可，系统将自动加密环境变量的值，如下图所示 encrypt job conf.png ","categorie":"持续集成-使用手册-环境变量-CODING-CI环境变量分类与使用"},{"route":"/docs/ci/使用手册/环境变量/env-variables-windows.html","content":" CODING CIWindows环境变量在 CODING CI内置通用环境变量 基础上，Windows公共编译机还具有以下环境变量，可以任务中使用。 标签 QCI WINDOWS PUBLIC 变量名 备注 HOME 7ZIP 7Zip安装目录，打包时可能用到 PYTHON2 HOME Python2.7所在目录 PYTHON3 HOME Python3.x 当前为3.6 所在目录 VS2010 HOME VS2010SP1安装目录， devenv.com 位于其子目录 Common7 IDE 中 VS2015 HOME VS2015update3安装目录， devenv.com 位于其子目录 Common7 IDE 中 VS2017 HOME VS2017安装目录， devenv.com 位于其子目录 Common7 IDE 中 WINDBG HOME WindowsDeguggers所在目录，其中有symstore.exe及子目录 srcsrv 有 svnindex.cmd PERL HOME Perl安装目录 CMAKE312 HOME Cmake3.12安装目录，即bin man doc share所在目录。 WIX310 HOME WIX3.10安装目录，即lux.exe dark.exe所在目录。 NSIS3 HOME NSIS3.04安装目录 JAVA8 HOME JDK1.8所在安装目录 ","categorie":"持续集成-使用手册-环境变量-CODING-CI Windows环境变量"},{"route":"/docs/ci/使用手册/缓存及加速/caches.html","content":" 文件缓存及执行加速 hr CODING CI支持缓存数据，供下次启动集成任务使用，以缩短任务执行时间 或达到增量编译的目的。 支持方式 hr 通过CODING CI命令字cache支持 使用方式 hr 在QCIFile中指定需要cache的数据文件或者目录。示例 cache thosefileswillbecachedbetweenbuilds node modules . build release.app 配置项格式 hr 支持配置文件或文件夹，以下格式都是合法的 cache thosefileswillbecachedbetweenbuilds node modules . node modules node modules . node modules . . node modules . node modules 相对路径基于Workspace工作空间。也可以配置绝对路径，或者使用环境变量。 cache thosefileswillbecachedbetweenbuilds root .gradle HOME .gradle ","categorie":"持续集成-使用手册-文件缓存及任务加速"},{"route":"/docs/ci/使用手册/编译机/public-worker.html","content":" 内置编译环境 hr 说明 hr 公共编译机会使用Docker容器方式进行构建，使用镜像为 csighub.tencentyun.com qcidocker qci latest 默认编译环境可以参考 Docker环境说明 章节 为了更高效地构建，业务可以接入自有编译机使用，参考 自定义编译机接入 章节","categorie":"持续集成-使用手册-编译环境-内置编译环境"},{"route":"/docs/ci/使用手册/编译机/qci-worker-cli.html","content":" qci worker命令说明 qci worker安装使用pip安装qci worker bashpip3installqci worker ihttp pypi.dq.oa.com simple trusted host pypi.dq.oa.com qci worker配置使用 qci workerconfig 命令可以修改qci worker的配置，使用方式为 bashqci workerconfigCONFIG NAME CONFIG VALUE 支持自定义的配置项有 配置项 说明 默认值 WORKSPACE ROOT qci工作目录。任务代码 日志都会存储在此目录下 data qci CMD USER 命令执行用户，权限为普通用户 qci SVN CMD svn应用路径 svn GIT CMD git应用路径 git PIP CMD Pythonpip应用路径 pip3 配置示例 切换任务执行用户为root bashqci workerconfigCMD USER root Windows系统下，切换工作目录到 D qci workspace bashqci workerconfigWORKSPACE ROOT D qci workspace 使用qci worker清理不活跃workspace bashqci workercleanup 会清理编译机上14天内没有启动过的pipline遗留的workspace及缓存文件。 qci worker执行环境qci worker执行环境部署见文档 自定义编译机接入 ","categorie":"持续集成-使用手册-编译环境-qci_worker命令"},{"route":"/docs/ci/使用手册/编译机/worker-log-agent.html","content":" Worker日志采集Agent Filebeat安装指南本平台使用 filebeat 作为日志上报的Agent，要求在每台编译机上安装，否则在Web端无法查看到任务日志。当前各网络的 TLinux 可通过一键安装脚本完成日志Agent的安装配置，其他操作系统请参考本文档。 TOC 1.安装在接入的编译机上解压安装包到建议安装目录，并继续参照第2步完成配置和第3步启动 操作系统 安装包 建议安装目录 FileBeat日志位置 linux 下载 usr local qci filebeat 6.7.1 usr local qci filebeat 6.7.1 logs ARM 下载 usr loal qci filebeat 6.5.4 arm logs usr loal qci filebeat 6.5.4 arm MAC 下载 qci filebeat 6.7.1 mac qci filebeat 6.7.1 mac logs Windows 下载 C ProgramFiles qci filebeat 6.7.1 windows C ProgramData filebeat logs 2.配置 2.1安装包目录结构各个操作系统的安装包目录结构大同小异，以下仅列举重要的目录 路径 作用 data 存放已经采集的日志的相关信息 filebeat 可执行程序 filebeat.yml 主要配置 important inputs.d 配置待集采日志的位置，如果有自定义日志目录，才需要请求参照修改 important 2.2filebeat配置安装后，需要用户手动填写 filebeat.yml 中 beat.hostip 和 hosts ，具体参数见下方。 如果修改配置时，filebeat已经启动，请在修改完配置后，杀掉当前进程并重启 已 DEVNET 编译机 10.85.0.83 的 filebeat.yml 配置为例 yml General fields under root truefields beat.hostip填写本机IPbeat.hostip 10.85.0.83filebeat.config inputs enabled truepath inputs.d .ymlreload.enabled truereload.period 10s Outputs output.logstash hosts填写对应的logstash服务地址hosts devlogstash.qci.oa.com 50001 , devlogstash.qci.oa.com 50002 , devlogstash.qci.oa.com 50003 , dev2logstash.qci.oa.com 50001 , dev2logstash.qci.oa.com 50002 , dev2logstash.qci.oa.com 50003 loadbalance false Logging logging.level info beat.hostip 编译机IP。如果编译机IP时长变化，重新安装时请填写注册时刻的IP。 hosts logstash 服务地址，请根据编译机网络区域填写。 网络 配置 DEVNET devlogstash.qci.oa.com 50001 , devlogstash.qci.oa.com 50002 , devlogstash.qci.oa.com 50003 , dev2logstash.qci.oa.com 50001 , dev2logstash.qci.oa.com 50002 , dev2logstash.qci.oa.com 50003 IDC CDC 10.101.101.191 5044 , 10.101.101.226 5044 , 10.101.103.28 5044 2.3待采集日志位置配置日志的配置在inputs中， 修改一下配置后，无需重启filbeat 。 task.yml 任务日志的位置信息 ci.yml ci.log的位置信息 daemon.yml deamon.log的位置以下是各个操作系统日志中，上述配置文件中 paths 的默认配置，如果有自定义 workspace ， 请根据实际情况作出调整 。 操作系统 task.yml的paths配置 ci.yml的paths配置 daemon.yml的paths配置 Linux data qci root run data qci pipeline qci task qci console qci console.txt br data qci docker qci root run data qci pipeline qci task qci console qci console.txt data qci ci log .log var log qci dev daemon.log Mac 特别注意路径是否匹配 Users qci qci workspace root run data qci pipeline qci task qci console qci console.txt Users qci qci workspace ci log .log Users qci qci daemon.log Windows D qci workspace root run data qci pipeline qci task qci console qci console.txt br C qci workspace root run data qci pipeline qci task qci console qci console.txt D qci workspace ci log .log br C qci workspace ci log .log C qci daemon.log 3.启动 3.1Windows 3.1.1启动使用 管理员身份 启动 PowerShell 右击，选择 Runasadministrator ，执行以下命令安装filebeat服务 shellC cd C ProgramFiles qci filebeat 6.7.1 windows C ProgramFiles qci filebeat 6.7.1 windows PowerShell.exe ExecutionPolicyUnRestricted File. install service filebeat.ps1C ProgramFiles qci filebeat 6.7.1 windows Start Service Namefilebeat 3.1.2重启PowerShell执行 powershellStop Service NamefilebeatStart Service Namefilebeat 3.2Linux Mac 3.2.1手动配置用户若按照本教程手动完成上述配置，可以使用命令 . filebeat 启动filebeat进程 3.2.2自动安装Linux和Mac可以使用自动安装脚本 setup.sh ，脚本将注入 crontab 任务，如果系统开启 crontab ， filebeat 进程将会被拉起并定时检测是否存活。 特别注意 自动安装脚本使用默认的采集日志路径，如果有自定义workspace，可以对照2.3修改 shell. setup.sh beat.hostip hosts beat.hostip 为本机IP,hosts请查见2.2 3.2.3重启安装目录下执行 killall 9filebeat . filebeat 4.健康检查1.web端可以看到日志2.在 filebeat 日志上，可以看到 established 字样， filebeat 日志位置见章节1 5.问题排查filebeat会影响前端的日志框的展示，若用户反馈前端无日志展示，但是可以通过 日志下载 获取日志时，可以认为是filebeat安装或配置问题。在用户无法提供登录信息的情况下，需要向用户索要日志信息，根据日志信息来定位问题。 日志文件 作用 常见问题 解决方法 logs heartbeat filebeat的启动日志 文件无访问权限 修改对应文件权限 logs filebeat filebeat的运行时日志 未设置output 查看filebeat.yml是否配置正确 若对filebeat.yml做了修改，需要重启filebeat 操作系统 重启方式 Linux MAC killallfilebeat 定时任务启动 Windows Stop Service Namefilebeat Start Service Namefilebeat ","categorie":"持续集成-使用手册-编译环境-filebeat安装指南"},{"route":"/docs/ci/使用手册/编译机/worker-management.html","content":" 编译机管理 hr 查看编译机 hr 编译机注册完成后，可以在 集成环境页面 看到自己有权限的编译机。在表格中“ 标签 ”一栏获取到编译机的标签，填写入QCIFile即可使用此编译机进行构建。 编译机管理 在 IP地址 一列，可以看到机器的状态，如 操作系统类型 是否支持docker 是否在线 设置编译机 hr 在编译机列表，点击 标签 一列的编辑图标，可以直接选择属于自己的标签 支持多选 ，也可以直接输入新的标签名称 编译机管理 在操作一栏中可以设置编译机 禁用 下线 禁用 后任务不会下发到此机器上，但编译机还在列表中，可以随时启用 下线 后机器会在列表中删除，不可恢复 高级设置 hr 点击操作一栏中的 设置 ，可以进入编译机的高级设置界面 编译机管理 除了可以设置机器的标签名 支持多选和添加 禁用 下线外，还可以设置编译机的描述信息 最大负荷 责任人。 最大负荷 表示同时可以运行的task数量，当达到最大负荷时，task会等待空闲 责任人 只有责任人才可以使用和操作此label","categorie":"持续集成-使用手册-编译环境-编译机管理"},{"route":"/docs/ci/使用手册/编译机/worker-register-CDC.html","content":" 广州合作机房编译机接入 hr 接入说明 hr 此接入是针对广州合作机房网络环境的tLinux操作系统 若是DevNet网络请访问 Devnet网络环境接入说明 ，若是IDC网络请访问 IDC网络环境接入说明 需确保 yum 等基本命令正常使用，并内网访问正常。 需要能够正常 解析内网域名 ，如域名解析失败，请确认 etc resolv.conf 配置是否正确 为确保功能完善，CODING CI推荐使用python3.6 git2.8 svn1.6等。若低于推荐版本，接入过程将自动为组件升级。 一键接入需要root权限 若无法正常接入CODING CI，或接入过程有任何疑问，可联系coreyliang 接入操作 hr 1.获取APIToken打开 我的CODING CI页面 ，在左侧栏点击“showtoken”可以查看到APIToken 查看Token 2. root权限 下执行以下命令 将命令中 API TOKEN替换为实际Token wget ehttp proxy http qci worker init FM3J4XSH7K17LP3QSLH938PUGDH4E2MQ cdcproxy.tencentyun.com 80http qci.oa.com media install slave webinstall cdc.shchmod xwebinstall cdc.sh. webinstall cdc.shAPI TOKEN 接入脚本扩展功能 hr 脚本还可以通过子命令可分别完成检测 安装 注册 启动Daemon等操作. webinstall cdc.shCOMMANDCommands check检测相关组件版本。install安装必要组件。若gcc,openssl,svn,git,python3等未安装或版本过低，将自动安装或升级。regAPI TOKEN注册本机到CODING CI API TOKEN替换为实际Token daemon安装并启动CODING CIDaemon进程。clean清理脚本运行过程产生的临时文件。 查看机器上当前的组件版本 . webinstall cdc.shcheck检测结果示例如下 版本检测 启动CODING CIDaemon . webinstall cdc.shdaemon 版本检测 注册到CODING CI API TOKEN替换为实际Token . webinstall cdc.shregAPI TOKEN 编译机管理 hr 编译机注册完成后，在 集成环境页面 看到自己有权限的编译机。集成环境列表中找到对应IP，在“ 标签 ”处可添加或编辑IP的标签，具体操作可参考 设置编译机 。 编译机管理 ","categorie":"持续集成-使用手册-编译环境-编译机接入-广州合作机房"},{"route":"/docs/ci/使用手册/编译机/worker-register-IDC.html","content":" IDC网络环境编译机接入 hr 接入说明 hr 此接入是针对IDC网络环境的tLinux操作系统 若是DevNet网络请访问 Devnet网络环境接入说明 ，广州合作机房请访问 广州合作机房接入说明 需要能够正常 解析内网域名 ，如域名解析失败，请确认 etc resolv.conf 配置是否正确 需确保yum等基本命令正常使用，并内网访问正常。 为确保功能完善，CODING CI推荐使用python3.6 git2.8 svn1.6等。若低于推荐版本，接入过程将自动为组件升级。 一键接入需要root权限 若无法正常接入CODING CI，或接入过程有任何疑问，可联系coreyliang 接入操作 hr 1.获取APIToken打开 我的CODING CI页面 ，在左侧栏点击“showtoken”可以查看到APIToken 查看Token 2. root权限 下执行以下命令 将命令中 API TOKEN替换为实际Token wget ehttp proxy http qci worker init FM3J4XSH7K17LP3QSLH938PUGDH4E2MQ idcproxy.oa.com 80http qci.oa.com media install slave webinstall idc.shchmod xwebinstall idc.sh. webinstall idc.shAPI TOKEN 接入脚本扩展功能 hr 脚本还可以通过子命令可分别完成检测 安装 注册 启动Daemon等操作. webinstall idc.shCOMMANDCommands check检测相关组件版本。install安装必要组件。若gcc,openssl,svn,git,python3等未安装或版本过低，将自动安装或升级。regAPI TOKEN注册本机到CODING CI API TOKEN替换为实际Token daemon安装并启动CODING CIDaemon进程。clean清理脚本运行过程产生的临时文件。 查看机器上当前的组件版本 . webinstall idc.shcheck检测结果示例如下 版本检测 启动CODING CIDaemon . webinstall idc.shdaemon 版本检测 注册到CODING CI API TOKEN替换为实际Token . webinstall idc.shregAPI TOKEN 编译机管理 hr 编译机注册完成后，在 集成环境页面 看到自己有权限的编译机。集成环境列表中找到对应IP，在“ 标签 ”处可添加或编辑IP的标签，具体操作可参考 设置编译机 。 编译机管理 ","categorie":"持续集成-使用手册-编译环境-编译机接入-IDC"},{"route":"/docs/ci/使用手册/编译机/worker-register-Linux-one-click.html","content":" 编译机接入 tLinux一键接入 hr 接入说明 hr 此接入是针对DevNet网络环境的tLinux操作系统 若是IDC网络请访问 IDC网络环境接入说明 ，广州合作机房请访问 广州合作机房接入说明 需确保yum等基本命令正常使用，并内网访问正常。 为确保功能完善，CODING CI推荐使用python3.6 git2.8 svn1.6等。若低于推荐版本，接入过程将自动为组件升级。 一键接入需要root权限 若无法正常接入CODING CI，或接入过程有任何疑问，可联系coreyliang 接入操作 hr 1.获取APIToken打开 我的CODING CI页面 ，在左侧栏点击“showtoken”可以查看到APIToken 查看Token 2. root权限 下执行以下命令 将命令中 API TOKEN替换为实际Token wgethttp qci.oa.com media install slave webinstall mq.shchmod xwebinstall mq.sh. webinstall mq.shAPI TOKEN 接入脚本扩展功能 hr 脚本还可以通过子命令可分别完成检测 安装 注册 启动Daemon等操作. webinstall mq.shCOMMANDCommands check检测相关组件版本。install安装必要组件。若gcc,openssl,svn,git,python3等未安装或版本过低，将自动安装或升级。regAPI TOKEN注册本机到CODING CI API TOKEN替换为实际Token daemon安装并启动CODING CIDaemon进程。clean清理脚本运行过程产生的临时文件。 查看机器上当前的组件版本 . webinstall mq.shcheck检测结果示例如下 版本检测 启动CODING CIDaemon . webinstall mq.shdaemon 版本检测 注册到CODING CI API TOKEN替换为实际Token . webinstall mq.shregAPI TOKEN 编译机管理 hr 编译机注册完成后，在 集成环境页面 看到自己有权限的编译机。集成环境列表中找到对应IP，在“ 标签 ”处可添加或编辑IP的标签，具体操作可参考 设置编译机 。 编译机管理 ","categorie":"持续集成-使用手册-编译环境-编译机接入-DevNet-tLinux一键接入"},{"route":"/docs/ci/使用手册/编译机/worker-register-Linux.html","content":" 编译机接入 Linux hr 接入说明 hr 编译机网络环境需要为DevNet，否则无法无法访问code.oa.com代码仓库 默认编译机为tLinux操作系统，需要能够正常执行yum命令，用来安装基础组件及关联库。其他发行版本请自行安装依赖库。 需要root权限执行脚本 命令 部署中有异常，或者编译机无法正常接入CODING CI，请联系coreyliang tLinux操作系统tLinux操作系统可以使用 一键接入脚本 若一键安装失败，或其他Linux发行版本，请按照以下步骤进行软件安装，并根据发行版本自行修改命令。 编译机环境准备 hr 需要保证编译机能够正常解析oa域名 时间准确 软件版本更新 usr sbin ntpdate10.224.132.241yumupdate yyuminstall yzlibzlib develcurlperl ExtUtils CBuilderperl ExtUtils MakeMakergcccurl develexpectmakewgetmsgfmtgettextzipunzipglibc.i686libstdc .so.6openssl develpython3 devel 安装SVN hr yuminstall ysubversion 安装git hr mkdir data ci scriptwget O data ci script git 2.9.3.tar.gzhttp qci.oa.com media install slave git 2.9.3.tar.gzyum yremovegityuminstall ygcccurlcurl develzlib developenssl develperlperl develcpioexpat develgettext develcd data ci scripttar zxvfgit 2.9.3.tar.gzcdgit 2.9.3. configure make makeinstallrm rf data ci script git 2.9.3cd data ci scriptgitconfig globaluser.email anonymous gitconfig globaluser.name anonymous 安装python3 hr mkdir data ci scriptwget O data ci script Python 3.6.4.tgzhttp qci.oa.com media install slave Python 3.6.4.tgzcd data ci scripttar zxvfPython 3.6.4.tgzcdPython 3.6.4. configure make makeinstallrm rf data ci script Python 3.6.4cd data ci script 配置PyPI hr 配置PyPI以访问内网软件源 wget O etc pip.confhttp qci.oa.com media install slave pip.conf 安装CODING CIAgent hr pip3installqci worker ihttp pypi.dq.oa.com simple trusted host pypi.dq.oa.com 获取APIToken hr 在 我的CODING CI页面 左侧点击“showtoken”可以查看到APIToken 查看Token 注册编译机 hr 将命令中API TOKEN替换为实际Token mkdir data ci scriptwget O data ci script reg slave mq.pyhttp qci.oa.com media install slave reg slave mq.pycd data ci scriptpython3reg slave mq.pyAPI TOKEN 完成后会在本地生成配置文件文件下载守护脚本 wget O usr bin qci daemon.pyhttp qci.oa.com media install slave qci daemon.py 添加crontab，即可启动连接 usr local bin python3 usr bin qci daemon.py data ci script slave mon.log2 1 安装filebeat hr 详见 filebeat安装文档 ARM64 shellwgethttp qci.oa.com media install slave qci filebeat 6.5.4 arm64.tar.gz tarzxvfqci filebeat 7.1.1 arm64.tar.gz C usr local cd usr local qci filebeat 6.5.4 arm64 注意 1.以下根据机器环境选择命令2.命令中的本机IP需要替换为机器的IP地址 DEVNET . setup.sh 本机IP devlogstash.qci.oa.com 50001 , devlogstash.qci.oa.com 50002 , devlogstash.qci.oa.com 50003 , dev2logstash.qci.oa.com 50001 , dev2logstash.qci.oa.com 50002 , dev2logstash.qci.oa.com 50003 IDC . setup.sh 本机IP 10.101.101.191 5044 , 10.101.101.226 5044 , 10.101.103.28 5044 ARM其他版本请联系管理员。 linux通用版本 shellwgethttp qci.oa.com media install slave qci filebeat 6.7.1.tar.gz tarzxvfqci filebeat 6.7.1.tar.gz C usr local cd usr local qci filebeat 6.7.1 注意 1.以下根据机器环境选择命令2.命令中的本机IP需要替换为机器的IP地址 DEVNET . setup.sh 本机IP devlogstash.qci.oa.com 50001 , devlogstash.qci.oa.com 50002 , devlogstash.qci.oa.com 50003 , dev2logstash.qci.oa.com 50001 , dev2logstash.qci.oa.com 50002 , dev2logstash.qci.oa.com 50003 IDC . setup.sh 本机IP 10.101.101.191 5044 , 10.101.101.226 5044 , 10.101.103.28 5044 检测查看filebeat日志，位于 usr local qci filebeat 6.7.1 logs filebeat ，若日志中含有 established 字段，表明filebeat启动成功 编译机管理 hr 编译机注册完成后，可以在“我的CODING CI”控制台下，左侧“我的集成环境”看到自己有权限的编译机。在表格中“ 标签 ”一栏获取到编译机的标签，填写入QCIFile即可使用此编译机进行构建。 编译机管理 ","categorie":"持续集成-使用手册-编译环境-编译机接入-Linux"},{"route":"/docs/ci/使用手册/编译机/worker-register-MacOS.html","content":" 编译机接入 MacOS hr 接入说明 hr 编译机网络环境需要为DevNet，否则无法无法访问code.oa.com代码仓库 请确保编译机时间正常，若时间偏差太多，会影响任务正常执行 请保持在同一个用户下安装 使用，期间切换用户可能导致权限问题导致任务失败 部署中有异常，或者编译机无法正常接入CODING CI，请联系coreyliang 安装SVN hr MacOS自带SVN，请确认 svn 命令能够正常使用 安装git hr 安装 Xcode 之后就有Git了，可用以下命令验证 git version 如果没有Git或需要不同版本，可下载git安装包并安装 https code.google.com archive p git osx installer 安装python3 hr 可以使用Homebrew安装Python3。 brewinstallpython 安装完成后，确认 python3 命令及 pip3 命令能够成功执行。 配置PyPI hr 配置PyPI以访问内网软件源 curl o .piphttp qci.oa.com media install slave pip.conf 安装CODING CIAgent hr pip3installqci worker ihttp pypi.dq.oa.com simple trusted host pypi.dq.oa.com 获取APIToken hr 在 我的CODING CI页面 左侧点击“showtoken”可以查看到APIToken 查看Token 注册编译机 hr 将命令中API TOKEN替换为实际Token mkdir jenkins qcicd jenkins qcicurl o jenkins qci reg slave mq.pyhttp qci.oa.com media install slave reg slave mq.pycd jenkins qcipython3reg slave mq.pyAPI TOKEN 完成后会生成qci daemon.conf文件，内含连接Master的secretkey下载守护脚本 curl o jenkins qci qci daemon.pyhttp qci.oa.com media install slave qci daemon.pycurl o jenkins qci slave mon install mq.pyhttp qci.oa.com media install slave slave mon install mq.py 启动守护脚本，连接服务器 用户登录后会自动启动守护进程 cd jenkins qcipython3slave mon install mq.py 安装filebeat hr 详见 filebeat安装文档 安装 查找 qci workspace 所在位置，进入同级路径，一般为当前用户目录，例如 User qci shellcd User qci 下载filebeat shellcurl Ohttp qci.oa.com media install slave qci filebeat 6.7.1 mac.tar.gz tarzxvfqci filebeat 6.7.1 mac.tar.gz rmqci filebeat 6.7.1 mac.tar.gz cdqci filebeat 6.7.1 mac 修改日志配置filebeat采集日志的配置位于 qci filebeat 6.7.1 mac inputs.d ,目前有3个配置文件 ci.yml daemon.yml task.yml ，分别将以上3个文件的日志位置替换成本机正确位置 type logenabled truepaths Users qci qci daemon.log 执行安装 注意 需要把下方命令中的 本机IP 替换为机器的真实IP地址 . setup.sh 本机IP devlogstash.qci.oa.com 50001 , devlogstash.qci.oa.com 50002 , devlogstash.qci.oa.com 50003 , dev2logstash.qci.oa.com 50001 , dev2logstash.qci.oa.com 50002 , dev2logstash.qci.oa.com 50003 检测查看filebeat日志，位于 qci filebeat 6.7.1 mac logs filebeat ，若日志中含有 established 字段，表明filebeat启动成功 编译机管理 hr 编译机注册完成后，可以在 集成环境页面 看到自己有权限的编译机。在表格中“ 标签 ”一栏获取到编译机的标签，填写入QCIFile即可使用此编译机进行构建。 编译机管理 ","categorie":"持续集成-使用手册-编译环境-编译机接入-MacOS"},{"route":"/docs/ci/使用手册/编译机/worker-register-Windows-Devnet.html","content":" Windows编译机自动接入说明 hr 接入说明 hr 编译机网络环境需要为DevNet，或者开发网，否则无法下载脚本 无法访问code.oa.com代码仓库 保证oa域名能够正确解析 以下部署针对64位Windows操作系统。具体流程，请根据自己操作系统版本 软件安装情况自行决定 部署中有异常，或者编译机无法正常接入CODING CI，请联系coreyliang 接入操作 hr 1.获取APIToken在 我的CODING CI页面 左侧点击“showtoken”可以查看到APIToken 查看Token 2.执行接入脚本1.启动 powershell 的两种方法 可在批处理窗口输入 powershell 并回车。 按 win r 组合键调出 运行 窗口，输入 powershell 并回车。2.复制并在 powershell 窗口中执行如下命令 命令中 API TOKEN替换为实际Token 建议在powershell5或以上的版本里运行效果最佳。在powershell中输入 PSVersionTable并回车，即可查看版本信息。 powershellInvoke WebRequest UseBasicParsing OutFilewebinstall win.ps1http qci.oa.com media install slave webinstall win.ps1. webinstall win.ps1API TOKEN 此命令将会完成SVN GIT PYTHON3等软件检测 自动安装 机器注册以及启动CODING CI服务进程等。如部分软件未安装，将自动调出相应的官方安装程序。安装过程如无特殊需求，每一步只需要点击“下一步”或“Next”即可。3.Agent启动 接入脚本执行结束后，Agent会在后台启动。可通过命令查看运行状态 powershellschtasks query tn startqci daemon 4.若机器上 python3 没有引入环境变量，或无法识别 python3 ，可能会导致Agent启动失败。可在 powershell 执行如下命令配置自动启动 powershellschtasks create tn startqci daemon scminute tr py exeC qci daemon.py rusystem 其中 py exe 用python3执行文件的绝对路径替换。 手工接入 hr 若无法通过脚本完成接入步骤，可参考 Windows 手工接入流程 分步配置。","categorie":"持续集成-使用手册-编译环境-编译机接入-Windows"},{"route":"/docs/ci/使用手册/编译机/worker-register-Windows.html","content":" Windows编译机手工接入说明 hr 接入说明 hr 编译机网络环境需要为DevNet，或者开发网，否则无法下载脚本 无法访问code.oa.com代码仓库 保证oa域名能够正确解析 以下部署针对64位Windows操作系统。具体流程，请根据自己操作系统版本 软件安装情况自行决定 部署中有异常，或者编译机无法正常接入CODING CI，请联系coreyliang 安装SVN hr Setup Subversion 1.8.17.msi 安装git hr Git 2.18.0 32 bit.exe 安装python3 hr python 3.6.4.exe 配置PyPI hr 配置PyPI以访问内网软件源，将以下内容保存至 APPDATA pip pip.ini global disable pip version check trueindex url http pypi.dq.oa.com simple trusted host mirrors.cloud.tencent.compypi.dq.oa.com 安装CODING CIAgent hr pip3installqci worker ihttp pypi.dq.oa.com simple trusted host pypi.dq.oa.com 获取APIToken hr 在 我的CODING CI页面 左侧点击“showtoken”可以查看到APIToken 查看Token 注册编译机 hr 下载以下脚本到同一个目录 reg slave mq.py qci daemon.py 执行命令，将命令中API TOKEN替换为实际Token python3reg slave mq.pyAPI TOKEN 完成后会生成 C qci daemon.conf 文件，内含连接Master的secretkey 启动Agent，连接编译机在 cmd 窗口运行如下命令 python3qci daemon.py 查看 C qci daemon.log 文件，提示 consuming 表示安装成功。启动后cmd窗口会挂起，若机器重启，则需要再次手工启动。配置自动启动请往下阅读。 配置Agent自动启动在 powershell 中执行如下命令 powershell py exe Get Command python3 .Pathschtasks create tn startqci daemon scminute tr py exeC qci daemon.py rusystem 若无法通过 Get Command python3 .Path获取python3位置，则可按机器上实际的python3执行文件路径替换 py exe 必须是绝对路径 。 安装filebeat hr 详见 filebeat安装文档 filebeat负责将CODING CI日志上报到ElasticSearch，用于前端展示和后台统计。1.下载 filebeat 2.将文件解压到 C ProgramFiles 目录下3.将 C ProgramFiles qci filebeat 6.7.1 windows filebeat.yml 中 beat.hostip 字段填充为本机IP4.使用 管理员身份 启动 PowerShell 右击，选择 Runasadministrator ，执行以下命令安装filebeat服务 PS cd C ProgramFiles qci filebeat 6.7.1 windows PSC ProgramFiles qci filebeat 6.7.1 windows PowerShell.exe ExecutionPolicyUnRestricted File. install service filebeat.ps1PSC ProgramFiles qci filebeat 6.7.1 windows Start Service Namefilebeat 5.查看filebeat日志，搜索是否还有 established 字段，有则运行正常，日志位于 C ProgramData filebeat logs 编译机管理 hr 编译机注册完成后，可以在 集成环境页面 看到自己有权限的编译机。在表格中“ 标签 ”一栏获取到编译机的标签，填写入QCIFile即可使用此编译机进行构建。 编译机管理 ","categorie":"持续集成-使用手册-编译环境-编译机接入-Windows 编译机手工接入"},{"route":"/docs/ci/使用手册/编译机/worker_usage.html","content":" 如何使用完成注册的编译环境 hr 公共编译环境 hr 若使用平台内置公共编译环境， 推荐使用Docker镜像方式 进行构建，否则编译机集群切换时可能出现环境不一致问题，参见 公共编译机Docker使用说明 章节 在yaml中，省略worker的配置，即为使用公共编译环境 在UI配置中，选择 全局选项 执行环境 公共执行机 ，即为使用公共编译环境 自有编译环境 为了更高效地构建，业务可以接入自有编译机使用，参见 自定义编译机接入 章节 使用自有编译环境，无法指定docker环境，只能在自有编译机上直接运行 编译机管理 中指定label后 比如 mylabel ，在yaml中 yamlversion 2.0worker label mylabelstages stage install... 在UI配置中，选择 全局选项 执行环境 自定义执行机 ，填写机器的label 自定义docker 自定义docker只能在公共编译环境中运行，yaml配置请参看 公共编译机Docker使用说明 在UI配置中，选择 全局选项 执行环境 自定义docker ，填写docker相关的参数 指定stage和task的执行环境CODING CI除了支持全局指定worker，还可以单独指定stage或task的执行环境，这意味着你可以在一台机器上做编译，在另一台机器上做部署和测试。在yaml中， yamlversion 2.0worker label mylabelstages stage buildworker label mylabel2cmds pythontest 2.py stage deploytasks task deployworker label mylabel2cmds pythontest 3.py 其中，stage和task中的worker配置，和全局中的配置规则一致。使用docker的例子 yamlversion 2.0stages stage buildworker docker registry ccr.ccs.tencentyun.comusername DOCKER USERpassword DOCKER PWDimage ccr.ccs.tencentyun.com my user name qci worker v3cmds pythontest 2.py stage deploytasks task deploycmds pythontest 3.py 使用language的例子 yamlversion 2.0stages stage buildlanguage node jscmds pythontest 2.py stage deploytasks task deploycmds pythontest 3.py 如果指定了 worker ，也可以将 language 设置在worker下 yamltasks task buildworker label PUBLIClanguage node jscmds pythontest.py 在UI配置中，可以在task节点配置中，选择 高级配置 ，勾选 指定当前任务运行的Worker 中设置，设置方式与 全局选项 的 执行环境 一致 ","categorie":"持续集成-使用手册-编译环境-编译环境的指定"},{"route":"/docs/ci/使用手册/配置文件/condition.html","content":" 条件执行 hr CODING CI允许用户在QCIFile中的stage或task上设置if关键字，来表示该stage或task在满足条件的情况下才会执行。 用法概述使用 if 关键字表示条件执行，当 if 关键字设置的表达式为 真 时，会执行相应的stage和task，否则stage和task会被置为 跳过 stage设置的例子 stage deploy requirethebranchnametobemasterif QCI REPO BRANCH mastercmds 这表示当分支是master时才会执行该stage，否则该stage将会置为 跳过 task设置的例子 stage deploytasks task copy requirethebranchnametobemasterif QCI REPO BRANCH mastercmds 这表示当分支是master时才会执行该task，否则该task将会置为 跳过 prompt下的msg也可以使用if来判断是否需要人工处理 prompt if result failmsg shouldgo to hensonwang 这表示换进变量result为fail时才需要人工处理，否则会跳过人工处理环节，直接运行后面的步骤。if关键字设置的表达式中支持以下语法 表示环境变量 等同于 表示 等于 表示 不等于 IN a,b 等同于in 表示在列表中存在 NOTIN a,b 等同于notin 表示在列表中不存在 AND 等同于and 表示 与 的关系 OR 等同于or 表示 或 的关系 IS 等同于is 用于判断值是否为 None 或布尔值 ISNOT 等同于isnot 用于判断值是否不为 None 或布尔值 左右括号 表示运算的优先级 表示字符串包含关系，当值以 和 开头和结束时，表示正则表达式的匹配 值当值没有特殊字符时 即值为字母 数字 下划线 汉字 ，两边的引号可以省略比如 aword aword a word 注意 值中不支持含有双引号当值以 和 开头和结束时， 运算符表示匹配正则表达式 注意 正则表达式的值必须使用双引号 注意 正则表达式的匹配规则为单行匹配，点号可以匹配包括换行符之内的所有字符 布尔操作支持以下操作符 AND and OR or AND的优先级高于OR,使用括号可以改变优先级比如 QCI REPO BRANCH masterAND os linuxOR QCI REPO TAG v1.0 QCI REPO BRANCH masterAND os linuxOR QCI REPO TAG v1.0 列表 数组 用于判断一个值是否在一个列表或数组中比如 QCI REPO BRANCHIN master,dev QCI REPO BRANCHNOTIN master,dev 谓词当环境变量的值为 None 其值为None或没有此环境变量 时，可以使用 IS 或 is 判断比如 QCI REPO TAGisNone QCI REPO TAGisnotNone 当判断布尔型的值时，也需要使用 IS 或 is 判断，比如，在yaml中 env is docker True 在条件判断中，请使用 if is dockeristrue 如果使用 或 判断，布尔型的环境变量将会转换为小写的 true 或 false 进行字符串的比较。比如，上述 is docker 变量 is docker True 会转换成 true true 进行比较。所以该表达式的值是 真 别称 等同于 IN等同于in NOTIN等同于notin AND等同于and OR等同于or IS等同于is ISNOT等同于isnot 示例以下是表达式的例子 自定义环境变量的判断 a 2AND b b OR e f AND cIN ab,b,c and aisNone 判断启动人不是deploybot QCI TRIGGER deploybot 非tag触发 QCI REPO TAGisNone 模糊匹配 bb release 2.0 bb release True 正则表达式 bb master bb a z True ","categorie":"持续集成-使用手册-配置文件（QCIFile）介绍-条件执行"},{"route":"/docs/ci/使用手册/配置文件/finally.html","content":" finally关键字 hr CODING CI的job在有步骤运行失败时，会中止本次执行。但实际中，即使任务失败了也需要进行一些操作，比如处理环境清理 回滚 通知等。finally关键字就是可以根据任务结果来运行的stage。 使用说明在qcifile中，可以在第一级指定finally关键字，的示例如下 stages stage buildcmds cmdsareexecutedsequtially makefinally failure cmds echo CIfails email title YourCIFails tohensonwang tencent.com 其中，failure表示任务执行失败时触发，cmds表示要执行的命令列表，为简化起见，failure下不支持配置多个task。也可以设置多个触发条件 finally success cmds echo CIsucess all cmds echo CIall failure cmds echo CIfails finally下的条件支持 success failure all 三种， success 表示任务成功时执行， failure 表示任务失败时执行， all 表示不管任务结果如何始终要执行。这三种条件都是可选的。 使用效果设置failure关键字时，当任务执行成功时，不会触发finally finally success 当任务执行失败时，finally会被触发执行 finally failure 设置多个关键字时，当任务执行失败时结果如下 finally all ","categorie":"持续集成-使用手册-配置文件（QCIFile）介绍-收尾阶段finally"},{"route":"/docs/ci/使用手册/配置文件/ignore.html","content":" 忽略节点执行结果 hr 在实际中，有时候一个任务的结果只是例行做一些不需要卡住流程的步骤，如归档 通知等。这些节点即使失败了也希望pipeline可以继续运行。CODING CI允许用户在QCIFile中的stage或task上设置ignore关键字，来表示该stage或task即使失败也不会中止pipeline的流程。 注意 设置ignore关键字的stage或task的结果不影响整个任务的结果。 用法概述使用 ignore 关键字表示节点执行的结果不影响整个任务的结果，当 ignore 关键字设置为 true 时，忽略节点执行结果，没有设置 ignore 的节点表示 ignore 的值为 false stage设置的例子 stage buildoutput timeout 10if is docker trueignore truecmds whoami pythontest.py 这表示build这个stage即使失败了也会继续运行整个pipeline，且stage的结果不会影响整个任务的最终结果task设置的例子 task pasteignore trueif QCI TRIGGER TYPE master cmds echo CIpaste 这表示paste这个task即使失败了也会继续运行整个pipeline，且task的结果不会影响整个任务的最终结果设置 ignore true 运行的效果如下 credentail list ","categorie":"持续集成-使用手册-配置文件（QCIFile）介绍-忽略节点执行结果"},{"route":"/docs/ci/使用手册/配置文件/notify-other.html","content":" 通知配置及其它配置使用说明 hr qcifile中通知方式及其它高级选项配置指引。 通知方式 yamlnotifications name 通知 QCI前端页面展示用channel EMAIL ENWECHAT 通知渠道。EMAIL ENWECHAT SMS ENWECHAT GROUP WECHATgroup QCI JOB ADMIN QCI JOB NOTIFY USER 通知组 QCI内置的管理员成员等，如 QCI JOB MEMBER QCI JOB ADMIN QCI JOB NOTIFY USER QCI TRIGGER enwechat group 企业微信群iduser andrewjiang 指定人template 通知内容模版on success change 成功发送 change或者always或者never on failure always 失败发送 change或者always或者never name 通知2 channel EMAILgroup QCI JOB ADMINenwechat group user template on success changeon failure never channel 通知渠道。可以选项 EMAIL ENWECHAT SMS ENWECHAT GROUP WECHAT。支持配置多个渠道，使用 隔开。 group 通知组，可以填写QCI内置环境变量，如QCI JOB MEMBER QCI JOB ADMIN QCI JOB NOTIFY USER QCI TRIGGER。支持配置多个渠道，使用 隔开。 enwechat group 企业微信群id。群号获取方法 PC端企业微信，同时按Ctrl Shift Alt D查看。支持填写多个群号，使用 隔开。 user 指定其它通知人，填写企业微信名，多个人使用 隔开。 template 发送邮件时支持自定义html样式或者markdown格式子集，发送其他方式时会自动剔除html标签，支持使用环境变量，如 QCI TRIGGER 。 on success 流水线执行成功后通知发送策略，可以填写项 change或者always或者never。change 结果变化时发送 always 总是发送 never 不发送。 on failure 流水线执行失败后通知发送策略，可以填写项 change或者always或者never。change 结果变化时发送 always 总是发送 never 不发送。 最大执行并发数 yamlmaximum builds 2 maximum builds 最大执行并发数，默认不支持并发执行 是否清理工作空间 yamlis no revert 1 is no revert 是否清理工作空间，默认清理。1 不清理，0 清理 是否自动取消排队中的任务 yamlis auto cancel 1 is auto cancel 是否自动取消排队中的任务，默认不取消。1 取消，0 不取消","categorie":"持续集成-使用手册-配置文件（QCIFile）介绍-通知及其它配置"},{"route":"/docs/ci/使用手册/配置文件/pipeline-stage-task.html","content":" 集成任务设定及阶段划分 hr 基本结构 hr setup在yaml中使用setup关键字来指定每个stage最初要执行的操作，setup中指定的命令会在每个stage下的task之前执行。可以使用setup来进行环境初始化等操作，以便在分布式集成环境中也会初始化相同的环境。setup用一个列表表示多条初始化操作，示例如下 version 2.0worker label mylabelenv USERNAME mynamePASSWD secret xxxxyyyzz thestringencryptedbyCODING CIpublickeysetup yuminstallphp pip3installrequests definethestagesstages ... CODING CI任务使用stage来划分不同阶段的任务 task 各个stage之间，串行执行 即前一个stage下的所有任务执行完毕后才开始执行下一个stage的任务 stages stage 阶段1 install stage 阶段2 build stage 阶段3 release CODING CI同一个stage下，可以有多个任务 同一stage下的多个任务，并发执行 stages stage installtasks task 任务1 task 任务2 同一个stage下，仅有一个task时，可简写为 stages stage installcmds echo hello echo hi CODING CI一个任务下，可以有多个命令 cmd 同一task下的多个命令，串行执行 stages stage installtasks task 任务1cmds echo hello echo hi cmd为命令行可执行的命令 执行命令前用户需确认所需环境已准备好 一些公用的脚本见 CODING CI常用脚本 任务产出 hr CODING CI任务产出，针对单个task配置 目前支持的产出命令字有artifacts stages stage installtasks task 任务1cmds echo hello echo hi artifacts . dist .app . result report.html 产出命令字，支持指定多项产出 任务状态 hr 隐式指定 task下的所有命令都执行成功时，任务状态为成功，否则为失败 单个cmd 返回码为0时，为成功，非0为失败 显式指定 使用命令字status指定 stages stage installtasks task 任务1cmds echo hello echo hi status . status.json status详细说明见 CODING CI个性化任务结果展示 stage间数据传递 hr 使用文件传递数据 temps关键字 指定的文件会被保存，并传递给下游的stage 使用运行时自定义环境变量传递数据 使用方式见 环境变量 适用于很小的数据量传递的场景 任务超时机制 hr CODING CI通过两个策略来确定任务是否超时 策略一 执行task下的cmd时，若间隔10分钟还未输出日志，则判定当前任务执行超时 此时提示为 errorCode 1002 执行超时 若cmd日志打印间隔不超过10分钟，不会超时 可以自定义超时时间，具体方式请参考 超时时间设置 策略二 task开始执行之后，若超过24小时还未执行完毕，则判定当前任务执行超时 此时提示为 errorCode 1001 执行超时 prompt 处理时间不会算在任务的总超时时间","categorie":"持续集成-使用手册-配置文件（QCIFile）介绍-集成任务设定及阶段划分"},{"route":"/docs/ci/使用手册/配置文件/prompt.html","content":" prompt使用说明 hr prompt关键字用来暂停当前任务的执行，用于人工确认是否需要继续执行或是中止执行。 基础用法在qcifile中设置prompt关键字 prompt在stages关键字的下一级，作为一个特殊的stage，prompt关键字例子如下 stages stage buildcmds cmdsareexecutedsequtially make prompt thestagewillholduntilrecerverconfirm msg Shouldgoon detail click to hensonwang msg anothermessageto hensonwang,hughli,jerryqzhang,reeduszhang msg 表示job暂停的原因 以及用户需确认的内容等信息，会显示在prompt的人工确认界面中。 to 表示该job需要确认的处理人，多个处理人使用列表的形式，表示其中任一一个处理人都可以处理。 detail 表示显示在处理界面上的详细信息，支持markdown格式和环境变量，人工处理时可以展示更丰富的信息和交互。包含prompt关键字的job如下图所示 finally success 可以在detail关键字中填写markdown和环境变量 finally success 点击task节点，会显示prompt处理页签，处理人可以根据实际情况选择继续运行job或是中止job finally success 选择“继续”，如果还有剩余的prompt任务，还需要等待其余的prompt处理完毕，否则后面的stage将会继续执行。选择“终止”，其余的prompt任务将会置为“略过”，后面的stage将不会执行 finally除外 finally success 注意 prompt的处理人可以用 QCI PROMPT OPERATOR 环境变量来获取，多个处理人用分号分隔。处理信息可以用 QCI PROMPT MSG 环境变量来获取，多个处理信息用分号分隔。 注意 prompt下的msg to detail关键字支持使用环境变量。 注意 为了方便使用环境变量来定义不定个数的处理人，to关键字同时也支持用分号 分隔的多个人名 超时设置 prompt 默认的超时时间是24小时，可以通过 timeout 关键字来指定超时时间 注意 审批任务超时目前支持设置最长为7 24小时，超时设置较长的话，会影响工作空间，造成运行效率降低，请合理设置超时时间例子如下 yaml prompt thestagewillholduntilrecerverconfirm msg anothermessageto hensonwang,hughli,jerryqzhang,reeduszhang timeout 1440 timeout 的默认单位是 分钟 ，CODING CI允许指定时间单位来简化配置，目前支持 h 小时 ， m 分钟 ， s 秒 比如，允许处理时间为一天，可以设置成 yaml prompt thestagewillholduntilrecerverconfirm msg anothermessageto hensonwang,hughli,jerryqzhang,reeduszhang timeout 24h 自定义表单 prompt 可以设置自定义表单项，填写的表单项在后续步骤中可以通过环境变量获取。自定义表单项的格式与qcifile中环境变量的格式一致。 yaml prompt thestagewillholduntilrecerverconfirm msg anothermessageto hensonwang,hughli,jerryqzhang,reeduszhang env tapd url ,report url value desc 报告链接require true desc 为表单项的说明 require 为true表示表单项必录 env 的key会放入环境变量中，在后续的步骤中可以直接获取，在此也需要注意环境变量的注意事项。您可以点此查看 环境变量注意事项 ","categorie":"持续集成-使用手册-配置文件（QCIFile）介绍-人工确认prompt"},{"route":"/docs/ci/使用手册/配置文件/qcifile-demo.html","content":" QCIFile参考 前言以下文档重点介绍如何通过yaml文件方式配置QCI任务，您可以通过yaml中的关键字介绍，了解当前QCI的基本概念，参照demo快速组织任务，将yaml文件上传代码库或通过QCI平台导入生成任务。此外，CODING CI还支持基于UI交互的任务配置，用户可直接在QCI平台上完成任务组织和生成，详细操作指引可参考 UI配置QCI任务指引 version 2.0QCIFile是用户使用QCI持续集成系统的重要入口。该文件格式的设计需要兼顾简单易用和强扩展性，同时利于CI系统高效执行。QCIFile使用yaml格式定义，文件名可以在任务配置中指定。用户编写好qcifile.yml，并上传到用户的代码库中。qcifile.yml的一个例子的格式如下 yamlversion 2.0 qcifile版本号，请不要修改worker label mylabel usercustomenviromentvariablesenv USERNAME mynamePASSWD secret xxxxyyyzz thestringencryptedbyCODING CIpublickeyTESTREADONLY value my valuedesc testreadonlyatrributereadonly trueMYREPO QCI WORKSPACE git defineenvbyanotherenvsetup yuminstallphp pip3installrequests ci tagtriggertrigger branches include branchnameswhichwilltriggerabuild master release exclude branchnameswhichwillnot release old release bak tags include tagnameswhichwilltriggerabuild master release exclude tagnameswhichwillnot release old release bak paths include filepathswhichmustmatchtotriggerabuild src exclude filepathswhichwillnottriggerabuild release build mrtriggermr branches include targetbranchnameswhichwilltriggerabuild master release exclude targetbranchnameswhichwillnottriggerabuild release old release bak paths include filepathswhichmustmatchtotriggerabuild src exclude filepathswhichwillnottriggerabuild release .gitignoreis local mr 0 issimulatemergelocalis block mr 0 isblockmrutilpipelinesuccess definethestagesstages stage installcmds cmdsareexecutedsequtially pipinstall rrequirements.txt stage buildif QCI REPO BRANCH mastercmds makeclean makebuildartifacts artifactswillbestoredandshowinwebUI dist .apk stage testworker label PUBLIClanguage pythontasks tasksinstagewillbeexecutedinparallel task unittest requirethebranchnametobemasterif QCI REPO BRANCH mastercmds maketest unittesttemps thosefileswillwillbepassedtofollowingstages . result task qtaoutput timeout 20cmds maketest qta task lintcodeoutput timeout 20ignore truecmds codedog o. build codedog.jsonstatus . build codedog.json prompt thestagewillholduntilrecerverconfirm msg Shouldgoon detail click env TAPD value desc tapd链接 to hensonwangtimeout 1440 msg anothermessageto hensonwang,hughli,jerryqzhang,reeduszhang stage deploycmds plugin zhiyun simple submitparams product ZHIYUN PRODUCT name ZHIYUN NAME description ZHIYUN DESC tarball ZHIYUN TARBALL finally failure cmds echo CIfails email title YourCIFails tohensonwang tencent.comcache thosefileswillbecachedbetweenbuilds HOME .gradle . node modules totifyconfignotifications name 通知 QCI前端页面展示用channel EMAIL ENWECHAT 通知渠道。EMAIL ENWECHAT SMS ENWECHAT GROUP WECHATgroup QCI JOB ADMIN QCI JOB NOTIFY USER 通知组 QCI内置的管理员成员等，如 QCI JOB MEMBER QCI JOB ADMIN QCI JOB NOTIFY USER QCI TRIGGER enwechat group 企业微信群iduser andrewjiang 指定人template 通知内容模版on success change 成功发送 change或者always或者never on failure always 失败发送 change或者always或者never name 通知2 channel EMAILgroup QCI JOB ADMINenwechat group user template on success changeon failure never maxbuilds 最大执行并发数 maximum builds 3 gitrevertbeforepull 是否清理工作空间，默认清理。1 不清理，0 清理 is no revert 1 autocancel 是否自动取消排队中的任务，默认不取消。1 取消，0 不取消 is auto cancel 1 QCIFile文件格式包含下面的几块配置声明 worker 定义任务执行的机器环境 ，目前支持使用 实体机 裸机 及 docker容器 内进行任务执行 label 指定执行的实体机 裸机标签，该标签为用户在注册实体机 裸机时指定的执行机分组。 如何接入执行机 docker 指定docker的image，目前QCI已支持从任意docker镜像仓库 例如docker.io，腾讯云CCS等 拉取镜像进行任务执行。 如何指定镜像源 您可以不指定 woker 整个标签，系统将使用默认Docker镜像执行任务。 查看默认执行环境 如果将 docker 设置为空 ，在公共执行机中会在基础docker中运行，在自定义编译机中则会在实体机执行命令 worker 可以在 stage 或 task 中指定，表示指定 stage 或 task 的执行环境，详细内容可参看 编译环境的指定 ，可以通过指定 language 来指定QCI内置的编译环境，请参看 使用language指定编译环境 env 用户自定义的环境变量 。在QCI提供的 系统内置环境变量 之外，用户可事先申明环境变量，提供任务中命令使用。 secret 用QCI提供的密钥加密后的敏感数据密文。在任务执行中QCI会进行自动转换成明文。 可以通过 desc 指定环境变量的描述， readonly 指定环境变量在界面上的只读属性，更多属性可参见 环境变量的使用 setup 在每个stage前都会执行的多个操作，查看 流水线定义详细说明 trigger 配置CI和TAG触发条件，查看 触发条件 mr 配置mr触发条件，查看 触发条件 stages 定义持续集成任务内容 。 查看流水线定义详细说明 stage 集成任务的执行阶段定义，一个集成任务可以定义一到多个stage，多个stage顺序执行。所有stage执行成功，整个集成任务才执行成功。前一个stage执行失败后不再继续后续stage。 task 执行阶段里的任务定义。一个stage里可以定义多个task，多个task并行执行。stage下的所有tasks执行成功，stage才标志为成功。 如果stage里只有一个task，可以省略 tasks 字段，将task的参数直接写到stage里。 cmds 执行任务里的执行命令。在 nix下是shell命令，在windows下是dos命令。一个task可指定多行cmd，多行cmd顺序执行。cmd如果返回 0 表示成功，非 0 表示失败。所有cmd执行成功，整个task才执行成功。前一个cmd执行失败后不再继续后续cmd。所有cmd都执行成功时，task的返回成功，否则失败。在 version 2.0 中，多个cmds之间是可以继承上下文环境的。比如，你可以这样定义多个cmds yamlcmds a 1 cd. bin echo a shstart.sh if 可以在 stage 和 task 上设置，表示执行该 stage 或 task 执行的条件，具体请参看 条件执行 output time 可以在 stage 和 task 上设置，表示任务在运行过程中，多少时间没有输出会置为超时，单位为 分钟 ，信息信息请参看 超时时间 ignore 可以在 stage 和 task 上设置，表示该 stage 和 task 的执行结果不影响整个任务的结果，请参看 忽略节点的执行结果 status 除依据cmds的返回值判断任务是否成功外，QCI还支持通过 status 字段显式指定task的结果，并提供展示更丰富的任务结果信息的能力， 查看status字段说明 。status字段指向一个json文件，该文件包含下面几个字段 status 必选，可以是 success , failure , error 。 description 可选，status的描述，支持markdown格式。 url 可选，指向一个外部的url链接。 title 可选，配合url在web端展示，尽量简明。 report dir 可选，指向要上传到文件服务器的路径 report html 可选，指定report dir时，链接的首页文件 artifacts 指定集成任务产出文件或目录 如构建产出 测试报告等 ，在web界面上提供下载。如果脚本中需要获取artifacts的下载链接，可以使用如下方式拼接 http qci.oa.com rest api totalresult QCI BUILD ID artifacts FILENAME 如果需要在IDC下访问此链接，可以使用API网关，将 http qci.oa.com 域名替换为 http api.dq.oa.com qci ，并且请求 headers 需要带上 X DQAPI Authentication YOUR TOKEN, X DQAPI USERNAME YOUR NAME YOUR TOKEN可以在api网关个人管理页面获取到，API网关申请token请访问 API网关token获取 参数解释 QCI BUILD ID QCI平台环境变量，当前集成ID，shell命令中通过 QCI BUILD ID方式获取，py脚本可以通过os.getenv QCI BUILD ID ,None 的方式获取，也可以通过启动接口返回的pipeline result id字段获取 FILENAME 用户在qcifile中配置的artifacts文件，用于下载指定的单个文件，可以带上相对路径，不需要填上相对路径的第一条斜杠。如果用户的编译环境是windows环境，则在拼接下载链接的时候，需要将windows的分隔符转换为linux系统的分隔符，例如windows下上传的artifacts填写为 test myFile.apk ,则拼接文件时需要使用的链接是 http qci.oa.com rest api totalresult QCI BUILD ID artifacts test myFile.apk temps 单次集成任务的缓存。temps指定文件会被保存，并传递给下游的stage。 prompt 表示需要人工确认的节点。当执行到了prompt节点后，会通知处理人进行相应的操作，处理人可以选择继续执行还是中止任务，请参看 prompt使用说明 finally 最后执行的节点，且无论前面的节点是否成功。 finally 包含 success , failue , all 三个条件，分别表示成功 失败 或是无论如何都需要执行的命令，具体用法请参看 finally cache 指定集成任务缓存 。cache的内容会在下次持续集成的时候利用，从而达到集成任务加速效果。可以用来缓存一些比较耗时的操作，例如依赖包的下载安装 依赖库的编译产出。 查看文件缓存及任务加速说明 notifications 通知方式配置，查看 通知及其它配置 version 1.0指定qcifile中 version 2.0 ，cmds下的每个cmd命令会继承上下文环境，从而可以更简洁的进行命令行的书写。在 version 1.0 的版本中，cmds下每行执行的命令是相互隔离的，比如，每行cmd的 cd 命令或定义变量等行为只在本次命令有效。比如，在 version 1.0 版本中，cmds需要这样写 yaml cd. src composerinstall cd. src composerupdate 在 version 2.0 中，命令可以继承上下文环境，cmds可以这样写 yaml pwd a 1 当前在workspace根目录 cd. src pwd echo a 当前在workspace src目录，可以获取到变量a的值 在UI配置中，命令行的运行方式是继承上下文环境的 即version 2.0的方式 。","categorie":"持续集成-使用手册-配置文件（QCIFile）介绍-QCIFile参考"},{"route":"/docs/ci/使用手册/配置文件/qcifile-env-variables.html","content":" qcifile中环境变量的使用 hr qcifile中除了支持命令行使用环境变量外，stage task的名称，artifacts temps cache等关键字也支持使用环境变量。您可以点此查看 内置环境变量说明 环境变量注意事项 hr 在yaml语法里，布尔值用true和false表示，可以通过添加引号的方式转化为string类型或者使用两个感叹号的方法强制转化数据类型如 yamlenv value 1 true value 2 strtrue 在qcifile中，浮点数默认识别成整型，可以通过添加引号的方式转化数据类型，或者使用两个感叹号的方式强制转化数据类型如 yamlenv value 1 1.0 value 2 str1.0 环境变量的定义 hr 在qcifile中，可以使用env来定义环境变量，环境变量目前支持 string select multi select 三种类型的环境变量如 yamlenv USERNAME myname 环境变量可以定义描述信息，如 yamlenv USERNAME value mynamedesc mydescription 环境变量可以使用加密值来定义，如 yamlenv USERNAME mynamePASSWD secret xxxxyyyzz thestringencryptedbyCODING CIpublickey 环境变量可以定义只读属性，防止启动时误修改，如 yamlenv test readonly value my valuedesc 测试只读属性readonly true 环境变量支持定义单选，可以在界面启动时选择一个值启动，如 yamltest select value test1 默认值type select 类型desc 测试单选 描述信息option test1 test2 test3 test4 备选值，用英文分号分隔 环境变量支持定义多选，可以在界面启动时选择多个值启动，如 yamltest multi select value test1 test2 默认值，多个值以分号连接type multi select 类型desc test multi select 描述信息option test1 test2 test3 test4 备选值，用英文分号分隔 用环境变量来定义环境变量 hr 在qcifile关键字env中定义的环境变量是允许使用另外的环境变量来定义的如 env current user QCI TRIGGERmy repo QCI WORKSPACE gitmy code my repo code label使用环境变量 hr 当需要动态指定label时，可以将label的值设为环境变量。 worker label label 注意 label中的环境变量只支持用户在qcifile中 任务配置界面中 以及启动时添加的环境变量，不支持在运行时CODING CI动态生成的环境变量 stage和task名称中使用环境变量 hr qcifile中的stage和task名称中可以使用环境变量做为名称，例如 stages stage 编译 COMPONENT cmds echo helloCODING CI artifacts 上传文件到QCI templates stage deploytasks task deploy COMPONENT if QCI TRIGGER TYPE master cmds echo CIdeploy 启动时会替换相应的环境变量 COMPONENT 注意 名称中的环境变量只支持用户在qcifile中 任务配置界面中 以及启动时添加的环境变量，不支持在运行时CODING CI动态生成的环境变量 prompt中使用环境变量prompt关键字中的msg和to支持环境变量 prompt thestagewillholduntilrecerverconfirm msg Shouldgoon to QCI TRIGGER ,reeduszhang,willionpan,damoncheng 注意 prompt中的环境变量除了支持用户在qcifile中 任务配置界面中 以及启动时添加的环境变量外，还支持在运行时环境变量 artifacts temps cache使用环境变量请参看 文件路径配置格式 一章","categorie":"持续集成-使用手册-配置文件（QCIFile）介绍-环境变量的使用"},{"route":"/docs/ci/使用手册/配置文件/qcifile-path.html","content":" 说明 hr 本文档对QCIFile里可能会用到的artifacts cache temps status等涉及到文件路径的关键字配置的格式进行说明 配置格式 hr 路径支持两种配置方式，路径通配符和正则表达式 路径中支持环境变量，使用方式和执行平台下环境变量的使用方式一致，如 linux平台 环境变量名 示例1 A BUILD ID 示例2 A release BUILD ID windows平台 环境变量名 示例1 A BUILD ID 示例2 A release BUILD ID cache仅支持目录配置，不支持指定文件 匹配策略 hr 优先使用路径通配符方式匹配，匹配不到则使用正则匹配 匹配均 在cmd执行的根目录QCI WORKSPACE下 执行 配置示例 hr 路径通配符 A QCI WORKSPACE A目录中的所有文件 A B .apk QCI WORKSPACE A B目录中以.apk结尾的所有文件 d .apk QCI WORKSPACE目录下，文件名以d开头，以.apk结尾的文件 正则表达式 A . QCI WORKSPACE A目录下 以及其子目录下的所有文件","categorie":"持续集成-使用手册-配置文件（QCIFile）介绍-文件路径配置格式"},{"route":"/docs/ci/使用手册/配置文件/timeout.html","content":" 超时时间的设置 hr 等待输出的超时时间设置为防止运行命令卡住，CODING CI默认10分钟内task命令如果无任何输出，就会判断task运行结果为超时。用户可以在qcifile中自行定义这个超时时间。使用关键字 output timeout 来定义等待输出的超时时间，stage和task均支持设置，当设置在stage上时，表示该stage下所有的task的等待输出的超时时间均为该值。stage设置超时时间的例子 stages stage buildoutput timeout 10cmds pythontest.py task设置超时时间的例子 stages stage deploytasks task output timeout 20cmds echo CItest 注意 output timeout的单位是min 运行超时时间设置可以在qcifile中使用关键字 timeout 来定义整个任务运行的超时时间，默认为24小时格式如下 version 2.0timeout 1440env tester hensonwang jerryqzhang developer hughli stages .... timeout 的默认单位是 分钟 ，CODING CI允许指定时间单位来简化配置，目前支持 h 小时 ， m 分钟 ， s 秒 比如，允许超时时间为一天，可以设置成 timeout 24h 注意 prompt和finally阶段的耗时，不会计算在timeout设置的时间中。","categorie":"持续集成-使用手册-配置文件（QCIFile）介绍-超时时间"},{"route":"/docs/ci/使用手册/配置文件/trigger.html","content":" 触发方式使用说明 hr 可以在qcifile中配置CI TAG和MR触发方式。 CI触发 yamltrigger branches include branchnameswhichwilltriggerabuild master release exclude branchnameswhichwillnot release old release bak paths include filepathswhichmustmatchtotriggerabuild src exclude filepathswhichwillnottriggerabuild release build branches 可以配置监控的分支和排除监控的分支，支持填写通配符和正则表达式。如果没有配置，则监控所有分支。 paths 可以配置监控的路径和排除监控的路径，支持填写通配符和正则表达式。如果没有配置，则监控所有路径。 注意 如果配置了 trigger ，则使用qcifile的 trigger 中规则进行CI和TAG触发，否则采用UI配置的CI和TAG触发规则。 TAG触发 yamltrigger tags include tagnameswhichwilltriggerabuild master release exclude tagnameswhichwillnot release old release bak paths include filepathswhichmustmatchtotriggerabuild src exclude filepathswhichwillnottriggerabuild release buildis local mr 0 issimulatemergelocalis block mr 0 isblockmrutilpipelinesuccess tags 可以配置监控的tag和排除监控的tag，支持填写通配符和正则表达式。如果没有配置，则监控所有tag。 paths 可以配置监控的路径和排除监控的路径，支持填写通配符和正则表达式。如果没有配置，则监控所有路径。 is local mr 是否进行本地模拟合入，设置本地模拟合入后，将会在编译机的工作空间中进行QCI MR SOURCE BRANCH到QCI MR TARGET BRANCH的模拟合入。本次运行的结果将会是本次模拟合入后的结果。 is block mr 是否block本次合并 流水线运行结束且流水线结果为通过后自动unblock 。 注意 如果配置了 trigger ，则使用qcifile的 trigger 中规则进行CI和TAG触发，否则采用UI配置的CI和TAG触发规则。 yamltrigger 等同于 yamltrigger branches include tags include paths include MR触发 yamlmr branches include targetbranchnameswhichwilltriggerabuild master release exclude targetbranchnameswhichwillnottriggerabuild release old release bak paths include filepathswhichmustmatchtotriggerabuild src exclude filepathswhichwillnottriggerabuild release .gitignore branches 可以配置监控的目标分支和排除监控的目标分支，支持填写通配符和正则表达式。如果没有配置，则监控所有目标分支。 paths 可以配置监控的路径和排除监控的路径，支持填写通配符和正则表达式。如果没有配置，则监控所有路径。 注意 如果配置了 mr ，则使用qcifile的 mr 中规则进行MR触发，否则采用UI配置的MR触发规则。 yamlmr 等同于 yamlmr branches include paths include ","categorie":"持续集成-使用手册-配置文件（QCIFile）介绍-触发方式"},{"route":"/docs/ci/使用手册/错误码/error-codes.html","content":" CODING CI错误码释义 hr error 1001 定义 单个task执行超过 24小时 未结束时，视为 1001执行超时 解决方案 阈值 24小时 ，是CODING CI统一的策略，不支持配置 若task耗时超过此阈值，请评估task合理性 hr error 1002 定义 task执行过程中，超过 10分钟 未输出日志，视为 1002执行超时 解决方案 日志输出间隔阈值 10分钟 ，是CODING CI统一策略，不支持配置 若出现此类错误，请修改task逻辑，及时输出日志，方便从前台及时了解task进展 hr error 1012 定义 task执行过程中，日志大小超过4G 解决方案 检查任务是否有死循环 减少任务标准输出 hr error 1004 定义 CODING CI执行agent从CODING CIserver拉取task信息失败 解决方案 联系CODING CI管理员解决 hr error 1005 定义 CODING CI执行agent从COS拉取cache失败 解决方案 联系CODING CI管理员解决 hr error 1006 定义 task的cmds格式配置不正确 解决方案 修改QCIFile格式，示例 正确配置格式cmds echo hello 错误配置格式cmds echo hello hr error 1007 定义 task下的cmd执行失败 解决方案 查看执行日志，根据cmd返回码和信息修正错误 hr error 1008 定义 CODING CI执行agent上传产出文件到COS失败 解决方案 联系CODING CI管理员解决 此时task状态为异常，job中止执行 hr error 1009 定义 CODING CI执行agent上传执行日志到COS失败 解决方案 联系CODING CI管理员解决 此时在CODING CI前台查看不到task执行日志，但不会影响task状态 hr error 1010 定义 CODING CI执行agent上报task状态到CODING CIserver失败 解决方案 联系CODING CI管理员解决 hr error 1011 定义 CODING CI从COS同步temps失败 解决方案 联系CODING CI管理员解决 此时task状态为异常，job中止执行 hr error 2001 定义 同步代码失败 解决方案 首先确认代码库分支是否存在 请检查认证配置，是否有代码仓库权限 若授权方式为用户名密码，检查用户名是否正确，检查密码是否过期 联系CODING CI管理员解决 hr error 2002 定义 启动Runner失败 解决方案 请检查机器是否存在内存空间不足 磁盘空间不足 联系CODING CI管理员解决 hr error 2003 定义 中止进程失败 解决方案 请检查机器是否存在内存空间不足 磁盘空间不足 联系CODING CII管理员解决 hr error 2005 定义 获取Docker配置失败 解决方案 请检查QCIFile中关于Docker相关配置 hr error 2006 定义 登录Docker镜像仓库失败 解决方案 请检查QCIFile中关于Docker相关配置 请检查Docker鉴权信息 hr error 2007 定义 获取Docker镜像失败 解决方案 请检查QCIFile中关于Docker相关配置 请检查Docker鉴权信息，确认帐号密码是正确的 确认使用的帐号在镜像仓库上有pull权限 hr error 2008 定义 启动Docker失败 解决方案 请确认自定义镜像中有Python3环境 请检查自定义镜像中pip3命令是否正常 更错规范参考 自定义镜像 hr error 2010 定义 本地模拟合入失败 解决方案 请解决代码冲突并push修改 hr error 2013 定义 启动setup失败 解决方案 请查看执行日志，并排查出错命令 hr error 3001 定义 下发失败，当前操作无效，或者是否缺失操作所需参数 解决方案 联系CODING CIserver模块开发人员，核对传给调度模块的 action 是否正确 hr error 3002 定义 job任务下发通道断开，下发job任务到 worker 失败 解决方案 联系CODING CI调度模块平台责任人修复下发通道 hr error 3003 定义 job任务已经结束，调度模块拒绝下发 hr error 3004 定义 无可用的 worker ,job任务下发失败 解决方案 检查CODING CI集成环境 label 与QCIFile里面的 label 是否一致 hr error 3005 定义 下发超时，机器 s没有响应和正常上报信息 解决方案 联系CODING CIworker管理人员 hughli ,进行故障排查 hr error 3006 定义 下发失败，当前task所在的阶段并不是有效的状态 非执行中 ，调度模块拒绝下发 hr error 3020 定义 审批失败，当前task所属的stage不是审批stage，不能进行审批操作 hr error 3021 定义 审批失败，已经审批结束的task不允许继续审批 hr error 3022 定义 审批失败，审批的操作非法，审批操作只能选择继续 终止或者成功结束 hr error 3040 定义 运行超时，流水线整体运行超出了时间限制 解决方案 job默认超时时间24小时，可以QCIFile里面修改默认超时时间 hr error 3041 定义 运行失败，当前运行已经被中止 hr error 3042 定义 stage运行失败，job运行失败 hr error 4101 定义 使用代码库相关服务产生错误 解决方案 请确认代码库相关服务正常 请确认用户名和密码或相关认证正确 请确认使用的账户有对应服务的权限 如排除以上原因，请联系CODING CI管理员查询 hr error 4201 定义 yaml文件格式错误，导致CODING CI无法解析 解决方案 请根据提示查阅 官方文档 yaml常见问题 大小写敏感 使用缩进表示层级关系 缩进时不允许使用Tab键，只允许使用空格。 如果字符串之中包含空格或特殊字符，需要放在引号之中。 单引号和双引号都可以使用，双引号不会对特殊字符转义。 单引号之中如果还有单引号，必须连续使用两个单引号转义。 字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格。 多行字符串可以使用 保留换行符，也可以使用 折叠换行。 error 4301 定义 启动或重新启动任务时发生错误 原因 GIT的webhook数据格式错误 qcifile格式错误 数据库服务错误 解决方案 请将错误截图发给管理员定位问题 error 4900 定义 操作失败或者发生异常 原因 操作参数不合法 平台异常 执行命令异常 解决方案 根据错误提示检查相关参数，或者将错误截图发给管理员定位问题 error 4901 定义 当前角色无权限进行此操作 原因 没有给当前用户配置权限 当前用户的配置权限级别不够 解决方案 在CODING CI平台上检查配置，或者将错误截图发给管理员定位问题","categorie":"持续集成-使用手册-CODING-CI错误码释义"},{"route":"/docs/ci/使用手册/集成服务/android_build.html","content":" 支持构建类型 Android构建指引 实例demo android构建工具环境 支持构建类型CODING CIAndroid构建支持gradle ant类型的构建方式 Android构建指引 1 设置环境变量由于Android构建依赖ANDROID HOME JAVA HOME GRADLE HOME等环境变量，所以需要事先设置好环境变量。建议将设置环境变量和构建命令放在同一个脚本中 参照qci build.sh ，脚本中设置环境变量如下 shell InitenvironmentexportJDK data qci apps jdk jdk1.8.0 92exportANDROID HOME data qci apps android sdk linuxexportJAVA HOME JDKexportGRADLE HOME data qci apps gradle gradle 4.3.1exportANDROID NDK HOME data qci apps ndk android ndk r16exportPATH JDK bin GRADLE HOME bin ANDROID NDK HOME PATH CODING CI公共编译机Android构建工具参见 android构建工具环境 2 构建 Buildgradlebuild 3 安装包拷贝 Copyresultsmkdirbincpapp build outputs apk debug .apkbin crowdtest demo QCI BUILD NUMBER debug.apkcpapp build outputs apk release .apkbin crowdtest demo QCI BUILD NUMBER release.apk 4 安装包签名 证书上传与配置参见 证书管理 build.gradle签名配置如下 project.ext.set storeFile , System.env.QCI WORKSPACE System.env.QCI KEYSTORE NAME project.ext.set storePassword , System.env.QCI KEYSTORE PWD project.ext.set keyAlias , System.env.QCI KEYSTORE ALIAS project.ext.set keyPassword , System.env.QCI KEYSTORE ALIAS PWD android signingConfigs debug release storeFilefile project.storeFile storePasswordproject.storePasswordkeyAliasproject.keyAliaskeyPasswordproject.keyPassword 附录 qci file.yml完整内容 yamlversion 2.0 definethestagesstages stage 构建cmds Build sudochmod R755qci build.sh . qci build.shartifacts bin .apk stage 测试cmds echo testing... qci build.sh完整内容 shell InitenvironmentexportJDK data qci apps jdk jdk1.8.0 92exportANDROID HOME data qci apps android sdk linuxexportJAVA HOME JDKexportGRADLE HOME data qci apps gradle gradle 4.3.1exportANDROID NDK HOME data qci apps ndk android ndk r16exportPATH JDK bin GRADLE HOME bin ANDROID NDK HOME PATH Buildgradlebuild Dorg.gradle.daemon false debug stacktrace Copyresultsmkdirbincpapp build outputs apk debug .apkbin crowdtest demo QCI BUILD NUMBER debug.apkcpapp build outputs apk release .apkbin crowdtest demo QCI BUILD NUMBER release.apk 实例demo Android构建demo Android构建实例 附录 android构建工具环境 工具列表 工具 存放路径 7zip data qci apps 7zip android sdk linux data qci apps android sdk linux ant data qci apps ant bsdiff data qci apps bsdiff checkstyle data qci apps checkstyle cloc data qci apps cloc cov analysis data qci apps cov analysis git data qci apps git gradle data qci apps gradle jdk data qci apps jdk kotlin data qci apps kotlin maven data qci apps maven ndk data qci apps ndk nodejs data qci apps nodejs pmd data qci apps pmd proguard data qci apps proguard python data qci apps python sonar scanner data qci apps sonar scanner svn data qci apps svn cmake data qci apps cmake jdk版本 版本 存放路径 1.6 data qci apps jdk 1.6 1.7 data qci apps jdk 1.7 1.8 data qci apps jdk 1.8 jdk1.6.0 45 data qci apps jdk jdk1.6.0 45 jdk1.7.0 60 data qci apps jdk jdk1.7.0 60 jdk1.8.0 92 data qci apps jdk jdk1.8.0 92 gradle版本 版本 存放路径 gradle 2.2.1 data qci apps gradle gradle 2.2.1 gradle 2.3 data qci apps gradle gradle 2.3 gradle 2.4 data qci apps gradle gradle 2.4 gradle 2.5 data qci apps gradle gradle 2.5 gradle 2.6 data qci apps gradle gradle 2.6 gradle 2.7 data qci apps gradle gradle 2.7 gradle 2.8 data qci apps gradle gradle 2.8 gradle 2.9 data qci apps gradle gradle 2.9 gradle 2.10 data qci apps gradle gradle 2.10 gradle 2.11 data qci apps gradle gradle 2.11 gradle 2.12 data qci apps gradle gradle 2.12 gradle 2.13 data qci apps gradle gradle 2.13 gradle 2.14 data qci apps gradle gradle 2.14 gradle 2.14.1 data qci apps gradle gradle 2.14.1 gradle 3.0 data qci apps gradle gradle 3.0 gradle 3.1 data qci apps gradle gradle 3.1 gradle 3.2 data qci apps gradle gradle 3.2 gradle 3.2.1 data qci apps gradle gradle 3.2.1 gradle 3.3 data qci apps gradle gradle 3.3 gradle 3.4 data qci apps gradle gradle 3.4 gradle 3.4.1 data qci apps gradle gradle 3.4.1 gradle 3.5 data qci apps gradle gradle 3.5 gradle 4.0 data qci apps gradle gradle 4.0 gradle 4.1 data qci apps gradle gradle 4.1 gradle 4.2 data qci apps gradle gradle 4.2 gradle 4.2.1 data qci apps gradle gradle 4.2.1 gradle 4.3 data qci apps gradle gradle 4.3 gradle 4.3.1 data qci apps gradle gradle 4.3.1 gradle 4.4.1 data qci apps gradle gradle 4.4.1 gradle 4.5.1 data qci apps gradle gradle 4.5.1 gradle 4.6 data qci apps gradle gradle 4.6 gradle 4.7 data qci apps gradle gradle 4.7 gradle 4.8 data qci apps gradle gradle 4.8 gradle 4.8.1 data qci apps gradle gradle 4.8.1 gradle 4.9 data qci apps gradle gradle 4.9 gradle 4.10 data qci apps gradle gradle 4.10 gradle 4.10.1 data qci apps gradle gradle 4.10.1 gradle 4.10.2 data qci apps gradle gradle 4.10.2 gradle 4.10.3 data qci apps gradle gradle 4.10.3 gradle 5.0 data qci apps gradle gradle 5.0 gradle 5.1 data qci apps gradle gradle 5.1 gradle 5.1.1 data qci apps gradle gradle 5.1.1 gradle 5.2 data qci apps gradle gradle 5.2 gradle 5.2.1 data qci apps gradle gradle 5.2.1 ant版本 版本 存放路径 apache ant 1.9.3 data qci apps ant apache ant 1.9.3 androidsdkbuild tools版本 版本 存放路径 17.0.0 data qci apps android sdk linux build tools 17.0.0 18.0.1 data qci apps android sdk linux build tools 18.0.1 18.1.0 data qci apps android sdk linux build tools 18.1.0 18.1.1 data qci apps android sdk linux build tools 18.1.1 19.0.0 data qci apps android sdk linux build tools 19.0.0 19.0.1 data qci apps android sdk linux build tools 19.0.1 19.0.2 data qci apps android sdk linux build tools 19.0.2 19.0.3 data qci apps android sdk linux build tools 19.0.3 19.1.0 data qci apps android sdk linux build tools 19.1.0 20.0.0 data qci apps android sdk linux build tools 20.0.0 21.0.0 data qci apps android sdk linux build tools 21.0.0 21.0.1 data qci apps android sdk linux build tools 21.0.1 21.0.2 data qci apps android sdk linux build tools 21.0.2 21.1.0 data qci apps android sdk linux build tools 21.1.0 21.1.1 data qci apps android sdk linux build tools 21.1.1 21.1.2 data qci apps android sdk linux build tools 21.1.2 22.0.0 data qci apps android sdk linux build tools 22.0.0 22.0.1 data qci apps android sdk linux build tools 22.0.1 23.0.0 data qci apps android sdk linux build tools 23.0.0 23.0.1 data qci apps android sdk linux build tools 23.0.1 23.0.2 data qci apps android sdk linux build tools 23.0.2 23.0.3 data qci apps android sdk linux build tools 23.0.3 24.0.0 data qci apps android sdk linux build tools 24.0.0 24.0.1 data qci apps android sdk linux build tools 24.0.1 24.0.2 data qci apps android sdk linux build tools 24.0.2 24.0.3 data qci apps android sdk linux build tools 24.0.3 25.0.0 data qci apps android sdk linux build tools 25.0.0 25.0.1 data qci apps android sdk linux build tools 25.0.1 25.0.2 data qci apps android sdk linux build tools 25.0.2 25.0.3 data qci apps android sdk linux build tools 25.0.3 26.0.0 data qci apps android sdk linux build tools 26.0.0 26.0.1 data qci apps android sdk linux build tools 26.0.1 26.0.2 data qci apps android sdk linux build tools 26.0.2 26.0.3 data qci apps android sdk linux build tools 26.0.3 27.0.0 data qci apps android sdk linux build tools 27.0.0 27.0.1 data qci apps android sdk linux build tools 27.0.1 27.0.2 data qci apps android sdk linux build tools 27.0.2 27.0.3 data qci apps android sdk linux build tools 27.0.3 28.0.0 data qci apps android sdk linux build tools 28.0.0 28.0.1 data qci apps android sdk linux build tools 28.0.1 28.0.2 data qci apps android sdk linux build tools 28.0.2 28.0.3 data qci apps android sdk linux build tools 28.0.3 androidsdkplatforms版本 版本 存放路径 android 2 data qci apps android sdk linux platforms android 2 android 3 data qci apps android sdk linux platforms android 3 android 4 data qci apps android sdk linux platforms android 4 android 5 data qci apps android sdk linux platforms android 5 android 6 data qci apps android sdk linux platforms android 6 android 7 data qci apps android sdk linux platforms android 7 android 8 data qci apps android sdk linux platforms android 8 android 9 data qci apps android sdk linux platforms android 9 android 10 data qci apps android sdk linux platforms android 10 android 11 data qci apps android sdk linux platforms android 11 android 12 data qci apps android sdk linux platforms android 12 android 13 data qci apps android sdk linux platforms android 13 android 14 data qci apps android sdk linux platforms android 14 android 15 data qci apps android sdk linux platforms android 15 android 16 data qci apps android sdk linux platforms android 16 android 17 data qci apps android sdk linux platforms android 17 android 18 data qci apps android sdk linux platforms android 18 android 19 data qci apps android sdk linux platforms android 19 android 20 data qci apps android sdk linux platforms android 20 android 21 data qci apps android sdk linux platforms android 21 android 22 data qci apps android sdk linux platforms android 22 android 23 data qci apps android sdk linux platforms android 23 android 24 data qci apps android sdk linux platforms android 24 android 25 data qci apps android sdk linux platforms android 25 android 26 data qci apps android sdk linux platforms android 26 android 27 data qci apps android sdk linux platforms android 27 android 28 data qci apps android sdk linux platforms android 28 ndk版本 版本 存放路径 android ndk r6b data qci apps ndk android ndk r6b android ndk r8 data qci apps ndk android ndk r8 android ndk r8e data qci apps ndk android ndk r8e android ndk r9d data qci apps ndk android ndk r9d android ndk r10d data qci apps ndk android ndk r10d android ndk r10e data qci apps ndk android ndk r10e android ndk r11c data qci apps ndk android ndk r11c android ndk r12 data qci apps ndk android ndk r12 android ndk r12b data qci apps ndk android ndk r12b android ndk r13b data qci apps ndk android ndk r13b android ndk r14b data qci apps ndk android ndk r14b android ndk r15c data qci apps ndk android ndk r15c android ndk r16 data qci apps ndk android ndk r16 android ndk r16b data qci apps ndk android ndk r16b android ndk r17c data qci apps ndk android ndk r17c proguard版本 版本 存放路径 facebook proguard data qci apps proguard facebook proguard proguard4.5.1 data qci apps proguard proguard4.5.1 proguard4.8 data qci apps proguard proguard4.8 proguard4.9 data qci apps proguard proguard4.9 proguard4.11 data qci apps proguard proguard4.11 proguard5.2.1 data qci apps proguard proguard5.2.1 proguardfacebook data qci apps proguard proguardfacebook kotlin版本 版本 存放路径 kotlin compiler 1.1.2 2 data qci apps kotlin kotlin compiler 1.1.2 2 maven版本 版本 存放路径 apache maven 3.2.1 data qci apps maven apache maven 3.2.1 sonar版本 版本 存放路径 sonar scanner 3.0.3.778 linux data qci apps sonar scanner sonar scanner 3.0.3.778 linux 7zip版本 版本 存放路径 9.20.1 data qci apps 7zip 9.20.1 p7zip 9.20.1 data qci apps 7zip p7zip 9.20.1 pmd版本 版本 存放路径 pmd bin 5.7.0 data qci apps pmd pmd bin 5.7.0 cmake版本 版本 存放路径 cmake 2.8.12.2 Linux i386 data qci apps cmake cmake 2.8.12.2 Linux i386 cmake 3.10.2 Linux x86 64 data qci apps cmake cmake 3.10.2 Linux x86 64 cmake 3.12.4 Linux x86 64 data qci apps cmake cmake 3.12.4 Linux x86 64 cmake 3.5.2 Linux x86 64 data qci apps cmake cmake 3.5.2 Linux x86 64 cmake 3.6.1 Linux x86 64 data qci apps cmake cmake 3.6.1 Linux x86 64 ","categorie":"持续集成-使用手册-CODING-CI能力集成-Android构建"},{"route":"/docs/ci/使用手册/集成服务/builtin_plugins.html","content":" CODING CI能力集成 CODING CI能力扩展思路CODING CI常用能力以python脚本的形式封装，任何用户均可以直接在各自QCIFile里导入并执行对应脚本，达到关联平台工具串联的效果。通过脚本扩展，关联服务不再受CODING CI系统的架构的制约，也不会因为QCI项目人力紧缺导致QCI服务能力实现进度缓慢。任何用户均可根据自身需要，在QCIFile中组合或自行组织对应的脚本内容，完成千变万化的集成任务定制。CODING CI目前已内置以下常用服务能力，脚本均保存在 git公开项目 中，欢迎大家浏览查阅，并期待大家积极贡献，将认为有价值的共性服务抽象，以PullReqeust形式提交至该项目 查看CODING CI脚本接入规范 hr 编译构建 Android构建 iOS构建 iOS企业证书重签 启动RDM构建 distcc ccache加速 bugly符号表上传 安装证书 测试工具 QTA自动化测试 CodeDog代码扫描 IPT安装包检测 单元测试 SDK自动化测试 隐私扫描工具 开源检测工具 安全工具 金刚安全扫描 乐固APK加固 发布工具 创建ARS单 远程文件传输 远程命令执行 织云归档 发布 TKE镜像更新发布 AK离线包 TAF发布 MIGCDN发布 星云 创建变更审批单 星云 查询变更审批单 星云 关闭变更审批单 星云 创建一键发布单 工蜂GIT工具 合并请求 获取合并请求详情 获取合并请求review状态 合并合并请求 获取合并请求列表 获取repo下的分支列表 获取group下的repo列表 提交检测状态 创建TAG 创建Release 上传Release文件 其他工具 终端构建产物外网体验 发起电子流 TFS文件备份 GitTag差异信息获取 差异文件获取 消息推送 支持企业微信 短信 微信等 ","categorie":"持续集成-使用手册-CODING-CI能力集成"},{"route":"/docs/ci/使用手册/集成服务/create_plugin.html","content":" 常用工具接入CODING CI规范 常用工具使用文档规范 示例demo 常用工具接入CODING CI规范 1 名词释义 常用工具 CI过程中，不同业务均可能会使用到的工具，例如QTA自动化测试工具 2 接入方式 原则 工具方提供的工具能力，均可通过命令行命令执行 tips 工具各项能力，可通过命令行执行命令的方式触发 每个命令入参规范 业务相关的参数由命令行命令参数传入 在需多个命令组合才能实现功能的场景，执行唯一标识 如run id 由工具提供的能力自行处理 CODING CI提供了 内置环境变量 ，可在工具脚本中直接使用 每个命令返回值规范 RC 0 成功 RC 非0 失败。失败时的返回码建议细分，便于问题排查定位 注 可通过async轮询的命令 RC 0,命令成功，结束轮询RC 0,继续轮询RC 0,命令异常，结束轮询 工具产出 需存为文件，通过artifacts 或其他CODING CI支持的产出文件关键字 配置落地到CODING CI 工具执行日志日志信息输出到控制台，用户可在前台查看任务执行日志 环境依赖若能通过命令安装，需在使用文档中详细描述需安装的命令，用户使用时在QCIFile里写cmds即可若不能通过命令安装，需在使用文档中详细说明安装方法 工具安全工具接口或者脚本内需保证安全 3 工具管理 若工具能力通过脚本 可执行文件的方式提供，脚本 可执行文件由工具负责人新增 更新到CODING CI常用工具管理库 查看QCI工具管理 每个工具需独立一个目录管理 工具目录下，需包含工具脚本 模块 使用文档.html demo等 若demo不是很复杂，可以直接写到使用文档里 4 需提供工具使用文档 工具负责人需提供详细使用文档 使用文档规范见下文 常用工具使用文档规范使用文档 使用markdown语言 撰写，需包含如下内容 1 工具介绍简要说明工具功能 2 工具适用场景 详细描述工具适用场景 说明工具调用频率限制 说明工具并发限制 3 工具使用方式用户获取工具脚本，有两种方式 在QCIFile里写gitclone命令，执行时由QCI将工具脚本拉取到执行机 直接下载工具脚本上传到自己的代码库使用文档需 说明工具支持的命令 说明各命令使用方式 描述各命令参数 参数名 用途 格式要求 是否必填 对工具各项能力给出使用demo 4 工具返回码定义 详细说明工具各命令返回码，方便问题排查定位 5 工具使用权限 若工具使用有权限控制 IP 用户等 ，需详细描述申请方式 6 工具负责人 工具负责人 示例demo QCIFile使用常用工具demodemo1 通过脚本执行工具 task task namecmds tool example.pyparam1param2artifacts bin .json demo2 直接通过http请求执行工具 task task namecmds curl d user admin passwd 12345678 http 127.0.0.1 8080 startartifacts bin .json ","categorie":"持续集成-使用手册-CODING-CI能力集成-工具接入规范"},{"route":"/docs/ci/使用手册/集成服务/docker_plugins.html","content":" 镜像插件 hr 说明 镜像插件 ，是Drone平台使用插件的方式。通过把代码逻辑打包为Docker镜像，允许用户使用任何编程语言 在各种场景下定制化自己的插件。 http plugins.drone.io 是Drone已经存在的插件，在 http plugins.oa.com 也收集了一些公司内外常用插件。CODING CI现已兼容Drone的镜像插件，可以直接将已有的插件在CODING CI中无缝接入使用。 使用示例在 cmds 下增加 plugin image 标识任务为镜像插件，并在 params 中填写插件参数。比如针对 http下载插件 ，使用Demo如下 yamlversion 2.0stages stage dockerplugintasks task dockerplugindemocmds plugin imageparams name downloadimage plugins downloadsettings source https qd.myapp.com myapp qqteam pcqq PCQQ2019.exe ","categorie":"持续集成-使用手册-CODING-CI能力集成-镜像插件使用"},{"route":"/docs/ci/使用手册/集成服务/ios_build.html","content":" iOS构建简介 构建指引 实例demo iOS构建简介 CODING CI平台提供公共MAC编译机器资源，减轻业务管理编译机器成本 支持发布证书 企业证书签名 构建指引 证书上传与配置参见 证书管理 使用示例qci build.yml文件内容 yamlversion 2.0worker label QCI MAC PUBLIC definethestagesstages stage 构建cmds Build chmod R755qci build.sh . qci build.shartifacts result .ipa stage 测试cmds echo testing... 其中label指定为QCI MAC PUBLIC表示选择的是公共编译机器qci build.sh脚本内容 BUILD FOLDER Build Products CONFIGURATION iphoneos CONFIGURATION Releaserm rf. resultmkdirresultif d BUILD FOLDER thenrm r BUILD FOLDERfixcodebuild schemezbtestSDKTest configuration CONFIGURATION derivedDataPath QCI WORKSPACEif 0 thenexit1ficd BUILD FOLDERrm rfPayloadmkdirPayloadcp rzbtest.appPayloadzip rq QCI WORKSPACE result crowdtest sdk demo QCI BUILD NUMBER CONFIGURATION .ipaPayload qci build.sh使用说明 环境变量CONFIGURATION可以在QCI页面设置为Release Debug等 编译前先删除BUILD FOLDER目录下面的文件 使用xcodebuild scheme进行编译 编译完使用zip打包成ipa文件 iOS构建安装包重签名，参见 iOS安装包重签名 实例demo iOS构建demo iOS构建实例 hr ","categorie":"持续集成-使用手册-CODING-CI能力集成-iOS构建"},{"route":"/docs/ci/使用手册/项目/project.html","content":" 项目管理为了更好的管理资源，以及更方便的共享团队内的资源，CODING CI支持 项目 管理功能。 访问项目在CODING CI导航条记录了用户最新访问的项目列表，在这里可以自由切换要访问的项目。如果是第一次访问，可以选择 查看更多项目 来查看所有自己有权限的项目列表。当提示无权限访问项目时，可以按照界面指引向管理员申请项目权限。 新增项目用户可以访问 项目管理 来新增或编辑项目，界面如下 project 1 选择 添加项目 来进行新项目的接入 项目权限 管理员 编辑项目的基本信息 可以授权给其他用户访问项目的权限 可以访问项目下的任务 认证 机器 证书等信息 成员 可以访问项目下的任务 认证 机器 证书等信息当用户无权限访问一个项目时，请联系对应的管理员来添加访问项目的权限加入项目后，项目下的任务均可以查看 启动，机器 认证 证书等均可以选择，但只有任务 机器 认证 证书的管理员可以编辑和保存对应的配置信息。 项目迁移CODING CI中，任务 机器 认证 证书等信息都归属在项目下，项目之间是互相隔离的，在一个项目下无法查看另一个项目的数据。 没有归属的任务 机器 认证 证书对于以前创建的没有归属的任务 机器 认证 证书，可以通过界面上的 项目迁移 来进行项目归属如下图所示 project 3 project 4 已经归属的任务 机器 认证 证书对于已经归属的任务 机器 认证 证书，也可以通过 项目迁移 来改变数据的项目归属，但可能导致已关联这些数据的任务运行失败，请在迁移前确认是否没有其他任务关联了这些机器 认证 证书的数据。","categorie":"持续集成-使用手册-项目-项目管理"},{"route":"/docs/code-analysis/codemetric/cc/cc_config.html","content":" 圈复杂度扫描设置希望在一个扫描方案中开启圈复杂度扫描，需要进入扫描方案，代码度量中启用圈复杂度检测。参考 扫描方案 代码度量 圈复杂度 基础设置检测阈值表示当一个方法的圈复杂度超过该值，则表示是超标方法，会将这个方法作为问题上报。根据业界规范这个值默认为20，即当一个函数的圈复杂度大于20 不包含20 时认为超标。 圈复杂度设置 ","categorie":"代码分析-代码度量-扫描设置"},{"route":"/docs/code-analysis/codemetric/cc/cc_result.html","content":" 圈复杂度结果查看 结果查看支持按 方法纬度 的问题列表展示和按 文件纬度 展示的文件列表两种方式查看问题。 方法纬度展示 即展示每一个发现圈复杂度超过检测标准的函数。 NOTE style flat 注意方法纬度每次都展示全量问题，不支持展示增量的问题方法。 方法列表 方法纬度的列表可以通过点击列表中的函数名称查看该函数的具体代码和详细信息，包括具体的圈复杂度信息 缺陷位置 最近修改人。 文件纬度展示 会将超标方法按照文件纬度聚合，并提供单个文件的基本统计数据。指标包括 超标方法圈复杂度总和，超标方法平均圈复杂度以及超标方法个数。 支持增量展示 ，这里的增量指codedog最近一次圈复杂度成功扫描结果和上一次圈复杂度成功扫描结果的对比。列表中会告知这个文件中的方法是否有变更。 文件列表 文件纬度的列表支持展示文件内方法变更情况，包括无变化，新增 修改 删除4种情况。会按文件展示超标方法圈复杂度的总和 超标方法平均圈复杂度 超标方法个数。例如一个文件中有3个方法的圈复杂度超过设置的标准20，那么超标方法个数为3，如果这三个方法的复杂度为22，24，26。则超标方法圈复杂度总和为22 24 26 72。超标方法平均圈复杂度为超标方法圈复杂度总和整除超标方法个数，即为24。 NOTE style flat 如果希望仅查看最近两次成功扫描版本的差异问题，则可以勾选仅查看增量问题。 仅查看增量问题 ","categorie":"代码分析-代码度量-结果查看"},{"route":"/docs/code-analysis/codemetric/clocs/clocs.html","content":" 代码统计开启后即可扫描获得相关结果，结果包括全量和增量的代码统计结果。增量表示最近一次成功扫描版本和上次成功扫描版本之间的差异内容。","categorie":"代码分析-代码统计"},{"route":"/docs/code-analysis/codemetric/duplicate/duplicate.html","content":" 重复代码","categorie":"代码分析-重复代码"},{"route":"/docs/code-analysis/repomanage/scanschedule/base.html","content":" 基础属性配置 方案名称 用于标示一个方案，每个方案名称都是唯一的。该名称也用于在本地客户端扫描或者CI系统中指定用某个扫描方案扫描。 扫描语言 用于指明该方案是针对代码库何种语言进行扫描 运行环境 如果项目没有特殊的编译需求则可以选择Codedog Linux，如果是Objective C项目请选择Codedog Mac。 NOTE style flat 如果希望使用业务专用机器，则需要先添加机器，参考 专机操作指引 扫描超时时间 指定扫描的超时时间，当扫描总耗时长于设置的时间时，会自动结束扫描。","categorie":"代码分析-代码库管理-扫描方案-基础属性配置"},{"route":"/docs/code-analysis/repomanage/scanschedule/codelint.html","content":" 代码检查配置CodeDog采用业界 自研的80 款工具，配置代码检查项能够有效地发现代码中存在的异味代码 基础配置用于开启代码检查功能，并且支持给编译类的工具或编译型项目配置相关命令。 注 以下字段，仅用到编译型工具或编译型项目时需要注意 前置命令 通常是项目编译前需要执行的命令。如无需要，可以不填。 编译命令 项目的编译命令，具体可以 咨询该代码库所属项目的开发 环境变量 编译工具或编译过程中需要的环境变量 NOTE style flat 对Python的扫描默认采用Python3，如果需要扫描Python2请在环境变量中设置 PYTHON VERSION 2 相关示例说明 JAVA项目 编译命令配置 android studio项目编译命令示例 BASHgradlecompileDebugSources no daemon Dorg.gradle.jvmargs ant项目编译命令示例 BASHantbuild 环境变量配置 Java项目 已接入RDM 1.打开项目目录下的RDM编译脚本，如build.sh，buildRDM.sh等，找到脚本中的环境变量语句 BASHexportANDROID HOME ANDROID SDKexportJAVA HOME JDK8exportGRADLE HOME data rdm apps gradle gradle 4.6exportPATH JDK8 bin GRADLE HOME bin PATH 2.将环境变量的设置字符串去掉export后填入环境变量文本框中 BASHANDROID HOME ANDROID SDKJAVA HOME JDK8GRADLE HOME data rdm apps gradle gradle 4.6PATH JDK8 bin GRADLE HOME bin PATH 附 RDM具体包含的环境变量 以供参考如仍有疑问，请联系 yelachen Object C项目 编译命令 xcodebuild命令 确保先在本地工程根目录调试通过 BASHxcodebuild targetdailybuildipa configurationDailyBuild sdkiphonesimulator 环境变量 BASHXCODE VERISON 10.1 如仍有疑问，请联系 bensonqin ，或 查看链接 C C 项目 编译命令 VS项目编译命令示例 BASHdevenv.comdemo.sln Build Debug Win32 或msbuilddemo.sln t Build p Configuration Debug make项目编译命令示例 BASHmakeall 如仍有疑问，请联系 yalechen C 项目 编译命令 VS项目编译命令示例 BASHdevenv.comdemo.sln Build Debug Win32 或msbuilddemo.sln t Build p Configuration Debug 如仍有疑问，请联系 yalechen 规则配置规则配置是代码检查应用的规则集合，用于指定用哪些工具和规则进行代码分析扫描。目前，CodeDog提供了覆盖 腾讯代码规范 安全扫描 开源检查 等方面的官方推荐规则包。 官方推荐规则包 是CodeDog长期以来在业务中实践的经验结果，将相关的有效性高的工具和规则打包在一起。业务可以根据需要选择官方推荐规则包。也可以在自定义规则包中添加希望的工具和规则。 NOTE style flat 规则配置 自定义规则包 官方规则包 自定义规则包中的规则配置会默认覆盖其他官方包中相同规则的配置 推荐规则包 ","categorie":"代码分析-代码库管理-扫描方案-代码检查配置"},{"route":"/docs/code-analysis/repomanage/scanschedule/codemetric.html","content":" 代码度量配置 圈复杂度可以发现执行路径较多的方法，降低代码的圈复杂度，可测性更高 检测阈值 默认为20，表示当一个方法的圈复杂度超过20时则认为该方法为超标方法，需要被关注修改。可以根据需要调整 质量红线设置标准 该选项适用于类似手Q这样的存在时间较长导致无法短期内处理全部的超标方法，希望先保证新增代码不会增加圈复杂度问题的情况。该项设置是令该扫描方案的所有分支项目，以该阈值作为标准进行提单参考和日常对比，请谨慎操作。 WARNING style flat 1.仅能配置一次，无法修改，请慎重操作。 2.以该分支项目最新的圈复杂度扫描结果为标准，即便后续该分支项目的圈复杂度结果变更也不会影响阈值结果 那次计算时已得出 重复代码可以发现重复的代码，避免重复代码可以让代码更简洁，更易维护 长度区间 是一个区间值，默认代码中一个单词 变量 操作符 长度为1。 重复次数 是一个区间值，当一段代码重复次数达到指定区间才认为是有风险的。 上报限制 限制上报的重复代码块数，可以减少开发的压力，提高修复积极性。 风险定义 分支概览页面中会根据这个风险定义展示不同风险的占比，重复率 重复代码行数 总代码行数。系统默认中风险为5 11 的重复率，高风险为11 20 的重复率，极高风险为20 以上重复率。用户可根据项目实际需求自行定义。 代码统计从目录和业务纬度统计代码行数，也可以获取提交记录便于代码Review","categorie":"代码分析-代码库管理-扫描方案-代码度量配置"},{"route":"/docs/code-analysis/repomanage/scanschedule/filter.html","content":" 扫描方案过滤配置 路径过滤用于设定代码分析的范围，设定后，已经开启的代码检查 代码度量各项功能都会在指定的代码范围内生效。路径添加规则参考Pythonfnmatch语法。类似正则。 Exclude 设置优先级高于 Include 设置。 BASHInclude表示只扫描，如只扫描src 目录 src Exclude表示只屏蔽，如要屏蔽src lib 目录 src lib 如果几个扫描方案希望共享相同的路径过滤方案，可以通过导入导出路径配置的方式进行处理。 NOTE style flat 配置更改后，下次启动扫描生效 问题过滤多用于合流场景，例如，一条从主干拉出来的分支，希望仅关注分支上的问题，而不关注主干上的旧问题和rebase产生的问题，则可以通过设置 对比分支 并开启 过滤其他分支合入问题 开关。 问题过滤 ","categorie":"代码分析-代码库管理-扫描方案-过滤配置配置"},{"route":"/docs/code-analysis/repomanage/scanschedule/readme.html","content":" 扫描方案 定义 一种扫描配置的集合，不同的分支可以采用不同的扫描方案进行CodeDog代码分析。包含 基础属性配置 代码检查配置 代码度量配置 过滤配置 TAPD配置 关联分支列表 仅用于查看该扫描方案有多少分支与其关联构成分支项目 。关联代码库到CodeDog并开启第一次代码分析时，会创建一个简单的默认扫描方案，用户可根据需要调整该方案。 创建扫描方案 创建扫描方案 ","categorie":"代码分析-代码库管理-扫描方案"},{"route":"/docs/management/api/import/apidoc.html","content":" title apiDoc导入指南 CODING帮助中心pageTitle apiDoc导入指南pagePrevTitle Postman导入指南pagePrev management api postman.htmlpageNextTitle OpenAPI导入指南pageNext management api openapi.html apiDoc 是一款通过注释或注解生成API文档的工具，支持Java PHP JS等多种语言，生成方便，但文档体验较差。您可通过将生成文档中间文件 api data.json 导入至 CODINGAPI文档 ，生成精美的API文档。 获得apiDocAPI数据文件 如图所示为 apiDoc示例文档 ，通过apiDoc生成的API文档同理。 将地址栏中地址最后加上 api data.json ，即 http apidocjs.com example api data.json 即为API数据文件地址。 通过URL导入如图所示，在 发布新版本 页或者 录入API数据页 ，选择 导入数据 下的 从URL导入 ，粘贴刚才复制的API数据文件地址，最后选择 完成并发布 实现文档发布。 通过上传文件导入在网页上右键点击弹出菜单，选择 存储为 将API数据文件保存至本地。 在 发布新版本 页或者 录入API数据页 ，选择 导入数据 下的 从文件导入 ，导入刚才存到本地的 api data.json 文件，最后选择 完成并发布 实现文档发布。 ","categorie":"文档管理-API 文档管理-导入指南-apiDoc 导入指南"},{"route":"/docs/management/api/import/openapi.html","content":" title OpenAPI Swagger编写与导入指南 CODING帮助中心pageTitle OpenAPI Swagger编写与导入指南pagePrevTitle 接入自动化工具pagePrev management api automation.htmlpageNextTitle Postman导入指南pageNext management api postman.html OpenAPI Swagger相较于其他规范完善程度更高，生态更加完整，是目前CODING推荐的API设计语言。 什么是OpenAPI Swagger OpenAPI 规范 OAS 是一种通用的 和编程语言无关的API描述规范，使人类和计算机都可以发现和理解服务的功能，而无需访问源代码 文档或针对接口进行嗅探。正确定义后，使用者可以使用最少的实现逻辑来理解远程服务并与之交互。OpenAPI始于Swagger规范，Swagger规范已于 2015年捐赠给Linux基金会后改名为OpenAPI ，并定义最新的规范为OpenAPI3.0。CODING目前支持以下版本导入 OpenAPIv3 OAS3 Swaggerv2 最佳实践通常，设计API规范有两个方向，Design First 设计优先 或Code First 编码优先 1.Design First 设计优先 即优先设计API规范，设计完成后再着手进行代码开发工作。采用Design First就意味着，将设计API路由 参数等工作提前，后续整个软件开发的流程都需要围绕着API规范为核心，当然这需要有一定的设计经验的开发人员才能胜任。Design First有很多好处 提高开发效率。开发团队将根据API规范进行并行开发和对接工作，而无需等待接口逻辑开发完毕。 降低接口开发的成本，无需修改代码逻辑即可轻松地修改API规范，因为API描述语言 如 OpenAPI 与编码语言无关 开发人员更加专注于设计API规范，对比Code First可以描写更多API的细节，如 校验规则 范例数据等，同时开发人员对API的全局一致性 扩展性 规范性也有更好的把控。 在联调开发的过程中可以提前发现和解决问题，避免问题在开发完毕后修改的成本过高。 由于API描述更加标准化，可以方便做更多的API生态延伸，比如基于API规范生成MockAPIServer，开发API自动化测试代码，接入API网关等。更多可参考 https swagger.io blog api design design first or code first api development2.Code First 编码优先 即通过代码中关于API描述特性 注解或注释自动生成API描述文件的设计方式，如 JAVA生态的SpringFox。适合倾向于在代码上编写API规范，通过自动化设施自动生成文档的团队。Code First的优点 节省时间。对于API开发者，编码的同时可以获得一份满足基本要求的API文档。 方便接入自动化CI CD流程中。虽然Code First省去了开发者设计API描述文件的阶段，提高了API开发者的效率，但是从整个团队的角度来看，效率并不一定提升了，反而有可能降低了效率。不同API开发者的经验和习惯的不同，极有可能在编码的过程中对API的限制条件考虑不全，又或者框架生成API文档的程序完善度不够，种种因素导致最终生成的API的描述无法达到理想标准。而很多API开发者习惯开发完成后才推送代码，并生成API文档，也导致了团队的进程阻塞于此，拖后了整个团队的开发进程。另一方面，API在开发完成如果没有测试，很有可能导致API对接者在对接的过程中遇到重重阻碍。CODING也希望各位开发者重视API设计的重要性，如果您喜欢Code First设计方向，我们的建议是 选用完善程度比较高的生成组件 对API的描述尽可能的细致 完整 优先设计路由 请求 响应等规则，详细的逻辑代码在API设计完成后再着手开发。Design First和Code First针对不同的场景有着各自的优势，不同团队对两者考虑的方向也不同，但是对API描述的完善不管是哪个方向都是最重要的。下面我们将针对Design First和Code First两个方向的最佳实践作展开。 Design FirstOpenAPI进化到v3版本后，虽然规范非常完善，但对于首次上手的同学来说还是非常复杂，那么带有界面的编辑工具会成为最佳选择。这里我们推荐使用 OpenAPI GUIv3 来设计API描述文件，如下图所示。 OpenAPI GUIv3基本使用OpenAPI GUIv3支持设计大多数常见情况的API规则，并且支持本地部署，非常适合新手，下面我们简单介绍一下OpenAPI GUIv3的基本使用方式。 OpenAPI GUIv3的导航结构如上图所示。首先，我们切换到 Header ，给API文档定义标题 描述 作者等基础信息。 接着，我们切换至 Servers 配置API各环境基础路径地址。 如果您的API需要经过鉴权 OAuth APIKey等 ，您可以切换到 Security 配置响应的鉴权信息，如下图所示。 下面将开始设计API分组，点击切换到 Tags ，对应的之后设计的接口可与分组相关联，并在文档中展示时，合并到对应分组栏目中。 Main 为最主要的API设计界面，需要了解的是，CODINGAPI文档以tag分组，而该界面以路由 请求方法 Method 分组。 DescriptionTAB用于填写接口的标题 描述和关联tag信息，建议全部填写，若未填Summary，API文档将显示APIID OperationID ，未关联tag将归属于默认分组。 Parameter用于定义请求Query Header Cookie和路由参数规则，Location可指定参数位置。 而在非GET请求方式 Method 方式下，如POST PATCH PUT等，RequestBody则用于定义请求Body的规则，如Form表单参数 纯JSON方式提交参数定义等。 对应的RequestBody必须定义Media Type，可定义多个Media Type，API服务器将根据该参数识别Body内容结构，如上图所示 application json 即为纯JSON方式提交表单参数。您可以复用实体，下面会讲到，或者直接编辑请求结构，点击后弹出如下图所示，可直接编辑。 需要注意的是，该弹窗弹出位置可能会在显示页面下方，需要滚动到下方才可看到。切换到ResponseTAB，我们可以定义接口响应返回的结构。在这个界面可以增加多条响应结构，如200 400 401多个状态码有多重不同响应返回结构，或者同状态码下不同Media Type不同返回结构。点击编辑结构和RequestBody类似，可定义响应数据结构规则。 切换到SecurityTAB，可以配置接口的鉴权配置，由于编辑器未完善，您可在设计完成后通过导出OpenAPI描述文件，以源文件的形式修改scope范围 可参考下方进阶教程 。 由于Docs Links Callbacks在日常使用时不常用到，CODINGAPI文档暂不作展示。在设计完毕后，您可点击右上角Save按钮保存修改，并点击 ExportJSON 或者 ExportYAML 复制或者下载OpenAPI描述文件。 接着，在CODINGAPI文档导入并发布。 等待发布完毕后，点击详情页的文档地址，查看最终效果。 已有OpenAPI描述文件如果您已有OpenAPI描述文件，或者您想先看一下效果，那么您可以切换到 Upload TAB，将描述文件填入编辑框，或者点击 Demo 加载范例文件，并点击 LoadDefinition 加载描述文件。 进阶虽然使用OpenAPI GUIv3设计非常方便，但是对OpenAPI支持的并不完整，比如Request ResponseExample无法在线编辑，这种场景下，我们就需要针对OpenAPI描述源文件进行编辑。这里我们推荐使用 SwaggerEditor 进行编辑，如下图所示 SwaggerEditor是所见即所得的，并且如果写的语法有问题，会在对应段落显示错误提示，并说明错误原因，如下图所示 相对于纯手写OpenAPI描述文件，SwaggerEditor有个贴心的功能，您可以很方便的通过可视化界面插入描述 如 path operation等 至编辑框中，如下图所示， 为了方便理解OpenAPIv3规范，我们在下方给出了OpenAPIv3的一般结构范例，对应的右边给出了字段的备注信息，方便对照 该范例CODINGAPI文档均支持展示 yamlopenapi 3.0.0 代表使用OpenAPIv3规范info 这里写API文档基础信息title 宠物商店API文档 API文档标题version 1.0.0 API文档版本description 这是一篇关于宠物商店的DEMOAPI文档，仅做参考。 API文档描述contact 联系信息name CODINGurl https coding.net email support coding.netservers 这里写API服务器地址，多条可代表不同环境 url https petstore.com api v1 description 生产环境 url http test.petstore.com api v1 description 测试环境tags 标签，CODING中可作为分组依据，name作为分组名称 name 宠物description 所有关于宠物的内容 name 会话description 关于用户的注册 登录和登出paths 这里写具体的API的相关信息 API名称 请求类型 摘要 请求参数 响应等 pets petId 第一层，API路由get 第二层，请求方法 Method ,如 get,post,delete等tags 标签，与上方全局的标签对应，将该接口归于对应tag的组中 宠物summary 宠物详情 接口摘要，CODING中可作为接口标题operationId get pet 接口ID 必填 ，接口的唯一识别方式description 获取宠物信息 接口描述信息parameters 接口参数，可多条，支持路由 Query Header参数 schema 参数结构type string 参数类型，integer string array等name petId 参数keyin path 路由 path 类型的参数required true 是否必填description 宠物ID 参数描述 schema type stringenum 参数枚举 application json application xmldefault application jsonin header header类型的参数name Acceptdescription 返回数据媒体类型 schema type integerdefault 1 参数默认值in query Query类型的参数name pagedescription 页码security 接口授权信息，此处与全局components securitySchemes对应 petstore auth 此处与components securitySchemes petstore auth对应 read pets 此处代表接口OAuthScope信息responses 接口响应信息 200 响应状态码description 以数组形式返回宠物信息 响应描述信息headers X PAGE schema type integerdescription 当前页码content 响应内容规范描述application json 响应内容MediaTypeschema 响应内容结构type arraydescription 宠物信息items ref components schemas Pet ref可用来引用components schemas中的各种实体声明，减少相同数据结构冗余，增加复用性examples 响应范例，建议填写，可用于CODINGAPI文档范例显示以及MockAPI模拟数据请求成功范例 范例名称value 范例，展示时将转换成JSON形式 id 1name doggie 400 description 请求失败patch patch请求方法tags 宠物summary 单独更新宠物属性operationId patch petdescription 单独更新宠物属性deprecated true 接口是否已废弃requestBody post put patch等请求需要传输body时，请指定requestBody，Path Query Header请写在parameters中content application x www form urlencoded 媒体类型MediaTypeschema 参数结构与上述parameters中相同type objectproperties categoryId type integerdescription 分类IDstatus type stringdescription 状态enum available pending soldphotoUrls type arraydescription 照片地址列表items type stringdescription 照片地址name type stringdescription 宠物名称isHealthy type booleandescription 是否健康tagIds type stringdescription 标签ID数组examples 请求Body范例，将在CODINGAPI文档右侧范例区展示更新范例 范例名称value 范例内容，以下将以JSON形式展示status soldresponses 200 description 更新成功content application json schema ref components schemas Pet components 通用组件，可定义复用的实体 响应 请求以及授权信息等schemas 实体信息Pet 实体keytitle Pet 名称type object 实体数据结构类型description 宠物实体信息 描述信息properties 实体参数，可多条id type integerformat int64description IDname type stringexample doggiedescription 名称securitySchemes API所使用的授权方式，可多条，CODING会展示所有授权方式petstore auth 授权方式Keytype oauth2 授权类型，可为 apiKey http oauth2 openIdConnectflows OAuth2所需要的流程信息authorizationCode OAuth2授权类型，可为 implicit password clientCredentials authorizationCodeauthorizationUrl https petstore.com oauth authorize 跳转授权地址tokenUrl https petstore.com oauth token grant type authorization code 获取token地址scopes 所有scope列表 write pets 修改宠物信息权限 read pets 查看宠物信息权限refreshUrl https petstore.com oauth token grant type refresh token 刷新token地址description OAuth2授权模式 描述信息 更详细的规范可参考 OpenAPIMap OpenAPISpecification Code First通过自动生成OpenAPI描述文件，我们可以很简单的接入CODINGAPI文档的自动化流程，方便开发同学提交代码自动发布API文档。 此处我们以Java语言的 Springfox 为例 其他语言可参考以下方案 PHP SwaggerPHP Go GoSwagger Python Flask FlaskRestPlus NodeJS Express SwaggerNodeExpress 更多可参考 https swagger.io tools open source open source integrations首先我们新建一个SpringBoot项目，添加springfox依赖 groovydependencies compile io.springfox springfox swagger2 2.9.2 exclude module io.swagger swagger annotations exclude module io.swagger swagger models compile io.swagger swagger annotations 1.6.0 compile io.swagger swagger models 1.6.0 上面swagger annotations指定新版本操作，由于在非String的请求参数 如Integer RequestParam中指定defaultValue时，springfox2.9.2依赖的swagger包较旧，导致编译时报类型转换错误的问题，在新版已解决。然后我们在Application中针对Springfox进行初始化配置操作，并定义SwaggerAPI文档的全局描述信息 Java BeanpublicDocketdocket ServletContextservletContext ApiSelectorBuilderbuilder newDocket DocumentationType.SWAGGER 2 定义Swagger2.0规范.apiInfo apiInfo 定义全局描述信息.tags newTag 宠物 , 所有关于宠物的内容 , 定义tag，对应CODINGAPI文档的菜单API分组newTag 会话 , 关于用户的注册 登录和登出 .host petstore.com 定义API基础域名.pathProvider newRelativePathProvider servletContext 定义API基础路径前缀，与host配合组成petstore.com api v1 OverridepublicStringgetApplicationBasePath return api v1 .select builder.apis RequestHandlerSelectors.withClassAnnotation RestController.class 指定只扫描 RestController注解的Controller的APIreturnbuilder.build .ignoredParameterTypes RequestAttribute.class 排除扫描 RequestAttribute注解.ignoredParameterTypes Errors.class 排除扫描 Errors注解 privateApiInfoapiInfo returnnewApiInfoBuilder .title 宠物商店API文档 定义文档标题.description 这是一篇关于宠物商店的DEMOAPI文档，仅做参考。 定义文档描述.termsOfServiceUrl http swagger.io terms 定义服务条款.contact newContact CODING , https coding.net , support coding.net 定义联系信息.license Apache2.0 定义License.licenseUrl http www.apache.org licenses LICENSE 2.0.html 定义LicenseURL.version 1.0.0 定义API版本.build 接下来，我们可以开始设计API规则，以PetController为例，即 pets 路由 java Api tags 宠物 RestController RequestMapping pets publicclassPetController ApiOperation value 宠物列表 ,notes 列出所有宠物信息 GetMapping publicResponseEntity List Pet all ApiParam value 限制每页返回数量 最大限制 100 RequestParam required false,defaultValue 20 Integerpagesize, ApiParam value 页码 RequestParam required false,defaultValue 1 Integerpage returnResponseEntity.ok newArrayList ApiOperation value 宠物详情 ,notes 获取指定ID的宠物详情 GetMapping petId publicResponseEntity Pet detail ApiParam value 宠物ID ,required true PathVariableIntegerpetId, ApiParam value 媒体类型 ,required true,allowableValues application json,application xml ,defaultValue application json RequestHeaderStringAccept returnResponseEntity.ok null 这里我们定义了两个路由，分别为 GET pets宠物列表 Query请求参数 pagesize int选填限制每页返回数量 最大限制 100 默认值20 page int选填页码默认值1 响应结构 Pet实体数组array GET pets petId 宠物详情 Header参数 Accept string可选值 application json application xml ，默认值 application json 。媒体类型 路由参数 petId int宠物ID 响应结构 Pet实体object至此，我们完成了上述两个API的设计，无需提前实现代码逻辑，我们即可获得Swagger2.0的描述文件，步骤如下 该范例使用Jetty作为Server1.启动应用 shell. gradlewbootRun 2.打开浏览器访问 http 127.0.0.1 port v2 api docs 其中 port 为配置的服务WEB端口返回的内容即为Swagger2.0描述文件，如下图所示 右键选择 存储为 保存至本地，可命名为 xxx.json ，将该Swagger2.0描述文件导入至CODING即可生成API文档，如下图所示 生成的API文档效果如下图所示 该范例的源代码可查看 https demo api.coding.net p springfox demo d springfox demo git更多Springfox的用法可参考官方文档 http springfox.github.io springfox ","categorie":"文档管理-API 文档管理-导入指南-OpenAPI/Swagger 编写与导入指南"},{"route":"/docs/management/api/import/postman.html","content":" title Postman导入指南 CODING帮助中心pageTitle Postman导入指南pagePrevTitle OpenAPI导入指南pagePrev management api openapi.htmlpageNextTitle apiDOC导入指南pageNext management api apidoc.html Postman 是一款服务于RESTAPI的完整开发环境，您可以在Postman设计API。CODING支持通过Postman导出的Collection文件，导入API数据至CODING，生成API文档。 导入PostmanAPI数据文件获取PostmanAPI数据文件有两种方式 1.通过 SharePostmanAPI 获取API数据文件URL2.通过导出 PostmanCollection 文件获取API数据文件 通过分享PostmanCollection获取API数据文件URL 如图所示，我们新建了一个名称为 PostmanAPI 的Collection，点击 ShareCollection 。在弹窗中点击 GetLink 按钮获取分享地址。 该地址即为PostmanAPI数据文件URL，点击 CopyToClipboard 复制地址至剪切板。如图所示，在 发布新版本 页或者 录入API数据页 ，选择 导入数据 下的 从URL导入 ，粘贴刚才复制的分享地址，最后选择 完成并发布 实现文档发布。 通过导出获取PostmanCollectionJSONAPI数据文件 如图所示，可通过点击Collection菜单中 Export 进行导出操作。 选中 Collectionv2.1 ，点击 Export 将导出JSON文件保存至本地。在 发布新版本 页或者 录入API数据页 ，选择 导入数据 下的 从文件导入 ，导入刚才存到本地的PostmanCollectionJSONAPI数据文件，最后选择 完成并发布 实现文档发布。 ","categorie":"文档管理-API 文档管理-导入指南-Postman 导入指南"},{"route":"/docs/management/api/mock/call.html","content":" title MockAPI调用说明 CODING帮助中心pageTitle MockAPI调用说明pagePrevTitle MockAPI使用流程pagePrev management api mock usage.htmlpageNextTitle pageNext MockAPI调用方法开启MockAPI功能后，您可在API文档看到MockAPI基础路径，如下图所示 请求路径替换说明假设MockAPI基础路径为 https c3wfvv32.mock.coding.io API文档中所有API 除第三方域名API 仅需将原真实API基础路径替换为MockAPI基础路径即可。如请求路由 GET users ，原地址为 GEThttps petstore.com api v1 users 将原基础路径 https petstore.com api v1 替换为MockAPI基础路径后如下 GEThttps c3wfvv32.mock.coding.io users 调用该API，正常则直接返回响应范例内容，如图 若参数校验失败，则会返回校验失败原因，如下图所示 API鉴权MockAPI支持APIToken鉴权方式。 开启API鉴权点击 配置MockAPIServer 打开配置弹窗 打开 开启API鉴权 开关 使用API鉴权开启API鉴权后，在请求时需要您在请求Header中加入才可正常访问 X Coding Mock Token APIToken 其中 APIToken 需要替换为上一步后台随机生成的APIToken。若未传入APIToken或者不正确，将返回异常。 IP白名单开启后，只有指定IP的主机才可访问MockAPI，其他IP不可访问并返回异常。 开启IP白名单点击 配置MockAPIServer 打开配置弹窗 打开 开启IP白名单 开关 白名单增加IP在白名单开关后面，点击 增加IP IP支持通配符配置方式，如 192. . . 100.28. . 20. .30.111 请求限制为了防止拒绝服务攻击，MockAPI制定了一定的限流策略 1000 API 分钟 即每个API每分钟可请求1000次。为了方便您查询当前限流的情况，你可通过响应Header的RateLimit参数查看，参数如下 X Coding Mock Rate Limit Remaining 剩余可请求数量 X Coding Mock Rate Limit Total 限制可请求数量 X Coding Mock Rate Limit Reset 重置限可请求数量的时间戳超出限流限制会返回异常。 匹配校验规则 MockAPI支持使用请求参数来校验MockAPI请求正确性，下面为校验规则。 请求方法 Method 根据请求的Method筛选符合Method的路由，支持 GET POST PUT PATCH DELETE OPTIONS例 路由表 GET usersPOST usersPOST users 1 传入Method POST users a 1 则筛选仅符合POSTMethod的路由 POST usersPOST users 1 路由 Route 路由匹配规则分为 1.路由层级匹配2.路由参数 RouteParameter 匹配 匹配优先级 1.不同层级， 完全匹配路由 优先，超过层级，包含请求路由的忽略2.同层级，匹配 完整字符串 路由优先3.同层级，匹配多条包含路由参数的路由，满足对应 校验规则 且 校验规则范围较小 路由参数的路由优先4.同层级，路由参数在不同层级， 浅层级完整字符串 优先 情景模拟 情景1请求若满足2条路由A B，A为2层，B为3层，则选择层数浅的 A ，即 完全匹配的路由 优先。请求 GET projects users 满足路由 A projects usersB projects users list 未完全匹配B，A为完全匹配项，即 projects users 情景2路由表为 C projects users id 规则 id必须为正整数D projects users listE projects users name 规则 name必须为字符串 请求 GET projects users list匹配D，list字符串完全匹配GET projects users 1匹配C，1为正整数 情景3路由表为 F projects users name detailG projects users detail name 请求 GET projects users abc detail匹配F，abc不匹配detail，则匹配 name 路由参数GET projects users detail abc匹配G，detail字符串完全匹配，abc匹配路由参数 name 规则 Method或路由匹配失败，则返回 匹配失败 404异常页面。 Request请求规则校验当通过Method和路由匹配后，需要对路由API请求参数进行校验，规则包括 必填，未填则校验失败 字段类型，如int string，若字段传入类型不正确则校验失败 字段类型支持 OpenAPI integer number string boolean object array Postman 从Body中自动读取 apiDoc Boolean Number String Object String Number Boolean Object 枚举，传入值不再枚举中则校验失败 必填值，不正确则校验失败校验范围包括 Header 请求参数 POST参数，支持JSON XML传入，自动解析为POST参数校验失败，则返回 校验失败 403异常页面，并给出异常原因。 若您想跳过请求校验，您可以在请求时Header带上 X Coding Mock Request Validate off 参数，屏蔽Mock接口校验。 Example匹配规则当通过请求规则校验后，则需要针对请求内容返回对应的Example内容，规则如下 1.若仅一个Example，且无Request，则所有请求直接返回第一个Response内容 2.有一个或多个Example 2.1有Example，则请求必须完全匹配Example请求参数配置，匹配则返回对应Response内容 2.2若某Example没有Request，则未满足2.1的请求直接返回该ExampleResponse内容 如有多条Example无Request，则仅返回第一条Example的Response 3.无Example 3.1存在API响应返回参数，可传入请求Header X Coding Mock Response Fake On ，MockAPI将自动为您生成一组Fake数据。 3.2反之则返回 无Mock数据 404异常页面 其他规则 Response默认返回Status200的，若未设置则直接返回。 API文档路由已经指定完整Host的，不生成MockAPI。 支持跨域。 异常 Token校验失败 IP不在白名单 状态码 403 Token校验失败 IP白名单校验失败 匹配失败 状态码 404 未找到路由 校验失败 状态码 404 路由规则匹配失败路由 用户列表 GET users未匹配规则 Header Content Type 必填Query参数 id 必须为正整数 无Mock数据 状态码 404 当前路由未配置Mock数据。路由 用户列表 GET users ","categorie":"文档管理-API 文档管理-Mock API 功能配置-Mock API 调用说明"},{"route":"/docs/management/api/mock/intro.html","content":" title MockAPI功能介绍 CODING帮助中心pageTitle MockAPI功能介绍pagePrevTitle API文档管理配置说明pagePrev management api config.htmlpageNextTitle MockAPI使用流程pageNext management api mock usage.html API文档虽然满足了阅读者对接接口的需求，但是在API起初设计的过程中，通常需要等待几天 甚至数周时间才能实时调用接口，从而真正开始接口调试工作。而通过创建MockAPI，您即可提前交付模拟真实API响应的沙盒环境，以便API使用者提前开始调试工作，同时您也可以并行开发接口实现。此外，您也可以在设计过程中得到API使用者对API设计的及时反馈，并进行迭代以得到更好的API。 什么是MockAPIMockAPIServer通过提供真实API响应的范例数据来模拟真实的API服务，它将部署在CODING提供的公网服务器上，并且支持路由及参数校验，且在此基础上可限制访问的IP或Token授权方式。 目前MockAPI支持静态模拟，即基于API响应范例的Mock，暂不支持动态模拟 自定义数据模拟规则 。 功能特性 基于API文件数据生成MockAPI。您仅需完善API规则及范例，无需额外设置即可使用MockAPI。 MockAPI支持参数校验，并可在请求有误时返回响应错误信息。大大降低API使用者在对接API时的错误率，方便调试及跟踪。 自定义MockAPI响应数据。通过修改API范例数据，可让每个API的模拟数据趋于完美。 每篇文档MockAPI均有独立域名，并支持HTTPS HTTP双协议。方便统一配置，也方便记忆，地址参考 http c3wfvv32.mock.coding.iohttps c3wfvv32.mock.coding.io 支持Token IP白名单授权方式。由于MockAPI部署在公网，用户开启上述安全配置可有效防止他人随意调用MockAPI，掌握接口规则。 使用场景1.API对接 调试通常在公司项目中，API使用者 如前端 App 自动化API测试开发人员 的开发进度会比后端API开发人员提前开始开发实现。而使用基于API文档的MockAPI可提供模拟真实API响应的沙盒环境，以便API使用者提前开始调试工作。另一方面API使用者可以及时反馈API设计问题，在完成API实现之前提早完善API设计，使得API开发工作更加高效和趋于完美。2.API测试当您需要对部分API进行统一测试时，您可以替换其他API为MockAPI，而无需关心其他依赖API是否满足测试条件。3.外部API服务通常外部API服务可能会有不可靠 收费 访问限制等情况，您也可以替换外部API服务为MockAPI，通过Mock外部API服务的真实数据来调试程序逻辑。 使用工作流 1.设计阶段API参数 规范设计 OpenAPI 在线编辑Swagger文件 http editor.swagger.io。 Spring框架编写API结构注解。 Postman IDE在线编辑。 apiDoc 代码注释设计接口规范。 2.生成范例数据用于MockAPI所需的API范例数据 OpenAPI SwaggerEditor可自动通过参数生成Example。 Postman 使用Postman内置MockServer，针对各API编写Mock数据规则，访问MockAPI获取Mock数据。 apiDoc 使用https github.com cdcabrera apidoc mock搭建MockServer，然后请求各MockAPI获取Mock数据。 3.生成MockAPI通过CODINGAPI文档导入API文件并发布，自动更新MockAPI规则及数据。","categorie":"文档管理-API 文档管理-Mock API 功能配置-Mock API 功能介绍"},{"route":"/docs/management/api/mock/usage.html","content":" title MockAPI使用流程 CODING帮助中心pageTitle MockAPI使用流程pagePrevTitle MockAPI功能介绍pagePrev management api mock intro.htmlpageNextTitle MockAPI调用说明pageNext management api mock call.html 1.创建API文档并录入数据参考 创建API文档 。 2.开启MockAPI功能 点击 开启并配置MockAPIServer 启用MockAPIServer，同时CODING会针对该API文档生成随机MockAPI基础路径，该地址可替换API使用者目前所配置的真实API基础路径。 3.配置MockAPIServer 配置界面提供了以下能力 重置基础路径 即可以重新获取随机的MockAPI地址 APIToken鉴权 开启后，MockAPI需要在请求时传入APIToken才可访问MockAPI数据，否则不允许访问。APIToken需要在请求API时传入 X Coding Mock Token Header，值为生成的APIToken。 IP白名单 开启后，只有指定IP的主机才可访问MockAPI，其他IP不可访问并返回异常。IP支持通配符配置方式，如 192. . . 100.28. . 20. .30.111 4.API文档展示MockAPI地址和自定义基础路径 5.停用MockAPIServer停用不会影响API文档，不会清除MockAPI基础路径 安全配置，但访问MockAPI基础路径不可用。 使用MockAPIServer之前建议完善各API的响应返回 ResponseExample 范例数据，当然也可以优先完善需要提供模拟真实API能力的API数据，以便MockAPIServer可以正常返回模拟数据。 当然，为了保证MockAPI能与真实API一样拥有校验能力，API路由及请求参数也需要适当完善，以便API使用者在对接时能与真实API一致的体验。","categorie":"文档管理-API 文档管理-Mock API 功能配置-Mock API 使用流程"},{"route":"/docs/qta/app/compattest/INTRO.html","content":" 兼容性测试","categorie":"自动化测试-自动化测试应用-兼容性测试"},{"route":"/docs/qta/app/functest/INTRO.html","content":" 功能测试","categorie":"自动化测试-自动化测试应用-功能测试"},{"route":"/docs/qta/app/loadtest/EXECUTE.html","content":" 执行压测Qload支持本地执行和线上和线上执行。本地执行使用qload命令，线上执行使用qload cluster命令。 命令行详解 qload命令详解安装好qload后，本地可以执行qload命令执行压测，调用qload command help查看各个命令的具体参数。下面详细说明几个常用的子命令。 run oncerun once命令可以用于调试VU模块。命令行参数如下所示 bashqloadrun oncevu data fileDATA FILE data count per vuDATA COUNT PER VU vu 必填参数，虚拟用户实现模块，一般从项目顶级目录开始，例如Demo示例的表示如下 loadtest.demotest.DemoWorker data file 可选参数，传入数据驱动文件文件，该文件中每行存放一条数据。在VU实现中使用self.vu data获取传入的数据。 data count per vu 可选参数，不能单独使用，必须和data file一起使用，用于指定每个VU能够使用的数据数量，在VU中使用self.vu data list获取该参数列表。 run stressrun stress用于执行压测，其命令行参数如下所示 bashqloadrun stressVU durationDURATION concurrentCONCURRENT processPROCESS tpmTPM data fileDATA FILE data count per vuDATA COUNT PER VU debug vu 必填参数，虚拟用户实现模块,和run once命令中含义相同 duration 必填参数，压测执行时间，单位为秒。 concurrent 必填参数，并发用户数据即同时执行的虚拟用户数。 process 可选参数，单机压测进程数，一般情况不需要设置，默认情况下进程数等于机器的CPU核数。 tpm 可选参数，用于设置VU的TPM 每分钟事务数 。 data file 可选参数，传入数据驱动文件文件，和run once命令中含义相同 data count per vu 可选参数，不能单独使用，必须和data file一起使用，用于指定每个VU能够使用的数据数量，和run once命令中含义相同 debug 可选参数，使用该参数时，会输出Debug日志 run cmd stressrun cmd stress通过调用命令行工具来执行压测，其命令行参数如下所示 bashqloadrun cmd stresscommand durationDURATION concurrentCONCURRENT processPROCESS debug data fileDATA FILE data count per vuDATA COUNT PER VU command 必填参数,待执行命令行，例如 curlhttp foo.com duration 必填参数，压测执行时间，单位为秒。 concurrent 必填参数，并发用户数据即同时执行的虚拟用户数。 process 可选参数，单机压测进程数，一般情况不需要设置，默认情况下进程数等于机器的CPU核数。 tpm 可选参数，用于设置VU的TPM 每分钟事务数 。 data file 可选参数，传入数据驱动文件文件，和run once命令中含义相同 data count per vu 可选参数，不能单独使用，必须和data file一起使用，用于指定每个VU使用的数据数量，和run once命令中含义相同 debug 可选参数，使用该参数时，会输出Debug日志 qload cluster命令详解在线上执行压测，需要使用qload cluster命令来创建对应的线上任务以及一些执行过程中的必要资源。这里我们详细介绍qload clusterstress命令以及qload clustercmd stress命令。 stress命令qload clusterstress命令有如下几个子命令 ls 列出正在执行的压测任务，还未实现 create 创建压测任务 stop 停止压测任务 get 获取压测任务详情这里使用比较复杂的是create命令，这里详细一下create子命令的用法。 bashqload clusterstresscreate testcaseTESTCASE testcase branchTESTCASE BRANCH vuVU dataDATA cpusCPUS data count per vuDATA COUNT PER VU concurrent per cpuCONCURRENT PER CPU worker pre cpuWORKER PRE CPU tracingTRACING nodename regexNODENAME REGEX node groupNODE GROUP durationDURATION settingsSETTINGS SETTINGS... loglevelLOGLEVEL namespaceNAMESPACE tpmTPM testcase 必选参数，QTA用例库ID，在QTA用例库页面可以获取该信息。 testcase branch 可选参数,用例库分支名,默认为master分支。 vu 必填参数，虚拟用户实现模块,和run stress命令中含义相同 data 可选参数，用于设置线上执行数据驱动的数据源，使用之前需先上传数据源。 data count per vu 可选参数，不能单独使用，必须和data参数一起使用，用于指定每个VU使用的数据数量 cpus 可选参数，用于指定CPU核数，默认值为1。该值在执行时会被转化成对应的压测机器数。一般情况下是机器数 int CPUS 8 ,当cpus小于8时，对应的机器数为1 concurrent per cpu 可选参数，默认值为1，每个CPU对应的并发数.例如此参数被设置为300，那么对于单机而言 默认情况下，qload执行机是8个CPU ，所以这里换算过来的单机并发数就是300 8 2400 worker per cpu 可选参数，每个CPU启动的压测进程数，默认值为1. tracing 可选参数，指定该任务对应的tracing配置。 nodename regex 可选参数，用于指定执行机筛选条件，默认情况下会随机选取qload分组下的执行机。在需要指定使用某个环境的执行时，可以通过此参数来进行指定。例如 nodename regex cvmNJ,则只会使用南京CVM执行机来执行压测 node group 可选参数，用于指定执行机分组。默认情况下我们使用的是qload分组 支持IDC环境和外网环境 作为执行。但是当前环境不满足压测需求时，需要使用该字段来指定对应环境的执行机分组。 duration 可选参数，指定压测执行时间，单位为秒。默认值30S。 settings 可选参数，用于指定qtaf的setting配置。默认为 loglevel 可选参数，用于指定QLoad的日志级别,默认是INFO级别。可设置项为 INFO,WARNING,ERROR,DEBUG设置为ERROR时，不会上传qload output文件。 namespace 可选参数，用于区分不同业务。 tpm 可选参数，用于设置VU的TPM 每分钟事务数 。 cmd stress命令qload clustercmd stress和stress的用法基本想用，此处不再累述。 执行线上压测由于单个节点产生的压力有限，QTA平台也提供了线上的集群给Qload用于执行压测,执行压测前需进行必要的初始化操作。 安装和初始化首先需要安装QTAP命令行工具 pipinstall ihttp pypi.qdev.oa.com simple trusted hostpypi.qdev.oa.comqtap cli 然后执行登录 qload clusterlogin typeqtap key qtaptoken 关于token的获取，详情请参考 QTA平台文档 创建和管理线上压力测试这里推荐正式运行的项目都接入 QTA平台 的方式使用。代码库接入QTA平台请参考 测试用例库 执行线上压测用例库关联成功后，可以调用qload clusterstresscreate或者qload clustercmd stresscreate命令执行压测。启动成功后，会输出如下返回值。 bashIDSTATUSNAMETESTCASE PKGURL81212122initQLOAD STRESS loadtest.loaddemo.DemoWorkerQFS git.code.oa.com QTATestProj TencentMeeting Restapi pressuretest b028de04c0a4f9f2c6c30e09e7f5aee16e16cae9.tgz ID 本次线上任务的ID. STATUS 当前任务状态 NAME 任务名 TESTCASE PKGURL 代码库打包地址 获取执行任务信息执行qload clusterstressget taskid 可以获取指定任务的执行信息。 bashqload clusterstressget81212122IDSTATUS81212122waiting LOGDIR http file.sng.com list qta qload reports 81212122 LOGURL http drun.qta outer.oa.com drun dashboard job 81212122 basic DATAURL http grafana.qta.oa.com d 9QayDglWz qloadce shi bao gao orgId 1 from now 15m to now refresh 10s var job id 81212122 LogDIR 压测日志地址，存放在文件服务器上，每个执行机子节点占据一个目录。 LOGURL 对应的Drun任务日志地址。 DATAURL 可视化报告地址。 停止任务执行qload clusterstresssop taskid 可以停止正在执行中的任务 bashqload clusterstressget81212122IDSTATUS81212122cancelling 对于一个正在执行中的压测任务执行此命令，此时任务状态会变成cancelling。等任务完成结束后，状态会变成canceled 线上执行数据驱动如果压测用例使用了数据驱动，则需要在线上执行前提交测试数据。使用qload clusterdataset命令来管理线上测试数据。假设测试驱动数据按行存储在account.txt文件中。此外，为避免各个不同项目间可能存在的数据冲突问题，使用namespace参数来区分不同的项目。默认namespace为demo,可以不显示指明。 创建测试数据 qload clusterdatasetcreate namefoo accounts from fileaccount.txt namespacedemo 查询项目测试数据列表 qload clusterdatasetls namespacedemo 查询测试数据详情 qload clusterdatasetgetfoo accounts namespacedemo 删除测试数据 qload clusterdatasetdeletefoo accounts namespacedemo 更新测试数据 qload clusterdatasetupdatefoo accounts from fileaccount.txt namespacedemo 执行带数据驱动任务在启动任务时加上data参数指定数据源 VU需要占用多个数据是，还需指定data count per vu 。 powershellqload clusterstresscreate vuloadtest.demotest.DemoWorker duration100 concurrent1000 cpus100 datafoo accounts data count per vu1 线上压测开启trace 开启tracing配置压测任务默认不开启Trace，要开启Trace，首先需要创建Trace对象。 powershellqload clustertracingcreate namedemo tracing from fileconf.yaml namespacedemo name用例指定trace对象名 namespace指定命名空间，默认就是demo from file指定tracing配置文件，conf.yaml就是trace的配置文件。 trace配置tracing的Demo配置如下所示 yamltracings instrumentation python integrations httplib enhance 目前仅支持httpexporter zipkin service name qloadhost name 9.148.65.215port 80sampleStrategy matchTrace 对有错误的trace都上报error true sampleRate 1.0 matchNode 对节点ip为9.11.21.12的trace都上报ip 9.11.21.12sampleRate 1.0 sampleRate 1 在trace配置中，可以指定采样频率 sampleRate 取值在0 1之前.当取值为1时，表示对所有请求进行trace,此时可能会影响压测性能。采样频率建议根据使用目标进行合理设置。 执行带tracing的任务 powershellqload clusterstresscreate vuloadtest.hello duration100 concurrent1000 cpus100 tracingdemo tracing 注意只有线上执行才有Tracing 查看trace查看具体的trace情况，请前往 QLoadTracing 1 1 image qload trace.png","categorie":"自动化测试-自动化测试应用-压力测试-执行压测"},{"route":"/docs/qta/app/loadtest/INTRO.html","content":" 压力测试 简介QTA压力测试系统是在Qload工具的基础上实现的，Qload最终的架构如下所示 1 目前实现了其中的部分功能，欢迎大家使用。 功能概览 支持用户通过编写Python脚本方式虚拟用户操作，可实现复杂的用户场景。对于已有的QT4S自动化脚本，仅做少量修改即可作为压测脚本使用。 支持数据驱动，可以每个虚拟用户使用不同的数据。 支持采集测试过程数据，包括VU VirtualUser 虚拟用户，压测执行对象 相关性能指标,包括请求耗时，QPS，成功率等。 支持用户上报自定义的错误 支持并发量控制 TPM 每分钟事务数 控制以及执行时间控制。 支持线上执行，并生成可视化报告。 支持请求Tracing 目前仅支持http请求的tracing 用例编写 安装qload在写qload用例前，需要先安装qload包，安装方式如下所示 bashpipinstall ihttp pypi.qdev.oa.com simple trusted hostpypi.qdev.oa.comqload 安装完成后，可以执行qload命令，输出如下所示则安装成功。 bashqloadUsage qloadsubcommand options args Options h, helpshowthishelpmessageandexitType qloadhelp subcommand forhelponaspecificsubcommand.Availablesubcommands createprojectrunloadhelpload vurun cmd stressrun oncerun stress 创建测试项目安装好qload后，可以使用qload来创建测试项目，命令行使用方式如下所示 qloadcreateprojectfoo 执行该命令后，会在当前目录下生成fooloadtest项目。 编写测试用例简单的Demo示例如下所示 只需要继承qload的定义的VirtualUser类，并实现vu request方法即可，vu request方法定义了VirtualUser的行为。 pythonimportrequestsfromqload.virtualuserimportVirutalUserclassFooWorker VirutalUser owner foo defvu request self, kwargs rsp requests.get http foo.com returnrsp.status code 200 用例编写完成后，可以使用qloadrun once命令来验证该VirtualUser实现。 bash linenumscd projectpath 进入项目目录qloadrun onceloadtest.demotest.FooWorker 更详细的压测用例写法，请参考 Qload用例编写 执行压测通过使用qload命令行可以在本地或者线上执行压测。 本地执行在某些私有化场景或者本地验证时，可以使用qloadrun stress命令来执行。示例如下所示 bash linenumsqloadrun stressloadtest.demotest.fooWorker concurrent10 duration30 执行结果如下 2 执行完成后，在当前目录会生成三个执行相关的log文件。 qload error.txt 用于记录压测过程中的错误信息 qload.log qload执行日志 qload stat.txt qload统计的VU性能指标 驱动命令行工具如果测试业务逻辑的工具是一个命令行程序，则QLoad也能直接将命令行作为一个VU来使用。 qloadrun cmd stress curlhttp foo.com user id QLOAD VU DATA grepsuccess concurrent10 duration100 data fileaccount.txt 在压测执行命令行工具的时候，qload会传递环境变量的参数给测试工具，包括 QLOAD VU ID 每个VU的唯一序列号 QLOAD VU DATA 数据驱动数据，相当于 self.vu data QLOAD VU DATA ID 数据驱动数据，相当于 self.vu data list QLOAD SPAN METRIC PIPE 用于接收用户自定义接口的指标的管道文件路径，消息格式为 name , begin time , end time , error n name 接口名 begin time 接口请求开始时间，UNIX时间，整数，单位为毫秒 end time 接口请求完成时间，，UNIX时间，整数，单位为毫秒 error 发生的错误，QLoad会自动根据这个错误进行聚类和统计 如果这个字段值为空字符串，则表示本次接口请求成功 线上执行线上执行压测，需要首先将压测用例代码库关联到QTA平台，然后才能进行线上执行。关联代码库操作请参考 测试用例库 .关联成功后，在QTA用例库界面，即可获取到对应的testcase repo id.执行qload cluster命令 bash linenumsqload clusterstresscreate testcase testcaserepoid testcase branch braanchname cpus40 duration300 vu loadtest.loaddemo.DemoWorker 输出IDSTATUSNAMETESTCASE PKGURL81171860initQLOAD STRESS loadtest.loaddemo.DemoWorkerQFS git.code.oa.com QTATestProj TencentMeeting Restapi pressuretest b028de04c0a4f9f2c6c30e09e7f5aee16e16cae9.tgz 更多QLoad执行方法，请参考 压测执行 压测报告在线上执行压测可以查看实时压测报告，执行qload clusterstressget TASKID 命令即可获取到实时报告的URL，对于上面的任务，可以执行如下命令 bash linenumsqload clusterstressget81171860 输出IDSTATUS81171860running LOGDIR http file.sng.com list qta qload reports 81171860 LOGURL http drun.qta outer.oa.com drun dashboard job 81171860 basic DATAURL http grafana.qta.oa.com d 9QayDglWz qloadce shi bao gao orgId 1 from now 15m to now refresh 10s var job id 81171860 其中DATAURL就是实时报告对应的URL。 3 单接口报告在某些场景下，一个VU中可能会请求多个接口，压测报告支持查看单接口的实时压测状态。在压测报告页面点击单接口处理数据视图表格中的接口名，即可跳转到对应的单接口视图。 4 聚合报告压测报告还支持从业务维度来查看压测的实时状态。例如在在线教育压测过程中，会通过QCI流水线，同时启动多个压测任务。此时为方便观察压测执行结果，可以在业务视图界面查看所有任务的压测的结果，如下图所示 5 在此视图点击单接口处理数据图表的接口名，同样可以跳转到单接口页面。 1 image qload frame.png 2 image run stress.png 3 image report.png 4 image interface.png 5 image namespace.png","categorie":"自动化测试-自动化测试应用-压力测试"},{"route":"/docs/qta/app/loadtest/LoadMode.html","content":" 压测模型 压测模型概述Qload提供了的丰富的压测模型用于支持不同场景下的压力源控制能力。总体上可以分为以下三种模型 稳定性测试模型 在该模型场景下，压力值会始终保持再一定的水平线上。主要用于观察被测目标在一定的压力下，持续运行时是否存在性能问题。稳定性测试是qload的默认运行模式，在该模式下，可以控制VU 虚拟用户 数和TPM 用户每分钟频率 concurrentxx 指定虚拟用户数，必填参数 tpmxx 控制每个虚拟用户的发送频率，可选参数 负载测试模型 在该模式下，压力值会动态变化，主要用于观察被测目标在压测改变时的性能变化。这里主要有两种场景 其一，压力递增的场景下，观察被测目标是否出现性能变化。 其二，在压力递减的场景下，观察被测目标的性能恢复情况在负载测试场景中，可设置变化类型，初始值，递增步长以及是否递减等。 variation typexx 设置变化类型，取值范围 linear 线性变化,设置初始值 固定步长增长 ，index 指数变化，默认是2 x ，userdefine 用户指定增长模式 ,默认值是linear。对于线性增长需要设置以下两个参数 init percentxx 设置压力初始百分比，实际初始值 int conccurrent init percent 100 step percentxx 设置增长步长百分比，实际增长增长步长 int concurrent step percent 100 对于指数增长，初始值为 1 ，后续每轮并发数增加2 n ,直达到最大值。指数增长的特点是，越到后面增长越快。对于用户自定义模型，可以由用户来指定每步变化百分比，正值表示增加，负值表示减少。使用自定义模型，可以拟合各种压测流量模型。 reverse 使用该字段表示使用压力递减模式 突发流量模型 该模式主要用于，考察被测对象在突发性流量压测下的性能变化。该模式下，可以设置瞬发间隔 instant intervalxx 瞬发间隔，单位为秒，默认值为0 压测模型使用示例 稳定性测试模型使用稳定性遥测模型基可以为分为使用TPM控制和不使用TPM控制两种模式。 不使用TPM控制，可以更充分的利用单机性能，产生更高的压力值，做洪峰测试时，可以用使用此模式，产生更大的压力。 TPM控制模式，可以比较精准的控制压力值，在做系统的SLA评测时，使用TPM控制更合适。系统产生的总TPM值 节点总数 节点VU数 VU的TPM值 性能模式 不使用TPM控制，充分发挥单机性能 命令行示例 bashqload clusterstresscreate testcase testcase id testcase branch branch id namespacemeeting cpus16 concurrent per cpu10 duration120 vuloadtest.loaddemo.DemoWorker loglevelINFO nodename regexstke high2 性能模式报告 6 该模式下TPM数据值可能会上下波动。 TPM控制模式命令行示例 bashqload clusterstresscreate testcase1442 testcase branchpressuretest namespacemeeting cpus16 concurrent per cpu10 duration120 vuloadtest.loaddemo.DemoWorker loglevelINFO nodename regexstke high2 tpm120 TPM控制报告 7 在上诉命令设置下，总的TPM值 16 10 总VU数 VUTPM 120 19200。单机的QPS TPM 60 值 8 10 120 60 160 负载测试模型在进行负载测试，有以下几点需要做特殊说明 负载测试模式下，改变的只是并发的VU数，对于单个VU的设置的TPM不会有任何改变。 负载测试模式下，concurrent参数会转化成VU个数的峰值。 在负载测试模式下，duration参数会转化成每个阶段的执行时间，总执行时间 总阶段数 duration。 负载测试模式下，对于百分比变化类型 初始值 int conccurrent init percent 100 步长 int conccurrent step percent 100 总时间 int 100 init percent step percent 1 duration 负载测试模式下，对于指数变化类型 初始值 int conccurrent init percent 100 步长 pow 2,i ,i表示轮数， 1,2,4,8,16,32,... 等 总时间 duration int math.log concurrent self.init ,2 2 线性递增 百分比均匀递增 命令行使用示例 bashqload clusterloadcreate testcase testcase id testcase branch branch name namespacemeeting cpus80 concurrent per cpu20 duration120 vuloadtest.loaddemo.DemoWorker loglevelINFO nodename regexstke high2 tpm120 init percent20 step percent20 均匀递增报告 1 线性递减 百分比均匀递减 命令行使用示例 bashqload clusterloadcreate testcase testcase id testcase branch branch name namespacemeeting cpus80 concurrent per cpu20 duration120 vuloadtest.loaddemo.DemoWorker loglevelINFO nodename regexstke high2 tpm120 init percent10 step percent20 reverse 均匀递减报告 2 指数递增模型命令行使用示例 bashqload clusterloadcreate testcase testcase id testcase branch branch name namespacemeeting cpus80 concurrent per cpu20 duration120 vuloadtest.loaddemo.DemoWorker loglevelINFO nodename regexstke high2 tpm120 init percent10 variation typeindex 指数递增报告 3 指数递减模型命令行使用示例 bashqload clusterloadcreate testcase testcase id testcase branch branch name namespacemeeting cpus80 concurrent per cpu20 duration120 vuloadtest.loaddemo.DemoWorker loglevelINFO nodename regexstke high2 tpm120 init percent10 variation typeindex reverse 指数递减报告 4 用户自定义模型用户自定义模型命令行示例 bashqload clusterloadcreate testcase testcase id testcase branch branch name namespacemeeting cpus8 concurrent per cpu10 duration60 vuloadtest.loaddemo.DemoWorker loglevelINFO nodename regexstke high2 init percent10 step list10203030 20 10 20 variation typecustomize tpm120 自定义报告 8 瞬发模型瞬发模型线上执行命令行示例 bashqload clusterinstantcreate testcase testcase id testcase branch branch name namespacemeeting cpus80 concurrent per cpu20 duration120 vuloadtest.loaddemo.DemoWorker loglevelINFO nodename regexstke high2 instant interval20 瞬发报告 5 1 image percent aes.png 2 image percent desc.png 3 image index aes.png 4 image index desc.png 5 image instant.png 6 image notpm.png 7 image tpm.png 8 image customize.png","categorie":"自动化测试-自动化测试应用-压力测试-压测模型"},{"route":"/docs/qta/app/loadtest/TESTCASE.html","content":" Qload压测用例Qload用例实现最主要的内容就是实现VirtualUser VU 封装，定义VU具体操作。 QloadVirtualUser定义在编写qload用例时，需要关注qload的VirtualUser的以下四个方法。 pythonclassVirutalUser six.with metaclass ForbidOverloadMethods init ,object VUbaseclass classmethoddefvu setup cls setup,runonceoneachprocess pass classmethoddefvu cleanup cls cleanup,runonceoneachprocessintheend passdefvu request self, kwargs request,runconcurrently return result rtype any raiseNotImplementedError defvu verify self,result True verifyforeachresult paramresult returnvaluefrom vu request typeresult any return verificationresult rtype bool returnresult vu request 定义VU 虚拟用户 操作，一般就是发送请求等操作，正常情况下会返回请求回包或者处理后的请求回包。 vu verify 根据vu request的返回值，判断vu请求是否通过，如果没有重写该方法，则默认校验通过。当校验失败是，会上报一条error数据，指示校验失败。 vu setup 定义VU初始化，可以在此处做一些VU共有的初始化操作。 vu cleanup 定义VU清理操作，主要用于清理一些VU共用的资源。 用例编写一个简单Demo用例实现如下 pythonimportrequestsfromqload.virtualuserimportVirutalUser 引入VirtualUser 继承VirtualUserclassFooWorker VirutalUser owner foo 在vu request中封装请求defvu request self, kwargs rsp requests.get http foo.com returnrsp 虽然qload执行中会记录和统计VU的处理相关的性能指标，但是针对VU级别。用户可以使用qload提供的Span类声明对应的Span代码块，每个请求来定义接口以及上报内容。示例如下 pythonimportrequestsfromqload.virtualuserimportVirutalUserfromqload.tracingimportSpan 引入SPANclassFooWorker VirutalUser owner foo defvu request self, kwargs foridxinrange 3 withSpan name foo get user info asspan rsp requests.get http foo.com user id s index s self.vu data,idx ifrsp.status code 200 span.error httperror s rsp.status code 通过withSPAN name XXX asspan的方式使用SPAN，name用于定义接口名，建议接口名和请求相关。 用户可以使用span.error 来上报和请求相关的错误信息。 高阶用法 数据驱动数据驱动可以让每个VU使用不同的数据进行测试，对于需要数据互斥的场景，比如让每个VU使用不同的账号，就可以通过这个方式解决。使用数据驱动需要简单修改一下用例，使用 vu data 变量获取数据，这里我们用 vu data 来传递的是模拟的用户的ID pythonimportrequestsfromqload.virtualuserimportVirutalUserclassFooWorker VirutalUser owner foo defvu request self, kwargs rsp requests.get http foo.com user id s self.vu data returnrsp.status code 200 然后我们将用户的账号按分行存储在一个文本文件中 cataccount.txt11111112111311141115 这样就可以执行调试 qloadrun oncefooloadtest.hello data fileaccount.txt 以上调试执行时，会随机选择 account.txt 文件中的一行数据进行测试。同样的，我们可以执行压测 qloadrun stressfooloadtest.hello concurrent5 duration100 data fileaccount.txt 注意 由于这里只有5个账号，为了不使用冲突，我们只设置了5个并发进行测试。如果需要一个VU分配多份的数据，则可以使用 data count per vu 进行控制，比如 qloadrun stressfooloadtest.hello concurrent5 duration100 data fileaccount.txt data count per vu2 但是在用例中则需要使用 vu data list 获取账号 pythonimportrequestsfromqload.virtualuserimportVirutalUserclassFooWorker VirutalUser owner foo defvu request self, kwargs foritinself.vu data list rsp requests.get http foo.com user id s it tracing脚本编写这是用tracing特性时，用例脚本中建议每个请求都通过Span进行包裹。支持自定义tag来方便进行追踪，示例如下 pythonimportrequestsfromqload.virtualuserimportVirutalUserfromqload.tracingimportSpanclassFooWorker VirutalUser owner foo defvu request self, kwargs foridxinrange 3 withSpan name foo get user info s idx asspan 定义一个span代码块span.tag wemeet.user id ,self.vu data 用户自定义标签rsp requests.get http foo.com user id s index s self.vu data,idx ifrsp.status code 200 span.error httperror s rsp.status code 声明span出错else code rsp.json code ifcode 0 span.error businesserror s code 声明span出错 ","categorie":"自动化测试-自动化测试应用-压力测试-压测用例编写"},{"route":"/docs/qta/app/perftest/INTRO.html","content":" 性能测试 简介性能测试是QTA自动化测试体系组成部分，主要面向后台接口的性能测试自动化。 QTA整体架构请参考 QTA平台简介 功能概览 兼容各种不同类型的工具，并且依托QTA的插件体系，可以快速实现工具的扩展。 提供标准化的接口，支持上报性能结论数据以及性能打点数据。上报数据只用符合定义的格式规范即可。用户不用操心数据存储以及数据隔离等问题。 可配置化的阈值设置 提供了用例级别的阈值配置，执行中台会自动读取对应用例的阈值并且判断该用例是否执行通过。支持两种类型的阈值 性能工具结论数据阈值，比如QPS等。 待测目标监控信息阈值，例如目标机器的CPU占用等。 提供丰富的性能报告 提供标准化的性能报告 满足大部分场景的下性能数据展示。报表性能报告包括以下内容 展示用例通过情况汇总。 展示用例执行执行机及目标机器信息 根据不同场景展示用例的性能结论数据 每个用例根据不同的配置展示对应性能测试过程中的目标监控趋势图。 支持根据用户需求来定制性能报告。定制的性能报告基于Grafana实现。 和其他性能测试的关系此处主要论述本性能测试和perflib以及云驭的区别 云驭 CSIG测试开发中心专项组开发的用于测试服务器性能的工具，包括磁盘IO，CPU效率等。 perflib CSIG测试开发中心专项组开发APP的可以支持测试APP内的一些页面打开及加载性能。 QTA性能测试 主要用于支持改后台性能支持，支持多种工具，提供性能数据上报及报告定制能力。 编写性能用例如果需要根据性能平台接入的工具来创建对应的用例库，可以在QTA平台创建对应的用例代码库，操作如下 1 在代码库配置中，选择后台接口测试。测试工具可以选择以下几种 JMeter K6 Wrk执行该操作后，会生成一个包含Demo用例的测试工程。我们可以在该工程下，编写对应的性能用例。此时只需要编写基本的性能脚本 配置即可，不用关心性能数据的处理。已接入性能工具的使用方式，参考 性能测试工具 此外也支持在其他的自动化用例中上报性能数据，但是此时需对用例进行改造，以便在用例执行过程中上报性能数据。如何实现用户自定义数据上传请参考 用户上传性能数据 性能任务性能任务的创建和普通QTA任务没有差别。对于任务创建不熟悉的可以参考 QTA测试执行 任务配置性能上报在任务界面，配置如下 4 性能数据上报选项包括 标准性能上报 勾选标准性能上报会展示默认的性能报告TAB页。 不使用 当勾选不上报时，不会展示默认的性能报告页。 perflib性能数据上报 在执行perflib用例时，勾选此选项，用于展示perflib报告。此外，如果需要展示自定义Grafana图表作为性能报表，这里的上报选项，需要选择不使用。然后联系jackeychen，开项目白名单展示Grafana报表。 性能用例配置 用例阈值配置。因为做性能测试时，各个工具的测试用例描述方式并不相同，有些用例甚至不是代码文件，例如jmeter的用例 jmx文件 。因此性能平台统一设计了一个用例描述文件。该文件中可以配置阈值等其他用例信息。 用例配置用例配置文件和用例文件同名。比如用例文件名为 demotest.jmx,则其配置文件可以命名为 demotest.yaml.conf.配置文件示例如下 yamlconfig owner demotester threshold name qpsvalue 30000expect unit qpsfail message QPS低于阈值 name error ratevalue 0.1expect unit 0.00 1.00 fail message 错误比例最大容忍度超阈值 name response timevalue 20expect unit msfail message 平均响应时间超过最大容忍毫秒阈值 name response time 90value 30expect unit msfail message 响应时间极值未控制在预期阈值内 单位 ms name cpu.usage usertype xxxmonitorvalue 0.9expect monitorargs host 192.168.190.171monitor name servermonitorargs var host 192.168.190.171serverenv server cpu 56Core 2886.92MHz server disk 3T server os centos 7.6.1810 Core server mem 256G server ip 192.168.190.171 说明 1.采用标准Yaml语法编写，请参考 yaml语法规范 2.该配置文件主要用于描述阈值信息，根据该阈值判断该用例是否通过。用例阈值主要有两种情况 2.1阈值限定的是性能结论数据 例如上述示例中的QPS，此处的阈值设置相对简单，只用配置期望值及比较运算符即可。 2.2 阈值限制的是监控目标的资源使用 如上述示例的cpu.usage user。此时，除了期望值和运算符外。还需要额外补充监控参数以及计算函数。在fuction,不指定的情况下，默认使用mean 方法做计算。 3.监控配置 配置用例对应的监控类型及其参数。目前支持的监控类型有 servermonitor 获取监控目标服务器的CPU，内存，磁盘等信息。 processmonitor 监控服务器上某进程的cpu,内存占用信息，线程数等。监控类型可扩展，没有监控的话，可以不配置。 4.服务器环境 用例对应的服务器信息描述，包括CPU，内存，磁盘等相关信息。默认可以不写。详细的用例配置说明，请参考 用例配置 性能报告 标准性能报告页采用标准的性能数据上报模式，用例执行完成后，会显示标准的性能报告页。 5 该报告主页，大致可以分为三部分，最上面是用例执行情况汇总。第二部分展示执行环境信息，包括执行机信息及服务器信息。第三部分是用例结论数据。为了获得较好的展示效果，这里每行只展示了部分数据，有些字段被隐藏了。默认的逻辑是优先展示，配置有阈值的字段，其余字段按照字母递增顺序排列。如果需要展示所有字段，点击自定义显示列，勾选用来显示更多的字段。性能报告会根据场景分组来展示用例性能数据，默认场景为空。如果需要显示某个场景的用例结论，需要在选择场景下拉框，选择对应的场景。 6 每个用例可以点击监控按钮来展示监控详情 7 用例的监控详情如下所示 8 对于同一监控类型，可以通过切换变量，来切换TAB中展示的监控数据，每个监控类型单独占一个Tab页。 定制性能报告页如果现有的标准性能页面不满足的你需求，可以联系jackeychen，提供定制化的性能页面解决方案。示例如下 医疗团队需要在性能页面展示各个用例间的处理耗时对比，标准性能报告不适用，因此提供如下性能报告页 9 1 image create repo.png 2 image repo task.png 3 image create task.png 4 image task info.png 5 image report tab.png 6 image testcase info.png 7 image report monitor.png 8 image monitor info.png 9 image private report.png","categorie":"自动化测试-自动化测试应用-性能测试"},{"route":"/docs/qta/app/perftest/config.html","content":" 用例配置性能测试底层支持的工具多样，各个工具性能用例写法千差万别。但是性能用例除了脚本之外，还需设置一些额外属性，例如阈值等。因此为统一性能用例的其他属性。为每个性能用例定义了一个对应的用例配置文件。该配置文件具备以下几个特点 命名规则为 testcase name .yaml.conf，每个用例文件对应一个配置文件，如果同一个文件中包含多个用例，这多个用例会公共一个配置文件。 该配置文件内容须严格遵守yaml语法规范，否则可能导致该文件无法识别。 配置文件并不是必须。当用例不存在配置文件是并不会影响性能用例的执行，但是会缺少阈值判断 显示对应监控的能力。 用例阈值配置配置文件最重要的内容就是配置用例阈值，性能用例执行结束后，会将最终的性能的结论和此处用例设值阈值进行对比计算，以判断当前性能测试是否符合预期。其中用例阈值可以分为两部分 指标阈值和监控阈值。 指标阈值指标阈值 用于判断性能工具输出的结论数据 或者用户自定义的性能数据 是否符合预期.指标阈值的定义格式如下所示 yamlthreshold name qpsvalue 30000expect unit qpsfail message QPS低于阈值 name error ratevalue 0.1expect unit 0.00 1.00 fail message 错误比例最大容忍度超阈值 name response timevalue 20expect unit msfail message 平均响应时间超过最大容忍毫秒阈值 name response time 90value 30expect unit msfail message 响应时间极值未控制在预期阈值内 单位 ms 每个用例可以配置0个或者多个指标阈值，每个阈值指标基本上包含以下五个部分。 name 阈值指标名，该指标名对应用例输出的性能数据中的某一项指标名。如果该指标名不在性能数据中，则该项阈值配置无效。各个不同性能工具可配置的阈值参考 已接入工具 中的性能结论数据字段。 value 目标值，及对应性能指标的边界值。 expect 期望比较方式，目前仅支持 , , 以及 。例如上述的qps阈值，表示的含义是，该用例运行结束时，qps指标值需大于30000。 unit 单位 fail message 阈值判断失败时的反馈信息，默认可不填。 监控阈值所谓监控阈值，是指根据用例执行过程中的目标监控的信息来判断用例结果是否符合预期。例如，在某次性能测试中，我们配置了服务器监控，再用例运行结束时，我们期望再用例运行过程的CPU的平均用户使用率不超过90 。因此我们可以配置如下监控阈值。 yaml name cpu.usage usertype servermonitorvalue 0.9expect monitorargs host 192.168.190.171fuction percentile mean,maxmin,median,mode,sum等args 非必须，只有使用percentile时候需要配置该选项。 arg Nvalue 90 监控阈值和指标阈值有以下几个不同之处 name 监控阈值的命名方式是采用的 resource name . index name 。下面给出服务器监控常用的监控阈值名 含义 指标名 CPU用户使用率 cpu.usage user CPU系统使用率 cpu.usage system CPU空闲使用率 cpu.usage idle CPU系统1min负载 system.load1 CPU系统5min负载 system.load5 CPU系统15min负载 system.load15 内存空闲率 mem.available percent 内存使用率 mem.used percent 磁盘使用率 disk.used percent io写次数 iostat.w per s io读次数 iostat.r per s io写速度 iostat.wKB per s io读速度 iostat.rKB per s 网络收包速度 个 S network.rxpck per s 网络发包速度 个 S network.txpck per s 网络收包速度 KB S network.rxKB per s 网络发包速度 KB S network.txKB per s type 监控类型，目前主要是值服务器监控 monitorargs 监控参数，包括目标Host以及计算方式。 host 主机地址列表，可以填写多个IP地址。如果某个服务器上并没有安装监控agent，则该阈值不会生效。 function 指标计算方法，计算性能测试这个段时间内的监控阈值。目前支持一下几个方法。默认方法为mean。 方法名 含义 percentile 百分数，需要指定参数N，例如N 0.9，表示90 分位数 max 最大值 min 最小值 median 中位数 mode 出现次数最多的数值 sum 求和 count 计算个数 监控配置配置文件支持，配置用例对应的监控信息，每个用例可以配置多个监控信息，配置方式如下所示 yamlmonitor name servermonitorargs var host 192.168.190.171 name jmetermonitorargs var application ti white 每个监控配置包含一下两个配置项 name 监控配置名，目前仅支持服务器监控 进程监控 Jmeter监控 大数据监控。 args 监控参数，List类型。各个监控项的详情请参考 监控配置 配置监控信息后，在性能报告中点击监控按钮，可以跳转到对应的监控视图。当然也可以不配置监控信息。 目标信息配置每个用例支持配置目标信息，主要用于展示性能测试具体对象的硬件配置。一个用例可以配置多个目标信息。配置方式如下所示 yamlserverenv server cpu 56Core 2886.92MHz server disk 3T server os centos 7.6.1810 Core server mem 256G server ip 192.168.190.171 每个目标配置项 包CPU基本信息，磁盘大小，系统信息，内存大小以及IP。","categorie":"自动化测试-自动化测试应用-性能测试-用例配置"},{"route":"/docs/qta/app/perftest/installmonitor.html","content":" 监控Agent在性能测试中获取监控数据的前提，就是需要在目标机器上安装monitoragent。monitoragent以telegraf为基础，并在此基础上封装了一些常用查用插件，并且将此时上报的性能数据直接上报到后端数据库中。目前支持服务器网路环境如下 IDC环境 外网环境 监控Agent安装安装监控Agent需要执行以下几个步骤 1.下载 monitoragent.zip 2.将monitoragent.zip的安装包拷贝到目标机上，执行解压命令 bashunzipmonitoragent.zip 3.进入解压后的目录，执行安装命令 bashcd pathtomonitoragent pythoninstall telegraf.py 执行上述命令后，默认会启动服务器监控，包括以下内容 CPU监控 内存监控 网络监控 磁盘I O监控 磁盘监控启动成功后，可以通过ServerMonitor的监控面板，查看上报的数据信息。 ServerMonitor监控面板 实现自定义数据上报此处实现自定义数据上报，主要是通过telegraf插件扩展方式实现。具体实现可以参考 telegraf插件扩展 telegraf插件上报格式要求 Q A1.无法观察到数据上报通过执行以下命令，可以查看是否telegraf上报数据报错 bashtelegraf test ","categorie":"自动化测试-自动化测试应用-性能测试-监控Agent安装"},{"route":"/docs/qta/app/perftest/monitor.html","content":" 监控配置性能用例用例中允许配置该用例对应的监控数据。该监控配置是可一个可选字段，不配置的话不会影响用例执行。该配置项可以用于指定默认的监控配置，也可以是用户自定义的监控数据。对于以下的所有监控类型，如果未安装monitoragent插件，所有数据都会展示位空。 服务器监控性能平台默认提供服务监控能力，前提是在该服务器上已经安装我们提供的monitoragent。服务器监控包括一下内容 CPU监控 内存监控 网络监控 磁盘I O监控 磁盘监控 服务监控样式如下所示 服务器监控数据 1 在用例配置文件中可以采用如下方式添加服务器监控 yamlmonitor name servermonitorargs var host 192.168.190.171 如果需要添加多个服务器监控只需要拍配置多个var host。 进程监控用于显示某个指定进程在用例执行过程中的资源使用状况。 进程CPU占用 进程内存占用 进程线程数在用例配置文件中可以采用如下方式添加进程监控 yamlmonitor name processmonitorargs var host 192.168.190.171var process testprocess jmeter监控用于展示jmeter用例执行过程中的，可视化数据趋势图，包含以下信息 总请求数 总错误数 错误率 吞吐量 活跃线程数 错误数据趋势 p95时间趋势Jmeter监控样式如下所示 Jmeter监控 3 在用例配置文件中可以采用如下方式添加Jmeter监控 yamlmonitor name jmetermonitorargs var application jmeterdemo 大数据监控安全测试团队定制化的监控视图，用于展示大数据用例执行过程中的，可视化数据趋势图，包含以下信息 logstash吞吐量 kafka吞吐量 es写吞吐 es写延时 es规模 Hadoopyarn任务性能大数据监控样式如下所示 大数据监控 4 在用例配置文件中可以采用如下方式添加大数据监控 yamlmonitor name epsmonitorargs var host 192.168.190.171 1 image servermonitor.png 2 image processmonitor.png 3 image jmetermonitor.png 4 image bigdatamonitor.png","categorie":"自动化测试-自动化测试应用-性能测试-监控配置"},{"route":"/docs/qta/app/perftest/tools.html","content":" 性能测试工具 已集成性能测试工具目前性能平台已经接了几种常见的性能工具，包括 jmeter 平台运行的工具版本为5.2.1 K6 平台运行的工具版本为0.24.0 Wrk 平台运行的工具版本为4.1.0 jmeter使用方法使用jmeter工具进行性能测试，可以在QTA平台上直接创建对应的Git工程。jmeter用例使用JMX文件进行描述，可以使用JmeterUI来编写对应的测试用例。详细用法参考 jmeter性能测试 jmeter性能数据字段 markdownfieldKeyfieldType hr begin timeintegercreate timeintegerdurationintegerend timeintegererrorsintegererrors ratefloatmonitor urlstringnamestringqpsfloatqpsintegerrecv ratefloatresponse timefloatresponse time 90floatresponse time 95floatresponse time 99floatresponse time maxfloatresponse time minfloatresultintegerresultstringsend ratefloatserversstringthresholdstringurlstring k6使用方法K6的性能用例使用JS文件进行描述，对应的用例实现需调用K6api来实现。用例实现了可以参考 Demo用例 ，K6 API文档 详细用法参考 K6性能测试 k6性能指标 markdownfieldKeyfieldType hr create timeintegerdata receivedfloatdata sentfloatend timeintegererror ratefloathttp req blockedfloathttp req connectingfloathttp req durationfloathttp req duration maxfloathttp req duration minfloathttp req duration p95floathttp req duration p99floathttp req receivingfloathttp req sendingfloathttp req tls handshakingfloathttp req waitingfloathttp reqsfloatiteration durationfloatiterationsfloatqpsfloatvusfloatvus maxfloat wrk使用方法WRK的性能用例使用lua文件进行描述，对应的用例实现需调用wrkapi来实现。详细用法参考 WRK性能测试 wrk性能指标 markdownfieldKeyfieldType hr Throughputstringcosttimestringcreate timeintegerend timeintegermonitor urlstringp50stringp75stringp90stringp99stringresultintegerrpsstringtotal errorsstringtotal readstringtotal reqsstring 接入新的性能工具接入一个新的性能工具，实质工作就是实现一个对应工具插件。所以这里的基本流程和 接入一般测试工具相同 相同。但是性能测试工具具有一定的共性，这里我们没有必要从头来定义一个性能工具。推荐通过复制一个现有的性能工具代码工程进行必要的修该即可。推荐根据 K6插件工程 为蓝本进行修改，主要修改以下两个部分 修改qtap plugin.yaml 插件描述文件 该文件用于定义插件，对于性能工具而言大部分可以复用,只需要修改以下几个部分 修改对应的插件ID即可。 修改test framworks 修改工具对应的使用文档 logo 1 修改插件的逻辑插件逻辑和一般工具没有区别 1 image plugin.png","categorie":"自动化测试-自动化测试应用-性能测试-性能测试工具"},{"route":"/docs/qta/app/perftest/userdata.html","content":" 用户上传性能数据性能应用支持用户在性能用例中上传性能数据，这里的基本原理还是需要在用例执行过程中生成对应的性能文件，包括qtap conclusion perf.json和qtap timesequence perf.json。 qtap conclusion perf.json 用于存放性能结论数据，每个用例执行结束，只会生成一条数据。 qtap timesequence perf.json 用于存放需要上报的时序数据，可以按照一定的时间间隔，就往该文件写入一条数据。用例执行结束时，上述文件会被清理。 上报数据样式 结论数据样式 json linenums measurement name targetname , 对应数据库measurement data scenes xxx测试 场景名 其他性能指标 k1 v1 ,... k2 v2 , 该数据主要包括两个部分 name 上报的指标名，命名规范为 indexname perf,和最终落地的数据库表名，存在一定的对应关系。 data 该部分主要用于上报性能数据，性能结论数据都存放在该字段。其中scences，用于定义一个场景，同一场景要求性能数据字段相同，默认可以为空。 时序数据样式上报时序性性能数据。根据该时序数据可生产对应的趋势图，展示待监控数据页面。该文件中每一行代表一个打点数据,每行数据格式如下所示 json linenums measurement name targetname ,“time” time 对应数据库measurement data scenes xxx测试 场景名 其他性能指标 k1 v1 ... k2 v2 , 其他字段和结论数据基本相同，仅多了一个time字段。该值代表该条数据上报是的时间戳，该数据的值是毫秒级的时间戳数据。 qtaf perflib如果使用Python脚本来做性能从测试可以使用qtaf perflib库来上报性能数据。 安装 bashpipinstall ihttp pypi.dq.oa.com simple trusted hostpypi.dq.oa.comqtaf perflib 使用示例qtaf perflib库的示例用法如下所示 python linenumsfromqtaf perflib.perflibimportPerfReportMixinclassDemoTest PerfReportMixin,DemoTestCase 示例测试用例 owner tester timeout 5priority DemoTestCase.EnumPriority.Highstatus DemoTestCase.EnumStatus.Readydefrun test self self.log info hellotestcase print startuploaddemobigdata EPSperf record measurement name demoperf , data logstash in 10000 , logstash filer 10000 , logstash out 10000 , norm engine produce 5000 , norm engine consumer 3000 , rule engine produce 2000 , rule engine consumer 1000 self.write pref data record print enduploaddemobigdata EPSperf defpost test self super DemoTestCase,self .post test self.report conclusion data if name main DemoTest .debug run 更多用法参考 使用文档 ","categorie":"自动化测试-自动化测试应用-性能测试-自定义数据上报"},{"route":"/docs/qta/app/unittest/INTRO.html","content":" 单元测试 简介单元测试是QTA自动化测试体系中重要分支之一，主要面向开发者或测试人员，为业务代码质量提供稳定性保障。QTA单元测试提供了一系列功能，包括用例解析 任务执行 测试结果上报报告 覆盖率自动采集上报 大盘数据分析等， 已支持的业界单元测试框架 语言 pytest 采用语言 Python unittest 采用语言 Python django unittest 采用语言 Python go test 采用语言 Go ginkgo 采用语言 Go更多框架持续支持中，欢迎企业微信联系 QTA小助手 接入。 功能概览 代码覆盖率 支持不同语言 框架，自动采集数据 解析上报 展示 统计 报告服务 用例结果 代码覆盖率数据展示，可扩展的测试结果格式支持 数据报表分析 高度可定制化的自动化统计数据报表，支持VIP私人定制 任务服务 提供不同触发方式，QTA平台提供不同触发方式，也可从不同ci平台触发敏捷执行 支持分布式调度执行 用例服务 用例解析器可扩展，兼容多种语言 框架 研发流程一体化 打通CI，研发流程一体化 QTA平台使用单元测试指引 创建项目创建项目请参考 测试项目 一节操作。 创建用例库你可以创建新代码仓库或导入已有代码仓库，代码仓库中存储你的自动化测试用例，请参考 测试用例 一节操作。 说明 如果你希望有一个demo代码库直接体验，可以使用 http git.code.oa.com QTATestProj vstation2020.git 该代码库，然后选择导入代码库，不要选择新建用例库。同时由于该代码库是用Pytest测试工具写的，所以点击导入代码库后，其中的 用例代码库配置 选择pytest测试工具,其他非必填参数可不填写。 创建任务并执行创建任务并执行请参考 测试任务 一节操作。 查看报告查看报告请参考 查看测试报告 一节操作。 QCI插件中使用QTA单元测试指引 使用QCI插件一 QTA 执行自动化测试使用场景 希望在CI插件流程中快速执行单元测试，自动采集代码覆盖率，同时将用例测试结果和代码覆盖率数据上报QTA平台展示和沉淀。你可参考 在CI流水线中执行 文档中的 QCI插件一 QTA 执行自动化测试 一节操作。 使用QCI插件二 QTA 启动测试任务使用场景 在QTA平台已经创建好了测试任务后，在QCI中通过该插件触发任务执行，这样可以动态传一些参数到QTA测试任务中，例如产品路径等，可以从流水线中构建出来的产品包传给QTA测试任务。你可参考 在CI流水线中执行 文档中的 QCI插件二 QTA 启动测试任务 一节操作。 QCI插件三 QTA 生成在线报告使用场景 假定你在流水线中前序任务中已经通过命令行或其他方式自行执行了用例，自行采集了覆盖率数据等，且已经保存在执行环境本地的情况下，插件提供让你将结果文件上传到QTA平台展示存储，以后可以用于历史数据分析的功能。你可参考 在CI流水线中执行 文档中的 QCI插件三 QTA 生成在线报告 一节操作。","categorie":"自动化测试-自动化测试应用-单元测试"},{"route":"/docs/qta/autotest/report/FORMAT.html","content":" 测试报告格式QTA测试报告支持扩展多种不同的的报告格式，目前已支持的报告格式如下 JUnit格式 QTA格式 JMETER格式 如需要新增其他格式的支持，请联系QTA团队。","categorie":"自动化测试-自动化测试服务-测试报告-测试报告格式"},{"route":"/docs/qta/autotest/report/UPLOAD.html","content":" 自助上传报告 功能概述QTA平台支持用户本地自行上传报告到QTA平台进行展示，无论是QTA自动化测试框架生成的结果文件 还是其他第三方框架生成的结果文件，均可上传QTA平台，在QTA平台查看该报告。hintstyletipend 报告功能可独立使用 ，无需依赖其他功能模块。目前可自助接入的报告格式包括JUnit QTA等类型，完整的支持类型列表请查看 支持的报告格式 文档，也开放支持其他格式的报告接入。endhint 使用场景将自己的报告上传到QTA平台有什么好处？以下列举部分但不是全部的使用场景 存储 可作为存储的用途，例如，你可查看历史报告 可视化展示 QTA对报告数据做了解析并展示，查看数据更方便 更高效 数据分析 上传后QTA会对数据做分析，帮助你分析用例稳定性等 bug提单 你可快速自助提单，后续还会支持自动发现Bug 自动提单并通知 性能及覆盖率数据采集 QTA支持性能及覆盖率数据的展示等 ...以上仅是部分的使用场景，还有更多不同场景的用途，欢迎接入，亲自体验 使用QTAP CLI上传报告 安装QTA命令行工具并完成登录，细参考文档 使用命令行工具 获取项目ID请参考 测试项目 一节“获取项目ID”操作 创建报告，其中 project后面的参数是实际的项目id,根据上一步可以获得项目id qtapreportcreate nmocha junit report2 fjunit projectqtadebug执行后生成的结果为报告id,本条命令执行结果值为10874296 创建完报告后返回报告id为10874296，然后上传junit格式的测试用例结果 该步可以多次调用上传多份xml文件 qtapreportupload10874296C Users hqlian Desktop tmp3 test results 2.xml 也支持上传附件到测试报告，比如执行日志 代码覆盖率报告等 qtapreportupload attachment10874296 tfile filelog.txt n执行日志qtapreportupload attachment10874296 tstatic web page file. cov htmls indexindex.html n代码覆盖率qtapreportupload attachment10874296 turlhttp monitor.com xxx url n监控日志目前支持的附件的类型有 类型 说明 参数 url 指定一个外部URL作为附件链接 url 为目标URL file 上传一个文件作为附件 file 为目标文件路径 static web page 上传一个静态网页目录作为附件 file 为目标文件夹， index 为主页文件名，使用相对路径，默认为 index.html 上传完成后，调用结束命令 qtapreportfinish10874296 然后到平台查看报告，入口 Coding平台 个人项目下 左侧侧边栏 自动化测试 报告。 QTA平台 个人项目下 左侧侧边栏 报告。 qta report 上述即可完成报告的上传。 使用RESTfulAPI上传报告 使用RESTfulAPI进行报告上传，可参考 测试报告API 也可参考 QTAP CLI的源码 实现，其也是通过调用RESTfulAPI进行实现。 在CI流水线中上传报告 QCIhttp qci.oa.com plugins market qtap 蓝盾","categorie":"自动化测试-自动化测试服务-测试报告-自助上传报告"},{"route":"/docs/qta/autotest/resource/EXTEND.html","content":" 自定义资源类型","categorie":"自动化测试-自动化测试服务-资源管理-自定义资源类型"},{"route":"/docs/qta/autotest/resource/PARALLEL_TEST.html","content":" 通过资源管理实现并行测试执行","categorie":"自动化测试-自动化测试服务-资源管理-实现并行测试执行"},{"route":"/docs/qta/autotest/resource/PRE_TEST.html","content":" 通过资源管理降低测试环境或被测对象构造负担","categorie":"自动化测试-自动化测试服务-资源管理-降低测试环境或被测对象构造负担"},{"route":"/docs/qta/autotest/task/CI.html","content":" 在CI流水线中执行 选择执行环境如果需要在CI流水线中触发自动化测试，根据对环境的要求的不同，有两种选择方式 第一种是，使用CI流水线的环境执行测试，这种情况等价于 本地执行测试 的方式。此外，用户也可以在CI流水线中使用自己的方式执行测试用例，仅将测试结果的内容上报给QTA，详情请参考 自助上传报告 第二种是，使用QTA平台提供的执行环境，在CI流水线中触发QTA平台的测试任务。 在CI流水线中触发测试任务 QCIQCI插件市场中已经有对应的插件，请直接 访问 使用。说明 由于QCI界面目前正在改版优化中，前端样式可能与以下截图略有出入，请关注填的参数项即可。 QCI插件一 QTA 执行自动化测试插件信息 插件名称 QTA 执行自动化测试 插件功能 在QCI上快速执行单元测试任务，针对单元测试框架的用例，会自动采集代码覆盖率，同时将用例测试结果和代码覆盖率数据上报QTA平台展示和沉淀。 插件更多介绍 请参考 QTA 执行自动化测试文档 。使用方法 qci任务中搜索插件“QTA 执行自动化测试“使用 qci execute qta tool qci execute qta tool 每项参数说明如下 用例结果格式 根据实际选择，单元测试选junit 报告名称 自行根据实际命名 QTA项目名 这里要填写QTA项目ID，参考 获取项目ID 一节拿到你的QTA项目ID，并填写。 测试工具 你的用例使用了什么测试框架，即对应选择该项 测试用例集 填写存放了测试用例的目录名称 覆盖率阈值 只针对单元测试类型的测试用例才有效，其他类型测试忽略该参数。填写0 1的数字，如果实际覆盖率阈值低于该值，那么该环节任务判定为失败。填写完各参数后保存并执行 cli qci tool1 1 执行完点击该步骤可以看到查看报告按钮。如我跑完后的报告链接是 http qta.oa.com qtaUnittest autotest report 14594775 info 。 QCI插件二 QTA 启动测试任务插件信息 插件名称 QTA 启动测试任务 插件功能 在QTA平台已经创建好了测试任务后，在QCI中通过该插件触发任务执行，这样可以动态传一些参数到QTA测试任务中，例如产品路径等，可以从流水线中构建出来的产品包传给QTA测试任务。 插件更多介绍 请参考 QTA 启动测试任务文档 。使用方法 首先，请参考 测试任务 一节创建好QTA测试任务，参考该文 获取任务ID 一小节，获取到任务ID。qci任务中搜索插件“QTA 启动测试任务“使用 qci start qta task 部分参数说明如下 QTA测试任务ID 填写刚刚根据上文获取到的任务ID即可。其他参数根据实际需要填写，然后保存，启动任务即可。执行完点击该步骤可以查看报告 QCI插件三 QTA 生成在线报告插件信息 插件名称 QTA 生成在线报告 插件功能 该插件是假定你在流水线中前序任务中已经通过命令行或其他方式自行执行了用例，自行采集了覆盖率数据等，且已经保存在执行环境本地的情况下，插件提供让你将结果文件上传到QTA平台展示存储，以后可以用于历史数据分析的功能。 插件更多介绍 请参考 QTA 生成在线文档 。使用方法 qci任务中首先自行添加一个命令行脚本插件，去执行你的用例，单元测试可以一并自行执行命令采集覆盖率数据 cli qci tool online report 1 在同个阶段的同个任务下，或不同阶段下 这两种情况下才是串行执行，满足我们先生成数据再上报的需求 ，搜索插件“QTA 生成在线文档“使用 cli qci tool online report 2 cli qci tool online report 3 重要参数说明如下 用例结果格式 根据实际选择，单元测试选junit 报告名称 自行根据实际命名 QTA项目名 这里要填写QTA项目ID，参考 获取项目ID 一节拿到你的QTA项目ID，并填写。 用例结果xml文件 你的前序插件已经生成在执行机本地的用例结果文件相对路径 测试用例集 填写存放了测试用例的目录名称 覆盖率xml文件 只针对单元测试类型的测试用例才有效，其他类型测试忽略该参数，填写你的前序插件已经生成在执行机本地的覆盖率文件相对路径 覆盖率阈值 只针对单元测试类型的测试用例才有效，其他类型测试忽略该参数。填写0 1的数字，如果实际覆盖率阈值低于该值，那么该环节任务判定为失败填写完各参数后保存并执行 cli qci tool online report 4 执行完点击该步骤可以看到查看报告按钮。如我跑完后的报告链接是 http qta.oa.com qtaUnittest autotest report 14595395 。 蓝盾蓝盾研发商店已经有对应的流水线插件，请直接 访问 使用。 OrangeCIOrangeCI插件由johannli友情提供，请直接 访问 使用。 其他CI其他CI环境，可以参考使用 命令行触发测试任务 的方式。","categorie":"自动化测试-自动化测试服务-测试执行-在 CI 流水线中执行"},{"route":"/docs/qta/autotest/task/CMD.html","content":" 通过命令行触发测试任务 使用前准备1.安装QTA命令行工具并完成登录，细参考文档 使用命令行工具 1.在Coding或QTA平台找到你的项目ID 获取项目ID请参考 测试项目 一节“获取项目ID”操作 1.获取要触发的自动化测试任务的ID 下文命令行中为 TASK ID plan id 使用方法 触发执行自动化测试 触发自动化测试，但不等待执行完成 shellqtaptaskstart TASK ID 触发自动化测试，同步等待执行完成 shellqtaptaskstart TASK ID wait 为测试任务指定对应的制品文件 安装包 如果是本地构建的包，需要先上传并创建一个制品，然后再触发任务 shellARTIFACT REPO ID qtapartifact repocreate name 用户上传 project PROJECT ARTIFACT ID qtapartifactcreate repo ARTIFACT REPO ID qtapartifactupload ARTIFACT ID f. your packagesqtaptaskstart TASK ID artifact ARTIFACT ID 如果是CI构建的包，可以直接关联制品，并触发任务以QCI为例，假设CI任务一次执行记录的链接为 http qci.oa.com pipeline 515 totalresult build 459089 从中可以提取出，对应的CI流水线任务ID为 QCI TASK ID 515 ，对应的CI构建任务ID为 QCI BUILD ID 459089 shellARTIFACT REPO ID qtapartifact repocreate name QCI project PROJECT providerqci ref id QCI TASK ID ARTIFACT ID qtapartifactcreate repo ARTIFACT REPO ID ref id QCI BUILD ID qtaptaskstart TASK ID artifact ARTIFACT ID ","categorie":"自动化测试-自动化测试服务-测试执行-命令行触发测试任务"},{"route":"/docs/qta/autotest/task/LOCAL.html","content":" 本地环境执行在一些情况下，如果希望在自己的执行环境下，自己调度执行测试，可以使用这个功能实现。hintstyletipend使用这个功能执行也会自动生成一份在线的测试报告endhint 本地环境要求和准备对于要执行的环境，需要保证 具备测试工具和框架执行的运行时环境，比如Python JavaJDK环境等 操作系统需要符合测试工具和框架的要求 确保网络环境能访问QTA 以下的QTA命令行工具能安装并登录即可 对于执行环境，还需要安装QTA命令行工具并完成登录，详细参考文档 使用命令行工具 操作说明1.首先在QTA平台找到你的项目id 如果未有项目请参考 获取项目ID 一节拿到你的QTA项目ID 下文假设获取的项目ID为 PROJECT 1.确认要使用的测试工具，并获取测试工具的ID，下文假设获取的测试工具ID为 TEST TOOL 1.获取本地测试用例代码根路径，下文假设获取的本地测试用例代码根路径为 TEST PROJ PATH 单点执行 shellREPORT ID qtapreportcreate project PROJECT name XX测试报告 TESTCASES qtaptestcaseload path TEST PROJ PATH type TEST TOOL report REPORT ID name qqtest.hellotest 获取要执行的测试用例列表qtaptestcasesetup path TEST PROJ PATH type TEST TOOL 测试工具初始化forTESTCASEin TESTCASES doqtaptestcaserun path TEST PROJ PATH type TEST TOOL test TESTCASE project PROJECT report REPORT IDdoneqtaptestcasecleanup path TEST PROJ PATH type TEST TOOLqtapreportfinish REPORT ID 分布式执行 全局初始化，只需要在一个节点上执行一次 shellREPORT ID qtapreportcreate project PROJECT name XX测试报告 TESTCASES qtaptestcaseload path TEST PROJ PATH type TEST TOOL report REPORT ID name qqtest.hellotest 获取要执行的测试用例列表echo TESTCASES PIPE 执行测试用例，可以多个执行节点并发 shellqtaptestcasesetup path TEST PROJ PATH type TEST TOOL 测试工具初始化forTESTCASEin PIPE doqtaptestcaserun path TEST PROJ PATH type TEST TOOL test TESTCASE project PROJECT report REPORT IDdoneqtaptestcasecleanup path TEST PROJ PATH type TEST TOOL 全局反初始化，只需要在一个节点上执行一次 shellqtapreportfinish REPORT ID ","categorie":"自动化测试-自动化测试服务-测试执行-本地执行测试"},{"route":"/docs/qta/autotest/task/OFFSITE.html","content":" 离线环境执行功能开发中，尽情期待 ","categorie":"自动化测试-自动化测试服务-测试执行-离线执行测试"},{"route":"/docs/qta/autotest/task/RDHELPER.html","content":" 在RDHelper研发助手中执行测试任务 使用前准备1.安装RDHelper工具并配置，请参考文档 RDHelper安装手册 JetBrains 共三个地方必须配置 插件的全局 用户名 和 token 用于跟插件后台服务交互的鉴权 。 启用模块 QTA测试 上打 。 QTA测试里面配置上个人 token 。详情参考如下图 1 2 使用方法 进入 自动化测试 模块 自动化测试 点击绿色启动按钮 选择测试计划，可以通过名称来搜索，默认展示的你当前用户所拥有的测试计划 选择测试包，即自己本地打好的包。 点击启动即可。 自动化测试 自动化测试 ","categorie":"自动化测试-自动化测试服务-测试执行-在添翼.研发助手中执行"},{"route":"/docs/qta/autotest/task/TASK.html","content":" 测试任务 创建测试任务入口 Coding平台 个人项目下 左侧侧边栏 自动化测试 任务列表。 QTA平台 个人项目下 左侧侧边栏 执行 任务。点击新建任务 task create 选择可选的对应测试类型 create diff type task 任务里选择不同的代码仓库地址，对应需要填写的参数可能有差异，根据实际项填写即可，对于有默认值的选择，可使用默认值，或根据实际调整 task create params 不断下一步，有需要调整的参数调整即可，最后点击提交 create task submit 任务即创建完成，可以在任务列表中找到你的任务。 获取任务ID创建完任务后，可以在任务列表查看对应任务对任务ID task id 如我创建的任务ID为13904532.该任务ID在CI插件触发QTA任务时需要用到。 启动测试任务支持多种方式启动 手动启动，可以在任务列表控制台上直接点击启动 通过 触发器 启动 通过 API调用 启动 通过 QTAP CLI 启动使用以下命令启动 qtaptaskstart task id 可选参数 positionalarguments taskspecifictask id optionalarguments h, helpshowthishelpmessageandexit nameNAMEtaskname receiverRECEIVERtaskreceivers channelCHANNEL CHANNEL... taskreceivers channels propertiesPROPERTIES PROPERTIES... taskproperties 常用properties TEST REPO URL 测试项目URL TESTCASENAME 测试用例集 PRODUCT PATH 产品路径 常用例子 qtaptaskstart task id name task name properties TEST REPO URL repo url properties TESTCASENAME testcases properties PRODUCT PATH apk path 查看执行记录入口 Coding平台 个人项目下 左侧侧边栏 自动化测试 任务列表。 QTA平台 个人项目下 左侧侧边栏 执行 执行记录。进入后可以查看各个任务的报告链接和执行日志等 task execute record ","categorie":"自动化测试-自动化测试服务-测试执行-测试任务"},{"route":"/docs/qta/autotest/task/TRIGGER.html","content":" 触发器触发器是一种设置任务执行启动的配置，通过触发器可以让自动化测试任务在既定的场景和时间下启动执行。目前已经支持的触发器的类型有 时间触发器 企业微信机器人触发器 KubenetersProbe触发器 hintstyletipend如果有更多的触发场景的需要，也欢迎反馈，一起完善自动化测试在多种不同环境和场景的应用 endhint","categorie":"自动化测试-自动化测试服务-测试执行-触发器"},{"route":"/docs/qta/autotest/testcase/CONFIGMAP.html","content":" 测试用例库配置测试用例库配置是用于存储测试用例库的所需要的配置的配置中心服务，通过测试用例配置，可以实现 一份测试用例代码使用多份不同的配置，比如针对不同测试环境的配置信息 针对配置信息进行加密存储，在测试用例库代码开源的情况下，保证敏感信息不泄漏 创建配置集可以使用网页上或命令行工具的方式创建个更新配置集 在网页上创建 Coding平台 选择个人项目 左侧侧边栏 自动化测试 用例库，点击“用例库” QTA平台 选择个人项目 左侧侧边栏 用例 配置 新建用例库 点击右上角“关联配置” 新增关联配置 若下拉值为空，则点击查看，跳转新建配置集 创建成功后，返回关联配置，点击刷新即可拉到最新用例配置集列表。 通过QTAP CLI创建使用以下命令创建 qtapconfigmapcreate projec project id name name from file local config path local config path 用于指定配置的文件或文件夹，如果是配置文件，则文件名会作为配置项的名称，文件的内容即配置项的值 如果是文件夹，则会便利配置文件夹中的全部文件，并使用文件相对路径作为配置项的值，文件内容作为配置项的值。配置集创建后，可以使用 update 命令进行更新 qtapconfigmapupdate projec project id name name from file local config path 如果需要对配置项进行加密，则可以指定 secure 参数 qtapconfigmapupdate projec project id name name from file local config path secure 如果只需要对部分配置进行加密，可以分别指定，比如 qtapconfigmapupdate project project id name name from filepubkey.pem from file secureprikey.pem 关联到测试用例库创建配置集后，将其关联到对应的用例库后，在Coding平台上的执行对应的测试用例，会自动加载和使用相关的配置信息。可以在用例库的详情页面进行关联配置和修改 目前关联配置有两种形式 环境变量 这种方式会将全部的配置项都映射为环境变量，配置项名就是环境变量名，配置项值就是环境变量的值 文件映射 会将配置项的信息存储在指定的关联的路径下，配置项名就是文件名，配置项值就是文件的内容。需要注意的是，配置项的名称中如果存在字符“ ”，则在映射为文件的时候，会自动创建对应层级的目录，比如下面的配置项的值 json aaa xxx dada hello , aaa dada world 如果映射为文件会自动构造以下的文件树 . aaa xxx dada dada 使用持续集成自动更新配置可以使用持续集成的方式，将配置信息使用一个单独的代码库进行托管，并通过CI流水先实现自动更新配置信息到QTA平台 使用QCI参考以下QCIFile配置，可以实现对应配置文件代码库Commit提交后自动触发更新到QTA平台 yamlversion 2.0 qcifile版本号，请不要修改 usercustomenviromentvariablesenv QTAP TOKEN secure 替换为QTA平台的用户TOKEN，注意要使用QCI加密 QTAP PROJECT 替换为QTA项目 QTAP CM NAME 替换为配置集名称 definethestagesstages stage Updatecmds cmdsareexecutedsequtially pipinstall ihttp pypi.dq.oa.com simple trusted hostpypi.dq.oa.comqtap cli qtaplogin t QTAP TOKEN qtapconfigmapupdate project QTAP PROJECT name QTAP CM NAME from file. 使用蓝盾CI待补充 使用其他CI流水线系统待补充","categorie":"自动化测试-自动化测试服务-测试用例-测试用例配置"},{"route":"/docs/qta/autotest/testcase/REPO.html","content":" 测试用例库 创建或导入测试用例库Coding平台入口 Coding平台 个人项目下 左侧侧边栏 自动化测试 用例。QTA平台入口 QTA平台 个人项目下 左侧侧边栏 用例 用例库。 创建用例库点击新建用例库 新建用例库 新建用例库 根据实际需求填写参数，然后点击确定，即创建完用例库。 导入用例库Coding平台 导入用例库需先进行 代码库登记 ，再进行下方步骤。QTA平台入口 QTA平台 个人项目下 左侧侧边栏 用例 用例库。点击导入用例库 导入用例库 导入用例库 填写已经存在的一个git仓库地址，并填写其他参数，然后点击确定，即导入用例库完成。 查看用例库创建或导入用例库后，QTA平台会自动解析完所有用例并展示。查看路径 Coding平台 选择个人项目 左侧侧边栏 自动化测试 用例库。 QTA平台 选择个人项目 左侧侧边栏 用例 用例库。在该页面下可以找到你的仓库并点击 git仓库 点击用例库名称，进入查看用例树，解析用例大概需要0 5min,请耐心等待后查看 用例树 同步代码库测试用例 非操作指引，仅供了解 通过CI自动同步在QTA创建或导入的测试项目代码，平台会对应创建一个CI任务，每次用户提交代码到代码库中，都会触发工具更新测试用例的数据到QTA的平台。 通过QTA命令行工具上报用例数据用户也可以通过QTA命令行工具按需上报测试用例数据。","categorie":"自动化测试-自动化测试服务-测试用例-测试用例库"},{"route":"/docs/test/manual/cases/management.html","content":" title 管理测试用例 CODINGDevOpsOA帮助中心pageTitle 管理测试用例pagePrevTitle 快速入门pagePrev test quick start.htmlpageNextTitle 执行测试用例pageNext test manual cases usage.html 测试用例是CODING测试管理的最小组成单位，每个用例都包括了本次测试的描述 步骤 预期结果等等。本文为您详细介绍如何管理测试用例。 进入项目1.单击页面右上角的 imgsrc https main.qcloudimg.com raw d94a8e60dd3a41d0af07d72ae0e9d70e.png style margin 0 ，进入项目列表页面，单击项目图标进入目标项目。 添加用例1.选择左侧菜单栏的 测试管理 用例管理 ，进入用例管理页面。2.单击 imgsrc https main.qcloudimg.com raw 395acddf1b1058ea0267965a5461c026.png style margin 0 ，输入名称后按回车键创建分组。 3.单击 创建用例 。4.每个用例包括了本次测试的标题 前置条件 描述 步骤 预期结果等等。 标题 必填项，建议取辨识度高的标题。 前置条件 可选项，您可以用来描述在本次测试所依赖的条件 用例类型 根据不同的场景，您可以选择 文本用例 或 步骤用例 的其中一种。 用例内容 最重要的部分，您可以描述此次测试的具体内容以及期望得到的结果。 除了基本的字段外，您还可以根据需要，添加您认为对本次测试有帮助的附件。5.单击 保存 ，即可完成测试用例创建。 文本用例适用于大部分简单 没有明确步骤的测试。 步骤用例步骤用例的添加方式与文本用例的区别是 步骤用例允许您具体地定义该测试每一步的测试内容以及期望的测试结果。例如您有一个“邀请好友 本人返现”的测试场景，您可以选择使用 步骤用例 创建该用例。 修改和删除用例1.在用例管理页，单击用例标题进入用例详情。2.在用例详情页，可直接修改用例内容，单击下方 保存 ，完成修改。3.在用例详情页，单击下方 imgsrc https main.qcloudimg.com raw 792df50b5f13c823701f842615b5779c.png style margin 0 ，再单击 确定 可删除用例。 导入用例在用例管理页，右上角单击 导入图标 ，选择对应方式进行用例导入。CODING测试管理提供了 从Excel导入用例 从TestLink导入用例 和 从其他项目导入用例 三种方式。 从Excel导入用例该导入用例方式，只支持文本模式的用例导入，导入的字段分别为 标题 ， 前置条件 ， 步骤 ， 期望结果 ，其中 标题 为必填项。1.选择“从Excel导入用例”，弹出上传文件对话框。2.选择目标模块。3.上传指定格式的Excel或CSV文件 可下载模板，根据模板格式整理数据 。4.单击 导入 ，若导入成功，则会把导入的用例导入到选择的目标模块中。5.若存在不满足要求的记录，可下载错误日志以修正数据并再次上传。若单击 继续导入 则会将检查通过的记录导入到CODING测试管理中。您也可单击 重新开始 重新选择文件上传。 上传格式必须符合模板格式 可在上传窗口下载模板 。 确保表格内只有一个工作簿，如果有多个工作簿则只有第一个工作簿会被处理。 单次最大支持导入500条用例记录。 上传CSV文件，需要确保字段间使用英文逗号分隔。 从TestLink导入用例支持文本模式和步骤模式的用例导入，导入的字段分别为 标题 ， 前提 ， 步骤 。支持TestLink中用例集 TestSuite 导入为CODING测试管理中的模块。1.从TestLink中导出XML格式的用例或用例集2.在CODING测试管理中选择“从TestLink导入用例”。3.上传从TestLink导出的XML文件。4.单击 导入 ，则执行用例和模块导入操作，若失败则会提示错误原因。 XML文件中的用例集 TestSuite 对应CODING测试管理中的模块。 请确保文件中包含的用例集最多为3层，若不符合，则需要在TestLink中调整为满足需要情况下重新导入。 若文件中只包含用例，则在将用例导入CODING测试管理中时，将自动创建模块用于组织用例。 单次最大支持导入500条用例。 若存在步骤用例，在导入过程中会自动 将预期结果为空的 连续的多个步骤，自动合并成一个有预期结果的步骤 。 从其他项目导入测试用例 1.在CODING测试管理中选择“从其他项目导入用例”。2.选择从哪个项目导入。3.勾选需要被复制的用例。 复制用例时，默认将用例所属分组一并复制到当前项目。 若开启 平铺所选用例 开关，则将分组下所有用例直接复制到当前项目的目标分组下，不保留原用例分组。 复制后的用例总分组层级不能超过3层，且用例必须从属于分组。 当前登录成员必须拥有目标项目的测试管理查看权限，才能从目标项目中复制用例。 4.单击 下一步 ，选择当前项目内的目标分组。5.单击 确认导入 ，完成导入。导入成功后，右下角消息通知栏将弹出 导入用例成功 提示。","categorie":"测试管理-操作指南-测试用例-管理测试用例"},{"route":"/docs/test/manual/cases/usage.html","content":" title 执行测试用例 CODINGDevOpsOA帮助中心pageTitle 执行测试用例pagePrevTitle 管理测试用例pagePrev test manual cases management.htmlpageNextTitle 团队成员使用pageNext test manual team usage.html 操作场景对计划内的任务进行测试是CODING测试管理的重要环节，也是每个成员日常重复最多的动作。下面介绍如何针对某一个测试任务进行测试，具体包括 1.开始测试，可过滤出“分配给我的”测试任务。2.选择要测试的测试任务，对测试任务添加测试结果状态 备注 附件。3.添加基于步骤用例的测试任务的结果状态。 操作步骤 步骤1 开始测试1.选择左侧菜单栏的 测试管理 测试计划 ，进入测试计划页面。2.在左侧测试计划列表中选择一个测试计划，右侧将展示该测试计划中包含的所有测试用例。 如果您想测试整个测试计划，则直接单击右上角的 开始测试 。 如果您只想测试分配给自己的测试任务，则单击开始测试右侧的更多选项，勾线 “只测我的” ，然后在单击 开始测试 ，则系统会过滤掉不是分配给我的测试任务，并且进入测试中的界面。 步骤2 添加测试结果1.在测试中的页面，单击页面下方的 记录结果 ，将弹出记录测试结果弹窗页。 2.在记录测试结果弹窗页中，您可以选择您实际测试过程中得到的结果 通过 失败 ，某些情况可能由于其他的原因本次测试没有顺利完成，您也可以添加测试结果为 受阻 或者 重测 。3.当然在添加结果的同时您也可以顺便添加 备注 。4.单击 添加结果 您便完成了一次测试。5.除了在添加结果的时候添加备注之外，CODING也提供了单独的添加备注界面，单击 发表注释 即可发表一个不包含测试结果的单纯备注。6.有时候您可能需要提供部分证据，来告诉开发人员这个测试的确没有通过，那么推荐您使用 添加附件 功能，CODING测试管理允许在添加结果和添加注释的时候都同时上传附件。 步骤3 添加步骤用例测试结果上面介绍了如何完成一个简答测试任务的测试，包括添加结果 添加注释 上传附件等等，但是很多情况下测试任务要比上面的复杂的多，例如基于 步骤用例 的测试任务，因为 步骤用例 描述内容不是一段纯文本而是明确的步骤，所以自然针对此类的测试任务也要稍微复杂些。下面介绍如何测试基于步骤用例的测试任务。 1.首先入口和普通测试任务相同，单击 记录结果 按钮同样进入记录测试结果弹窗页。2.上面四个状态表示您对整个任务的测试结果 而不是每一个步骤的测试结果，通常情况下每个步骤都通过该任务才算通过 ，下面罗列了该任务的每一个步骤的预期，您要做的是在每个步骤下面填写您的“实际测试结果”，并标示该步骤为 通过 或者 失败 。3.最后再添加整个测试任务的结果 通过 受阻 重测 失败 ，填写完上面的必要内容之后您就可以单击 添加结果 完成这次看似复杂点的测试。和简单的测试任务一样，您也可以添加注释 上传附件。以上就完成了一个完整的测试流程。","categorie":"测试管理-操作指南-测试用例-执行测试用例"},{"route":"/docs/qta/autotest/report/formats/JMETER.html","content":" JMeterJMeter测试结构格式由JMeter工具自定义的一种格式，一般为 .jtl 文件名后缀的文件使用。 示例文件 xmlversion 1.0 encoding UTF 8 testResultsversion 1.2 httpSamplet 76959 it 0 lt 0 ct 76959 ts 1557366489836 s false lb test rc NonHTTPresponsecode org.apache.http.conn.HttpHostConnectException rm NonHTTPresponsemessage Connectfailed Connectionrefused Connectionrefused tn QTA接口1 1 dt text by 2641 sby 0 ng 1 na 1 assertionResult name XML断言 name failure true failure error true error failureMessage Contentisnotallowed failureMessage assertionResult assertionResult name 响应断言 name failure true failure error false error failureMessage Testfailed failureMessage assertionResult java.net.URL http 0.0.0.0 5234 xx java.net.URL httpSample httpSamplet 76254 it 0 lt 0 ct 76254 ts 1557366642533 s false lb test rc NonHTTPresponsecode org.apache.http.conn.HttpHostConnectException rm NonHTTPresponsemessage Connectfailed Connectionrefused Connectionrefused tn QTA接口1 1 dt text by 2641 sby 0 ng 1 na 1 assertionResult name XML断言 name failure true failure error true error failureMessage Contentisnotallowed failureMessage assertionResult assertionResult name 响应断言 name failure true failure error false error failureMessage Testfailed failureMessage assertionResult assertionResult name BeanShell断言 name failure false failure error false error failureMessage failureMessage assertionResult java.net.URL http 0.0.0.0 5021 xx java.net.URL httpSample samplet 2 it 0 lt 0 ct 0 ts 1557366718882 s true lb DebugSampler rc 200 rm OK tn QTA接口1 1 dt text by 548 sby 0 ng 1 na 1 testResults ","categorie":"自动化测试-自动化测试服务-测试报告-测试报告格式-JMETER"},{"route":"/docs/qta/autotest/report/formats/JUNIT.html","content":" JUnitJUnit是使用最广泛的测试结果类型，大部分常用的单元测试和非单元测试框架都有广泛的支持。JUnit格式也是标准化的，更多格式说明请参考 文档 。 示例文件 xmlversion 1.0 encoding UTF 8 testsuitestests 6 failures 4 time 3.000 testsuitetests 4 failures 2 time 3.000 name TestExampleTestSuite properties properties testcasename TestExample time 0.000 failuremessage Failed type math testify test.go 35 xA ErrorTrace x9 math testify test.go 35 xA Error x9 Notequal xA x9 expected 4 xA x9 actual 5 xA Test x9 TestExampleTestSuite TestExample xA suite.go 106 OnCase xA testpanicked CaseDown xA goroutine7 running xA runtime debug.Stack 0xc000059a10,0x747be0,0x818890 xA C Go src runtime debug stack.go 24 0xae xA Flerken testify suite.failOnPanicWithStatus 0xc0000d0200,0xc000059f38 xA C Users admin go src Flerken testify suite suite.go 106 0xa0 xA panic 0x747be0,0x818890 xA C Go src runtime panic.go 513 0x1c7 xA awesomeProject test. MySuite .TestExample 0xc000004880 xA C Users admin go src awesomeProject math testify test.go 36 0xc2 xA reflect.Value.call 0xc00037c840,0xc000006278,0x13,0x7c3073,0x4,0xc000429f80,0x1,0x1,0xc000429ea8,0x80,... xA C Go src reflect value.go 447 0x45b xA reflect.Value.Call 0xc00037c840,0xc000006278,0x13,0xc000429f80,0x1,0x1,0x7c2560,0x71b00d,0xb xA C Go src reflect value.go 308 0xab xA Flerken testify suite.Run.func2 0xc0000d0200 xA C Users admin go src Flerken testify suite suite.go 186 0x320 xA testing.tRunner 0xc0000d0200,0xc00042e400 xA C Go src testing testing.go 827 0xc6 xA createdbytesting. T .Run xA C Go src testing testing.go 878 0x363 failure testcase testcasename TestExample1 time 0.000 failuremessage Failed type math testify test.go 39 xA ErrorTrace x9 math testify test.go 39 xA Error x9 Notequal xA x9 expected 4 xA x9 actual 5 xA Test x9 TestExampleTestSuite TestExample1 failure testcase testcasename TestExample4 time 3.000 testcase testcasename TestExample5 time 0.000 skippedmessage math testify test.go 54 skipped testcase testsuite testsuitetests 2 failures 2 time 0.000 name TestExample2TestSuite properties properties testcasename TestExample2 time 0.000 failuremessage Failed type suite.go 106 OnSetup xA testpanicked SetupTest123123123123 xA goroutine22 running xA runtime debug.Stack 0xc0002cbdb8,0x747be0,0x818880 xA C Go src runtime debug stack.go 24 0xae xA Flerken testify suite.failOnPanicWithStatus 0xc0003f6000,0xc0002cbf38 xA C Users admin go src Flerken testify suite suite.go 106 0xa0 xA panic 0x747be0,0x818880 xA C Go src runtime panic.go 513 0x1c7 xA awesomeProject test. MySuite2 .SetupTest 0xc0003f2060 xA C Users admin go src awesomeProject math testify test.go 30 0x40 xA Flerken testify suite.Run.func2 0xc0003f6000 xA C Users admin go src Flerken testify suite suite.go 168 0x424 xA testing.tRunner 0xc0003f6000,0xc0003b9000 xA C Go src testing testing.go 827 0xc6 xA createdbytesting. T .Run xA C Go src testing testing.go 878 0x363 failure testcase testcasename TestExample3 time 0.000 failuremessage Failed type suite.go 106 OnSetup xA testpanicked SetupTest123123123123 xA goroutine23 running xA runtime debug.Stack 0xc0002cbdb8,0x747be0,0x818880 xA C Go src runtime debug stack.go 24 0xae xA Flerken testify suite.failOnPanicWithStatus 0xc0003f6200,0xc0002cbf38 xA C Users admin go src Flerken testify suite suite.go 106 0xa0 xA panic 0x747be0,0x818880 xA C Go src runtime panic.go 513 0x1c7 xA awesomeProject test. MySuite2 .SetupTest 0xc0003f2060 xA C Users admin go src awesomeProject math testify test.go 30 0x40 xA Flerken testify suite.Run.func2 0xc0003f6200 xA C Users admin go src Flerken testify suite suite.go 168 0x424 xA testing.tRunner 0xc0003f6200,0xc0003b9080 xA C Go src testing testing.go 827 0xc6 xA createdbytesting. T .Run xA C Go src testing testing.go 878 0x363 failure testcase testsuite testsuites ","categorie":"自动化测试-自动化测试服务-测试报告-测试报告格式-JUNIT"},{"route":"/docs/qta/autotest/report/formats/QTA.html","content":" QTAQTA测试结构格式，是由QTA系列的测试框架自定义的一种适用于集成测试和端对端测试自动化的结果文件格式。 文件格式定义 文件总体框架 xml xmlversion 1.0 xml stylesheettype text xsl href TestResult.xsl TEST ..... TEST TEST标签在该标签下存储报告相关的所有信息 全局只能有一个这个标签 。有以下必要的属性 begintime 用例开始时间，比如 2013 06 2706 52 52 duration 用例执行时长，比如 00 02 6.37 endtime 用例结束时间，比如 2013 06 2706 54 58 name 用例名，比如 qqtest.dataandset.syssetting.basicstatus.StausSwitchToLock owner 用例作者名，比如 foolin priority 用例优先级，目前支持的值有 Normal ， High ， Low 和 BVT result 用例执行结果，测试通过为 True ，反之为 False timeout 用例执行超时时间，单位为分钟，比如 10 TEST可以包含一个或者多个子标签 STEP 。 STEP标签在该标签记录用例相关步骤信息。有以下必要的属性 result 步骤执行结果，测试通过为 True ，反之为 False time 步骤执行耗时，比如 06 52 52 title 步骤名，可以是任意文本，比如 测试用例初始步骤 STEP标签可以包含一个或者多个以下类型的标签，且顺序随意 INFO WARNING ERROR INFO标签表示一个提示级别的日志，标签无任何属性，标签内的文本表示对应的日志信息。可以包含子标签 ATTACHMENT 。 WARNING标签表示一个警告级别的日志，标签无任何属性，标签内的文本表示对应的日志信息。可以包含子标签 ATTACHMENT 。 ERROR标签表示一个错误级别的日志，标签无任何属性，标签内的文本表示对应的日志信息。可能或包含以下子标签 ACTUAL EXPECT EXCEPT ATTACHMENT EXCEPT标签表示异常步骤信息，标签无任何属性，标签内的文本表示对应的异常信息。 ACTUAL标签表示一个断言失败时的实际值，标签无任何属性，标签内的文本表示实际值。ACTUAL标签需要和 EXPECT 成对出现。 EXPECT标签表示一个断言失败时的预期值，标签无任何属性，标签内的文本表示预期值。EXPECT标签需要和 ACTUAL 成对出现。 ATTACHMENT标签表示一个附件，标签有一个必要属性 filepath 表示附件的文件路径或URL地址标签内的文本表示附件名。 SDK支持Python语言的测试框架，可以使用 QTAF ，QTAF中的XML结果就是基于此标准格式的实现。","categorie":"自动化测试-自动化测试服务-测试报告-测试报告格式-QTA"},{"route":"/docs/qta/autotest/task/trigger/K8S_PROBE.html","content":" KubenetersProbe触发器通过 KubenetersProbe触发器 ，可以实现在KubenetersPod扩容时，对新部署的Pod使用QTA自动化测试进行验证，且只有验证通过的Pod才会上线服务。QTA的 KubenetersProbe触发器 使用 Kubeneters的Liveness ReadinessProbe机制 来配置实现。 使用方法首先，创建一个KubenetersProbe触发器，指定一个对应的测试任务，创建成功并获取对应触发器的AccessToken入口 Coding平台 个人项目下 左侧侧边栏 自动化测试 触发器。 QTA平台 个人项目下 左侧侧边栏 执行 触发器。 然后，获取触发脚本并部署到被测业务容器中，可以根据自己容器的支持运行时选择 运行要求 脚本 Python2.7 点击下载 Python3.6 即将支持 Node.JS 即将支持 容器准备就绪后，即可配置KubenetersProbe。可以通过修改Kubeneters部署的YAML配置，比如使用TKE的情况 参考以下YAML段，增加对应的 readinessProbe 或 livenessProbe yaml...spec containers ...readinessProbe exec command python data tools qtap checker.py a youraccesstoken..... initialDelaySeconds 10periodSeconds 20timeoutSeconds 300 根据测试任务的执行时间定义一个宽松值 ","categorie":"自动化测试-自动化测试服务-测试执行-触发器-Kubeneters Probe 触发器"},{"route":"/docs/qta/autotest/task/trigger/TIMER.html","content":" 时间触发器","categorie":"自动化测试-自动化测试服务-测试执行-触发器-时间触发器"},{"route":"/docs/qta/autotest/task/trigger/WXWORK_BOT.html","content":" 企业微信机器人触发器","categorie":"自动化测试-自动化测试服务-测试执行-触发器-企业微信机器人触发器"}]